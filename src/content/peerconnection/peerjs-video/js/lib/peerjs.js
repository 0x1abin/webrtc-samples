(function () {
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $parcel$global =
typeof globalThis !== 'undefined'
  ? globalThis
  : typeof self !== 'undefined'
  ? self
  : typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
  ? global
  : {};
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequire83ac"];
if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequire83ac"] = parcelRequire;
}
parcelRequire.register("eJwY4", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var $lT21Y = parcelRequire("lT21Y");
"use strict";
var $ab9ed75f70a00c54$var$R = typeof Reflect === "object" ? Reflect : null;
var $ab9ed75f70a00c54$var$ReflectApply = $ab9ed75f70a00c54$var$R && typeof $ab9ed75f70a00c54$var$R.apply === "function" ? $ab9ed75f70a00c54$var$R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var $ab9ed75f70a00c54$var$ReflectOwnKeys;
if ($ab9ed75f70a00c54$var$R && typeof $ab9ed75f70a00c54$var$R.ownKeys === "function") $ab9ed75f70a00c54$var$ReflectOwnKeys = $ab9ed75f70a00c54$var$R.ownKeys;
else if (Object.getOwnPropertySymbols) $ab9ed75f70a00c54$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else $ab9ed75f70a00c54$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function $ab9ed75f70a00c54$var$ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var $ab9ed75f70a00c54$var$NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function $ab9ed75f70a00c54$var$EventEmitter() {
    $ab9ed75f70a00c54$var$EventEmitter.init.call(this);
}
module.exports = $ab9ed75f70a00c54$var$EventEmitter;
module.exports.once = $ab9ed75f70a00c54$var$once;
// Backwards-compat with node 0.10.x
$ab9ed75f70a00c54$var$EventEmitter.EventEmitter = $ab9ed75f70a00c54$var$EventEmitter;
$ab9ed75f70a00c54$var$EventEmitter.prototype._events = undefined;
$ab9ed75f70a00c54$var$EventEmitter.prototype._eventsCount = 0;
$ab9ed75f70a00c54$var$EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var $ab9ed75f70a00c54$var$defaultMaxListeners = 10;
function $ab9ed75f70a00c54$var$checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + (typeof listener === "undefined" ? "undefined" : (0, $lT21Y.default)(listener)));
}
Object.defineProperty($ab9ed75f70a00c54$var$EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function get() {
        return $ab9ed75f70a00c54$var$defaultMaxListeners;
    },
    set: function set(arg) {
        if (typeof arg !== "number" || arg < 0 || $ab9ed75f70a00c54$var$NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        $ab9ed75f70a00c54$var$defaultMaxListeners = arg;
    }
});
$ab9ed75f70a00c54$var$EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
$ab9ed75f70a00c54$var$EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || $ab9ed75f70a00c54$var$NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function $ab9ed75f70a00c54$var$_getMaxListeners(that) {
    if (that._maxListeners === undefined) return $ab9ed75f70a00c54$var$EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
$ab9ed75f70a00c54$var$EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $ab9ed75f70a00c54$var$_getMaxListeners(this);
};
$ab9ed75f70a00c54$var$EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") $ab9ed75f70a00c54$var$ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = $ab9ed75f70a00c54$var$arrayClone(handler, len);
        for(var i = 0; i < len; ++i)$ab9ed75f70a00c54$var$ReflectApply(listeners[i], this, args);
    }
    return true;
};
function $ab9ed75f70a00c54$var$_addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    $ab9ed75f70a00c54$var$checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = $ab9ed75f70a00c54$var$_getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            $ab9ed75f70a00c54$var$ProcessEmitWarning(w);
        }
    }
    return target;
}
$ab9ed75f70a00c54$var$EventEmitter.prototype.addListener = function addListener(type, listener) {
    return $ab9ed75f70a00c54$var$_addListener(this, type, listener, false);
};
$ab9ed75f70a00c54$var$EventEmitter.prototype.on = $ab9ed75f70a00c54$var$EventEmitter.prototype.addListener;
$ab9ed75f70a00c54$var$EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return $ab9ed75f70a00c54$var$_addListener(this, type, listener, true);
};
function $ab9ed75f70a00c54$var$onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function $ab9ed75f70a00c54$var$_onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = $ab9ed75f70a00c54$var$onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
$ab9ed75f70a00c54$var$EventEmitter.prototype.once = function once(type, listener) {
    $ab9ed75f70a00c54$var$checkListener(listener);
    this.on(type, $ab9ed75f70a00c54$var$_onceWrap(this, type, listener));
    return this;
};
$ab9ed75f70a00c54$var$EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    $ab9ed75f70a00c54$var$checkListener(listener);
    this.prependListener(type, $ab9ed75f70a00c54$var$_onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
$ab9ed75f70a00c54$var$EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    $ab9ed75f70a00c54$var$checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else $ab9ed75f70a00c54$var$spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
$ab9ed75f70a00c54$var$EventEmitter.prototype.off = $ab9ed75f70a00c54$var$EventEmitter.prototype.removeListener;
$ab9ed75f70a00c54$var$EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function $ab9ed75f70a00c54$var$_listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? $ab9ed75f70a00c54$var$unwrapListeners(evlistener) : $ab9ed75f70a00c54$var$arrayClone(evlistener, evlistener.length);
}
$ab9ed75f70a00c54$var$EventEmitter.prototype.listeners = function listeners(type) {
    return $ab9ed75f70a00c54$var$_listeners(this, type, true);
};
$ab9ed75f70a00c54$var$EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return $ab9ed75f70a00c54$var$_listeners(this, type, false);
};
$ab9ed75f70a00c54$var$EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return $ab9ed75f70a00c54$var$listenerCount.call(emitter, type);
};
$ab9ed75f70a00c54$var$EventEmitter.prototype.listenerCount = $ab9ed75f70a00c54$var$listenerCount;
function $ab9ed75f70a00c54$var$listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
$ab9ed75f70a00c54$var$EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? $ab9ed75f70a00c54$var$ReflectOwnKeys(this._events) : [];
};
function $ab9ed75f70a00c54$var$arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function $ab9ed75f70a00c54$var$spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function $ab9ed75f70a00c54$var$unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function $ab9ed75f70a00c54$var$once(emitter, name) {
    return new Promise(function(resolve, reject) {
        var errorListener = function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        };
        var resolver = function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        };
        $ab9ed75f70a00c54$var$eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") $ab9ed75f70a00c54$var$addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function $ab9ed75f70a00c54$var$addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") $ab9ed75f70a00c54$var$eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function $ab9ed75f70a00c54$var$eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + (typeof emitter === "undefined" ? "undefined" : (0, $lT21Y.default)(emitter)));
}

});
parcelRequire.register("lT21Y", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $59a678b96ba8439d$export$2e2bcd8739ae039; });
function $59a678b96ba8439d$export$2e2bcd8739ae039(obj) {
    "@swc/helpers - typeof";
    return obj && obj.constructor === Symbol ? "symbol" : typeof obj;
}

});


parcelRequire.register("2M7q0", function(module, exports) {

exports = module.exports = (parcelRequire("eFcsd"));
exports.Stream = exports;
exports.Readable = exports;

exports.Writable = (parcelRequire("kF8wF"));

exports.Duplex = (parcelRequire("lcG3t"));

exports.Transform = (parcelRequire("edTzz"));

exports.PassThrough = (parcelRequire("3IwIf"));

exports.finished = (parcelRequire("bVwML"));

exports.pipeline = (parcelRequire("UmLRC"));

});
parcelRequire.register("eFcsd", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var $lFBFq = parcelRequire("lFBFq");
"use strict";
module.exports = $aace8e212d274fcd$var$Readable;
/*<replacement>*/ var $aace8e212d274fcd$var$Duplex;
/*</replacement>*/ $aace8e212d274fcd$var$Readable.ReadableState = $aace8e212d274fcd$var$ReadableState;

var $eJwY4 = parcelRequire("eJwY4");
var $aace8e212d274fcd$require$EE = $eJwY4.EventEmitter;
var $aace8e212d274fcd$var$EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};

var $jtbn3 = parcelRequire("jtbn3");

var $kgUAE = parcelRequire("kgUAE");
var $aace8e212d274fcd$require$Buffer = $kgUAE.Buffer;
var $aace8e212d274fcd$var$OurUint8Array = (typeof $parcel$global !== "undefined" ? $parcel$global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function $aace8e212d274fcd$var$_uint8ArrayToBuffer(chunk) {
    return $aace8e212d274fcd$require$Buffer.from(chunk);
}
function $aace8e212d274fcd$var$_isUint8Array(obj) {
    return $aace8e212d274fcd$require$Buffer.isBuffer(obj) || obj instanceof $aace8e212d274fcd$var$OurUint8Array;
}

var $l9xBz = parcelRequire("l9xBz");
var $aace8e212d274fcd$var$debug;
if ($l9xBz && $l9xBz.debuglog) $aace8e212d274fcd$var$debug = $l9xBz.debuglog("stream");
else $aace8e212d274fcd$var$debug = function debug() {};

var $cbqs8 = parcelRequire("cbqs8");

var $5RUj6 = parcelRequire("5RUj6");

var $3lnFf = parcelRequire("3lnFf");
var $aace8e212d274fcd$var$getHighWaterMark = $3lnFf.getHighWaterMark;

var $jKKIi = parcelRequire("jKKIi");
var $aace8e212d274fcd$require$_require$codes = $jKKIi.codes;
var $aace8e212d274fcd$var$ERR_INVALID_ARG_TYPE = $aace8e212d274fcd$require$_require$codes.ERR_INVALID_ARG_TYPE, $aace8e212d274fcd$var$ERR_STREAM_PUSH_AFTER_EOF = $aace8e212d274fcd$require$_require$codes.ERR_STREAM_PUSH_AFTER_EOF, $aace8e212d274fcd$var$ERR_METHOD_NOT_IMPLEMENTED = $aace8e212d274fcd$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $aace8e212d274fcd$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT = $aace8e212d274fcd$require$_require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
// Lazy loaded to improve the startup performance.
var $aace8e212d274fcd$var$StringDecoder;
var $aace8e212d274fcd$var$createReadableStreamAsyncIterator;
var $aace8e212d274fcd$var$from;

(parcelRequire("ScPjF"))($aace8e212d274fcd$var$Readable, $jtbn3);
var $aace8e212d274fcd$var$errorOrDestroy = $5RUj6.errorOrDestroy;
var $aace8e212d274fcd$var$kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function $aace8e212d274fcd$var$prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}


function $aace8e212d274fcd$var$ReadableState(options, stream, isDuplex) {
    $aace8e212d274fcd$var$Duplex = $aace8e212d274fcd$var$Duplex || (parcelRequire("lcG3t"));
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $aace8e212d274fcd$var$Duplex;
    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = $aace8e212d274fcd$var$getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new $cbqs8();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true;
    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy;
    // has it been destroyed
    this.destroyed = false;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;
    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!$aace8e212d274fcd$var$StringDecoder) $aace8e212d274fcd$var$StringDecoder = (parcelRequire("i1uXD")).StringDecoder;
        this.decoder = new $aace8e212d274fcd$var$StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}

function $aace8e212d274fcd$var$Readable(options) {
    $aace8e212d274fcd$var$Duplex = $aace8e212d274fcd$var$Duplex || (parcelRequire("lcG3t"));
    if (!(this instanceof $aace8e212d274fcd$var$Readable)) return new $aace8e212d274fcd$var$Readable(options);
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $aace8e212d274fcd$var$Duplex;
    this._readableState = new $aace8e212d274fcd$var$ReadableState(options, this, isDuplex);
    // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    $jtbn3.call(this);
}
Object.defineProperty($aace8e212d274fcd$var$Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
$aace8e212d274fcd$var$Readable.prototype.destroy = $5RUj6.destroy;
$aace8e212d274fcd$var$Readable.prototype._undestroy = $5RUj6.undestroy;
$aace8e212d274fcd$var$Readable.prototype._destroy = function(err, cb) {
    cb(err);
};
// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
$aace8e212d274fcd$var$Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = $aace8e212d274fcd$require$Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return $aace8e212d274fcd$var$readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};
// Unshift should *always* be something directly out of read()
$aace8e212d274fcd$var$Readable.prototype.unshift = function(chunk) {
    return $aace8e212d274fcd$var$readableAddChunk(this, chunk, null, true, false);
};
function $aace8e212d274fcd$var$readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    $aace8e212d274fcd$var$debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        $aace8e212d274fcd$var$onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = $aace8e212d274fcd$var$chunkInvalid(state, chunk);
        if (er) $aace8e212d274fcd$var$errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== $aace8e212d274fcd$require$Buffer.prototype) chunk = $aace8e212d274fcd$var$_uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) $aace8e212d274fcd$var$errorOrDestroy(stream, new $aace8e212d274fcd$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else $aace8e212d274fcd$var$addChunk(stream, state, chunk, true);
            } else if (state.ended) $aace8e212d274fcd$var$errorOrDestroy(stream, new $aace8e212d274fcd$var$ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) $aace8e212d274fcd$var$addChunk(stream, state, chunk, false);
                    else $aace8e212d274fcd$var$maybeReadMore(stream, state);
                } else $aace8e212d274fcd$var$addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            $aace8e212d274fcd$var$maybeReadMore(stream, state);
        }
    }
    // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function $aace8e212d274fcd$var$addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) $aace8e212d274fcd$var$emitReadable(stream);
    }
    $aace8e212d274fcd$var$maybeReadMore(stream, state);
}
function $aace8e212d274fcd$var$chunkInvalid(state, chunk) {
    var er;
    if (!$aace8e212d274fcd$var$_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new $aace8e212d274fcd$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
$aace8e212d274fcd$var$Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
};

// backwards compatibility.
$aace8e212d274fcd$var$Readable.prototype.setEncoding = function(enc) {
    if (!$aace8e212d274fcd$var$StringDecoder) $aace8e212d274fcd$var$StringDecoder = (parcelRequire("i1uXD")).StringDecoder;
    var decoder = new $aace8e212d274fcd$var$StringDecoder(enc);
    this._readableState.decoder = decoder;
    // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding;
    // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
};
// Don't raise the hwm > 1GB
var $aace8e212d274fcd$var$MAX_HWM = 0x40000000;
function $aace8e212d274fcd$var$computeNewHighWaterMark(n) {
    if (n >= $aace8e212d274fcd$var$MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = $aace8e212d274fcd$var$MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
}
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $aace8e212d274fcd$var$howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = $aace8e212d274fcd$var$computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
}
// you can override either this method, or the async _read(n) below.
$aace8e212d274fcd$var$Readable.prototype.read = function(n) {
    $aace8e212d274fcd$var$debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false;
    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        $aace8e212d274fcd$var$debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) $aace8e212d274fcd$var$endReadable(this);
        else $aace8e212d274fcd$var$emitReadable(this);
        return null;
    }
    n = $aace8e212d274fcd$var$howMuchToRead(n, state);
    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) $aace8e212d274fcd$var$endReadable(this);
        return null;
    }
    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    $aace8e212d274fcd$var$debug("need readable", doRead);
    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        $aace8e212d274fcd$var$debug("length less than watermark", doRead);
    }
    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        $aace8e212d274fcd$var$debug("reading or ended", doRead);
    } else if (doRead) {
        $aace8e212d274fcd$var$debug("do read");
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = $aace8e212d274fcd$var$howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = $aace8e212d274fcd$var$fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;
        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) $aace8e212d274fcd$var$endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function $aace8e212d274fcd$var$onEofChunk(stream, state) {
    $aace8e212d274fcd$var$debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    $aace8e212d274fcd$var$emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            $aace8e212d274fcd$var$emitReadable_(stream);
        }
    }
}
// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function $aace8e212d274fcd$var$emitReadable(stream) {
    var state = stream._readableState;
    $aace8e212d274fcd$var$debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        $aace8e212d274fcd$var$debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        $lFBFq.nextTick($aace8e212d274fcd$var$emitReadable_, stream);
    }
}
function $aace8e212d274fcd$var$emitReadable_(stream) {
    var state = stream._readableState;
    $aace8e212d274fcd$var$debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    }
    // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    $aace8e212d274fcd$var$flow(stream);
}
// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function $aace8e212d274fcd$var$maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        $lFBFq.nextTick($aace8e212d274fcd$var$maybeReadMore_, stream, state);
    }
}
function $aace8e212d274fcd$var$maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        $aace8e212d274fcd$var$debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
}
// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
$aace8e212d274fcd$var$Readable.prototype._read = function(n) {
    $aace8e212d274fcd$var$errorOrDestroy(this, new $aace8e212d274fcd$var$ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
$aace8e212d274fcd$var$Readable.prototype.pipe = function(dest, pipeOpts) {
    var onunpipe = function onunpipe(readable, unpipeInfo) {
        $aace8e212d274fcd$var$debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    };
    var onend = function onend() {
        $aace8e212d274fcd$var$debug("onend");
        dest.end();
    };
    var cleanup = function cleanup() {
        $aace8e212d274fcd$var$debug("cleanup");
        // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    };
    var ondata = function ondata(chunk) {
        $aace8e212d274fcd$var$debug("ondata");
        var ret = dest.write(chunk);
        $aace8e212d274fcd$var$debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && $aace8e212d274fcd$var$indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                $aace8e212d274fcd$var$debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    };
    var onclose = // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    };
    var onfinish = function onfinish() {
        $aace8e212d274fcd$var$debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    };
    var unpipe = function unpipe() {
        $aace8e212d274fcd$var$debug("unpipe");
        src.unpipe(dest);
    };
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    $aace8e212d274fcd$var$debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== $lFBFq.stdout && dest !== $lFBFq.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) $lFBFq.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = $aace8e212d274fcd$var$pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    src.on("data", ondata);
    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        $aace8e212d274fcd$var$debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if ($aace8e212d274fcd$var$EElistenerCount(dest, "error") === 0) $aace8e212d274fcd$var$errorOrDestroy(dest, er);
    }
    // Make sure our error handler is attached before userland ones.
    $aace8e212d274fcd$var$prependListener(dest, "error", onerror);
    dest.once("close", onclose);
    dest.once("finish", onfinish);
    // tell the dest that it's being piped to
    dest.emit("pipe", src);
    // start the flow if it hasn't been started already.
    if (!state.flowing) {
        $aace8e212d274fcd$var$debug("pipe resume");
        src.resume();
    }
    return dest;
};
function $aace8e212d274fcd$var$pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        $aace8e212d274fcd$var$debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && $aace8e212d274fcd$var$EElistenerCount(src, "data")) {
            state.flowing = true;
            $aace8e212d274fcd$var$flow(src);
        }
    };
}
$aace8e212d274fcd$var$Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    };
    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;
    // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    }
    // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    }
    // try to find the right one.
    var index = $aace8e212d274fcd$var$indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
};
// set up data events if they are asked for
// Ensure readable listeners eventually get something
$aace8e212d274fcd$var$Readable.prototype.on = function(ev, fn) {
    var res = $jtbn3.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0;
        // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            $aace8e212d274fcd$var$debug("on readable", state.length, state.reading);
            if (state.length) $aace8e212d274fcd$var$emitReadable(this);
            else if (!state.reading) $lFBFq.nextTick($aace8e212d274fcd$var$nReadingNextTick, this);
        }
    }
    return res;
};
$aace8e212d274fcd$var$Readable.prototype.addListener = $aace8e212d274fcd$var$Readable.prototype.on;
$aace8e212d274fcd$var$Readable.prototype.removeListener = function(ev, fn) {
    var res = $jtbn3.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $lFBFq.nextTick($aace8e212d274fcd$var$updateReadableListening, this);
    return res;
};
$aace8e212d274fcd$var$Readable.prototype.removeAllListeners = function(ev) {
    var res = $jtbn3.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $lFBFq.nextTick($aace8e212d274fcd$var$updateReadableListening, this);
    return res;
};
function $aace8e212d274fcd$var$updateReadableListening(self1) {
    var state = self1._readableState;
    state.readableListening = self1.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;
    else if (self1.listenerCount("data") > 0) self1.resume();
}
function $aace8e212d274fcd$var$nReadingNextTick(self1) {
    $aace8e212d274fcd$var$debug("readable nexttick read 0");
    self1.read(0);
}
// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
$aace8e212d274fcd$var$Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        $aace8e212d274fcd$var$debug("resume");
        // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        $aace8e212d274fcd$var$resume(this, state);
    }
    state.paused = false;
    return this;
};
function $aace8e212d274fcd$var$resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        $lFBFq.nextTick($aace8e212d274fcd$var$resume_, stream, state);
    }
}
function $aace8e212d274fcd$var$resume_(stream, state) {
    $aace8e212d274fcd$var$debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    $aace8e212d274fcd$var$flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
$aace8e212d274fcd$var$Readable.prototype.pause = function() {
    $aace8e212d274fcd$var$debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        $aace8e212d274fcd$var$debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function $aace8e212d274fcd$var$flow(stream) {
    var state = stream._readableState;
    $aace8e212d274fcd$var$debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
}
// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
$aace8e212d274fcd$var$Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        $aace8e212d274fcd$var$debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        $aace8e212d274fcd$var$debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk);
        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    });
    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
    // proxy certain important events.
    for(var n = 0; n < $aace8e212d274fcd$var$kProxyEvents.length; n++)stream.on($aace8e212d274fcd$var$kProxyEvents[n], this.emit.bind(this, $aace8e212d274fcd$var$kProxyEvents[n]));
    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        $aace8e212d274fcd$var$debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};

if (typeof Symbol === "function") $aace8e212d274fcd$var$Readable.prototype[Symbol.asyncIterator] = function() {
    if ($aace8e212d274fcd$var$createReadableStreamAsyncIterator === undefined) $aace8e212d274fcd$var$createReadableStreamAsyncIterator = (parcelRequire("64FNe"));
    return $aace8e212d274fcd$var$createReadableStreamAsyncIterator(this);
};
Object.defineProperty($aace8e212d274fcd$var$Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty($aace8e212d274fcd$var$Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty($aace8e212d274fcd$var$Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
});
// exposed for testing purposes only.
$aace8e212d274fcd$var$Readable._fromList = $aace8e212d274fcd$var$fromList;
Object.defineProperty($aace8e212d274fcd$var$Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
});
// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $aace8e212d274fcd$var$fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function $aace8e212d274fcd$var$endReadable(stream) {
    var state = stream._readableState;
    $aace8e212d274fcd$var$debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        $lFBFq.nextTick($aace8e212d274fcd$var$endReadableNT, state, stream);
    }
}
function $aace8e212d274fcd$var$endReadableNT(state, stream) {
    $aace8e212d274fcd$var$debug("endReadableNT", state.endEmitted, state.length);
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}

if (typeof Symbol === "function") $aace8e212d274fcd$var$Readable.from = function(iterable, opts) {
    if ($aace8e212d274fcd$var$from === undefined) $aace8e212d274fcd$var$from = (parcelRequire("iXFvX"));
    return $aace8e212d274fcd$var$from($aace8e212d274fcd$var$Readable, iterable, opts);
};
function $aace8e212d274fcd$var$indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

});
parcelRequire.register("lFBFq", function(module, exports) {
// shim for using process in browser
var $fc6aa53cf8fbb8f1$var$process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var $fc6aa53cf8fbb8f1$var$cachedSetTimeout;
var $fc6aa53cf8fbb8f1$var$cachedClearTimeout;
function $fc6aa53cf8fbb8f1$var$defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function $fc6aa53cf8fbb8f1$var$defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") $fc6aa53cf8fbb8f1$var$cachedSetTimeout = setTimeout;
        else $fc6aa53cf8fbb8f1$var$cachedSetTimeout = $fc6aa53cf8fbb8f1$var$defaultSetTimout;
    } catch (e) {
        $fc6aa53cf8fbb8f1$var$cachedSetTimeout = $fc6aa53cf8fbb8f1$var$defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") $fc6aa53cf8fbb8f1$var$cachedClearTimeout = clearTimeout;
        else $fc6aa53cf8fbb8f1$var$cachedClearTimeout = $fc6aa53cf8fbb8f1$var$defaultClearTimeout;
    } catch (e) {
        $fc6aa53cf8fbb8f1$var$cachedClearTimeout = $fc6aa53cf8fbb8f1$var$defaultClearTimeout;
    }
})();
function $fc6aa53cf8fbb8f1$var$runTimeout(fun) {
    if ($fc6aa53cf8fbb8f1$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if (($fc6aa53cf8fbb8f1$var$cachedSetTimeout === $fc6aa53cf8fbb8f1$var$defaultSetTimout || !$fc6aa53cf8fbb8f1$var$cachedSetTimeout) && setTimeout) {
        $fc6aa53cf8fbb8f1$var$cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $fc6aa53cf8fbb8f1$var$cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return $fc6aa53cf8fbb8f1$var$cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return $fc6aa53cf8fbb8f1$var$cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function $fc6aa53cf8fbb8f1$var$runClearTimeout(marker) {
    if ($fc6aa53cf8fbb8f1$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if (($fc6aa53cf8fbb8f1$var$cachedClearTimeout === $fc6aa53cf8fbb8f1$var$defaultClearTimeout || !$fc6aa53cf8fbb8f1$var$cachedClearTimeout) && clearTimeout) {
        $fc6aa53cf8fbb8f1$var$cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $fc6aa53cf8fbb8f1$var$cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return $fc6aa53cf8fbb8f1$var$cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return $fc6aa53cf8fbb8f1$var$cachedClearTimeout.call(this, marker);
        }
    }
}
var $fc6aa53cf8fbb8f1$var$queue = [];
var $fc6aa53cf8fbb8f1$var$draining = false;
var $fc6aa53cf8fbb8f1$var$currentQueue;
var $fc6aa53cf8fbb8f1$var$queueIndex = -1;
function $fc6aa53cf8fbb8f1$var$cleanUpNextTick() {
    if (!$fc6aa53cf8fbb8f1$var$draining || !$fc6aa53cf8fbb8f1$var$currentQueue) return;
    $fc6aa53cf8fbb8f1$var$draining = false;
    if ($fc6aa53cf8fbb8f1$var$currentQueue.length) $fc6aa53cf8fbb8f1$var$queue = $fc6aa53cf8fbb8f1$var$currentQueue.concat($fc6aa53cf8fbb8f1$var$queue);
    else $fc6aa53cf8fbb8f1$var$queueIndex = -1;
    if ($fc6aa53cf8fbb8f1$var$queue.length) $fc6aa53cf8fbb8f1$var$drainQueue();
}
function $fc6aa53cf8fbb8f1$var$drainQueue() {
    if ($fc6aa53cf8fbb8f1$var$draining) return;
    var timeout = $fc6aa53cf8fbb8f1$var$runTimeout($fc6aa53cf8fbb8f1$var$cleanUpNextTick);
    $fc6aa53cf8fbb8f1$var$draining = true;
    var len = $fc6aa53cf8fbb8f1$var$queue.length;
    while(len){
        $fc6aa53cf8fbb8f1$var$currentQueue = $fc6aa53cf8fbb8f1$var$queue;
        $fc6aa53cf8fbb8f1$var$queue = [];
        while(++$fc6aa53cf8fbb8f1$var$queueIndex < len)if ($fc6aa53cf8fbb8f1$var$currentQueue) $fc6aa53cf8fbb8f1$var$currentQueue[$fc6aa53cf8fbb8f1$var$queueIndex].run();
        $fc6aa53cf8fbb8f1$var$queueIndex = -1;
        len = $fc6aa53cf8fbb8f1$var$queue.length;
    }
    $fc6aa53cf8fbb8f1$var$currentQueue = null;
    $fc6aa53cf8fbb8f1$var$draining = false;
    $fc6aa53cf8fbb8f1$var$runClearTimeout(timeout);
}
$fc6aa53cf8fbb8f1$var$process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    $fc6aa53cf8fbb8f1$var$queue.push(new $fc6aa53cf8fbb8f1$var$Item(fun, args));
    if ($fc6aa53cf8fbb8f1$var$queue.length === 1 && !$fc6aa53cf8fbb8f1$var$draining) $fc6aa53cf8fbb8f1$var$runTimeout($fc6aa53cf8fbb8f1$var$drainQueue);
};
// v8 likes predictible objects
function $fc6aa53cf8fbb8f1$var$Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
$fc6aa53cf8fbb8f1$var$Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
$fc6aa53cf8fbb8f1$var$process.title = "browser";
$fc6aa53cf8fbb8f1$var$process.browser = true;
$fc6aa53cf8fbb8f1$var$process.env = {};
$fc6aa53cf8fbb8f1$var$process.argv = [];
$fc6aa53cf8fbb8f1$var$process.version = ""; // empty string to avoid regexp issues
$fc6aa53cf8fbb8f1$var$process.versions = {};
function $fc6aa53cf8fbb8f1$var$noop() {}
$fc6aa53cf8fbb8f1$var$process.on = $fc6aa53cf8fbb8f1$var$noop;
$fc6aa53cf8fbb8f1$var$process.addListener = $fc6aa53cf8fbb8f1$var$noop;
$fc6aa53cf8fbb8f1$var$process.once = $fc6aa53cf8fbb8f1$var$noop;
$fc6aa53cf8fbb8f1$var$process.off = $fc6aa53cf8fbb8f1$var$noop;
$fc6aa53cf8fbb8f1$var$process.removeListener = $fc6aa53cf8fbb8f1$var$noop;
$fc6aa53cf8fbb8f1$var$process.removeAllListeners = $fc6aa53cf8fbb8f1$var$noop;
$fc6aa53cf8fbb8f1$var$process.emit = $fc6aa53cf8fbb8f1$var$noop;
$fc6aa53cf8fbb8f1$var$process.prependListener = $fc6aa53cf8fbb8f1$var$noop;
$fc6aa53cf8fbb8f1$var$process.prependOnceListener = $fc6aa53cf8fbb8f1$var$noop;
$fc6aa53cf8fbb8f1$var$process.listeners = function(name) {
    return [];
};
$fc6aa53cf8fbb8f1$var$process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
$fc6aa53cf8fbb8f1$var$process.cwd = function() {
    return "/";
};
$fc6aa53cf8fbb8f1$var$process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
$fc6aa53cf8fbb8f1$var$process.umask = function() {
    return 0;
};

});

parcelRequire.register("jtbn3", function(module, exports) {

module.exports = (parcelRequire("eJwY4")).EventEmitter;

});

parcelRequire.register("kgUAE", function(module, exports) {

$parcel$export(module.exports, "Buffer", function () { return $ec2132e1ae606f18$export$a143d493d941bafc; }, function (v) { return $ec2132e1ae606f18$export$a143d493d941bafc = v; });
$parcel$export(module.exports, "SlowBuffer", function () { return $ec2132e1ae606f18$export$e4cf37d7f6fb9e0a; }, function (v) { return $ec2132e1ae606f18$export$e4cf37d7f6fb9e0a = v; });
$parcel$export(module.exports, "INSPECT_MAX_BYTES", function () { return $ec2132e1ae606f18$export$f99ded8fe4b79145; }, function (v) { return $ec2132e1ae606f18$export$f99ded8fe4b79145 = v; });
$parcel$export(module.exports, "kMaxLength", function () { return $ec2132e1ae606f18$export$599f31c3813fae4d; }, function (v) { return $ec2132e1ae606f18$export$599f31c3813fae4d = v; });
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 
var $lT21Y = parcelRequire("lT21Y");
var $ec2132e1ae606f18$export$a143d493d941bafc;
var $ec2132e1ae606f18$export$e4cf37d7f6fb9e0a;
var $ec2132e1ae606f18$export$f99ded8fe4b79145;
var $ec2132e1ae606f18$export$599f31c3813fae4d;
"use strict";

var $34tAZ = parcelRequire("34tAZ");

var $2GfY9 = parcelRequire("2GfY9");
var $ec2132e1ae606f18$var$customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
$ec2132e1ae606f18$export$a143d493d941bafc = $ec2132e1ae606f18$var$Buffer;
$ec2132e1ae606f18$export$e4cf37d7f6fb9e0a = $ec2132e1ae606f18$var$SlowBuffer;
$ec2132e1ae606f18$export$f99ded8fe4b79145 = 50;
var $ec2132e1ae606f18$var$K_MAX_LENGTH = 0x7fffffff;
$ec2132e1ae606f18$export$599f31c3813fae4d = $ec2132e1ae606f18$var$K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ $ec2132e1ae606f18$var$Buffer.TYPED_ARRAY_SUPPORT = $ec2132e1ae606f18$var$typedArraySupport();
if (!$ec2132e1ae606f18$var$Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function $ec2132e1ae606f18$var$typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function foo() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty($ec2132e1ae606f18$var$Buffer.prototype, "parent", {
    enumerable: true,
    get: function get() {
        if (!$ec2132e1ae606f18$var$Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty($ec2132e1ae606f18$var$Buffer.prototype, "offset", {
    enumerable: true,
    get: function get() {
        if (!$ec2132e1ae606f18$var$Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function $ec2132e1ae606f18$var$createBuffer(length) {
    if (length > $ec2132e1ae606f18$var$K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, $ec2132e1ae606f18$var$Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function $ec2132e1ae606f18$var$Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return $ec2132e1ae606f18$var$allocUnsafe(arg);
    }
    return $ec2132e1ae606f18$var$from(arg, encodingOrOffset, length);
}
$ec2132e1ae606f18$var$Buffer.poolSize = 8192 // not used by this implementation
;
function $ec2132e1ae606f18$var$from(value, encodingOrOffset, length) {
    if (typeof value === "string") return $ec2132e1ae606f18$var$fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return $ec2132e1ae606f18$var$fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + (typeof value === "undefined" ? "undefined" : (0, $lT21Y.default)(value)));
    if ($ec2132e1ae606f18$var$isInstance(value, ArrayBuffer) || value && $ec2132e1ae606f18$var$isInstance(value.buffer, ArrayBuffer)) return $ec2132e1ae606f18$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && ($ec2132e1ae606f18$var$isInstance(value, SharedArrayBuffer) || value && $ec2132e1ae606f18$var$isInstance(value.buffer, SharedArrayBuffer))) return $ec2132e1ae606f18$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return $ec2132e1ae606f18$var$Buffer.from(valueOf, encodingOrOffset, length);
    var b = $ec2132e1ae606f18$var$fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return $ec2132e1ae606f18$var$Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + (typeof value === "undefined" ? "undefined" : (0, $lT21Y.default)(value)));
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ $ec2132e1ae606f18$var$Buffer.from = function(value, encodingOrOffset, length) {
    return $ec2132e1ae606f18$var$from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf($ec2132e1ae606f18$var$Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf($ec2132e1ae606f18$var$Buffer, Uint8Array);
function $ec2132e1ae606f18$var$assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function $ec2132e1ae606f18$var$alloc(size, fill, encoding) {
    $ec2132e1ae606f18$var$assertSize(size);
    if (size <= 0) return $ec2132e1ae606f18$var$createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? $ec2132e1ae606f18$var$createBuffer(size).fill(fill, encoding) : $ec2132e1ae606f18$var$createBuffer(size).fill(fill);
    return $ec2132e1ae606f18$var$createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ $ec2132e1ae606f18$var$Buffer.alloc = function(size, fill, encoding) {
    return $ec2132e1ae606f18$var$alloc(size, fill, encoding);
};
function $ec2132e1ae606f18$var$allocUnsafe(size) {
    $ec2132e1ae606f18$var$assertSize(size);
    return $ec2132e1ae606f18$var$createBuffer(size < 0 ? 0 : $ec2132e1ae606f18$var$checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ $ec2132e1ae606f18$var$Buffer.allocUnsafe = function(size) {
    return $ec2132e1ae606f18$var$allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ $ec2132e1ae606f18$var$Buffer.allocUnsafeSlow = function(size) {
    return $ec2132e1ae606f18$var$allocUnsafe(size);
};
function $ec2132e1ae606f18$var$fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!$ec2132e1ae606f18$var$Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    var length = $ec2132e1ae606f18$var$byteLength(string, encoding) | 0;
    var buf = $ec2132e1ae606f18$var$createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function $ec2132e1ae606f18$var$fromArrayLike(array) {
    var length = array.length < 0 ? 0 : $ec2132e1ae606f18$var$checked(array.length) | 0;
    var buf = $ec2132e1ae606f18$var$createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function $ec2132e1ae606f18$var$fromArrayView(arrayView) {
    if ($ec2132e1ae606f18$var$isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return $ec2132e1ae606f18$var$fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return $ec2132e1ae606f18$var$fromArrayLike(arrayView);
}
function $ec2132e1ae606f18$var$fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, $ec2132e1ae606f18$var$Buffer.prototype);
    return buf;
}
function $ec2132e1ae606f18$var$fromObject(obj) {
    if ($ec2132e1ae606f18$var$Buffer.isBuffer(obj)) {
        var len = $ec2132e1ae606f18$var$checked(obj.length) | 0;
        var buf = $ec2132e1ae606f18$var$createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || $ec2132e1ae606f18$var$numberIsNaN(obj.length)) return $ec2132e1ae606f18$var$createBuffer(0);
        return $ec2132e1ae606f18$var$fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return $ec2132e1ae606f18$var$fromArrayLike(obj.data);
}
function $ec2132e1ae606f18$var$checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= $ec2132e1ae606f18$var$K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + $ec2132e1ae606f18$var$K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function $ec2132e1ae606f18$var$SlowBuffer(length) {
    if (+length != length) length = 0;
    return $ec2132e1ae606f18$var$Buffer.alloc(+length);
}
$ec2132e1ae606f18$var$Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== $ec2132e1ae606f18$var$Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
$ec2132e1ae606f18$var$Buffer.compare = function compare(a, b) {
    if ($ec2132e1ae606f18$var$isInstance(a, Uint8Array)) a = $ec2132e1ae606f18$var$Buffer.from(a, a.offset, a.byteLength);
    if ($ec2132e1ae606f18$var$isInstance(b, Uint8Array)) b = $ec2132e1ae606f18$var$Buffer.from(b, b.offset, b.byteLength);
    if (!$ec2132e1ae606f18$var$Buffer.isBuffer(a) || !$ec2132e1ae606f18$var$Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
$ec2132e1ae606f18$var$Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
$ec2132e1ae606f18$var$Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return $ec2132e1ae606f18$var$Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = $ec2132e1ae606f18$var$Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if ($ec2132e1ae606f18$var$isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) $ec2132e1ae606f18$var$Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!$ec2132e1ae606f18$var$Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function $ec2132e1ae606f18$var$byteLength(string, encoding) {
    if ($ec2132e1ae606f18$var$Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || $ec2132e1ae606f18$var$isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + (typeof string === "undefined" ? "undefined" : (0, $lT21Y.default)(string)));
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return $ec2132e1ae606f18$var$utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return $ec2132e1ae606f18$var$base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : $ec2132e1ae606f18$var$utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
$ec2132e1ae606f18$var$Buffer.byteLength = $ec2132e1ae606f18$var$byteLength;
function $ec2132e1ae606f18$var$slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return $ec2132e1ae606f18$var$hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return $ec2132e1ae606f18$var$utf8Slice(this, start, end);
        case "ascii":
            return $ec2132e1ae606f18$var$asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return $ec2132e1ae606f18$var$latin1Slice(this, start, end);
        case "base64":
            return $ec2132e1ae606f18$var$base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return $ec2132e1ae606f18$var$utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
$ec2132e1ae606f18$var$Buffer.prototype._isBuffer = true;
function $ec2132e1ae606f18$var$swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
$ec2132e1ae606f18$var$Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(var i = 0; i < len; i += 2)$ec2132e1ae606f18$var$swap(this, i, i + 1);
    return this;
};
$ec2132e1ae606f18$var$Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(var i = 0; i < len; i += 4){
        $ec2132e1ae606f18$var$swap(this, i, i + 3);
        $ec2132e1ae606f18$var$swap(this, i + 1, i + 2);
    }
    return this;
};
$ec2132e1ae606f18$var$Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(var i = 0; i < len; i += 8){
        $ec2132e1ae606f18$var$swap(this, i, i + 7);
        $ec2132e1ae606f18$var$swap(this, i + 1, i + 6);
        $ec2132e1ae606f18$var$swap(this, i + 2, i + 5);
        $ec2132e1ae606f18$var$swap(this, i + 3, i + 4);
    }
    return this;
};
$ec2132e1ae606f18$var$Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return $ec2132e1ae606f18$var$utf8Slice(this, 0, length);
    return $ec2132e1ae606f18$var$slowToString.apply(this, arguments);
};
$ec2132e1ae606f18$var$Buffer.prototype.toLocaleString = $ec2132e1ae606f18$var$Buffer.prototype.toString;
$ec2132e1ae606f18$var$Buffer.prototype.equals = function equals(b) {
    if (!$ec2132e1ae606f18$var$Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return $ec2132e1ae606f18$var$Buffer.compare(this, b) === 0;
};
$ec2132e1ae606f18$var$Buffer.prototype.inspect = function inspect() {
    var str = "";
    var max = $ec2132e1ae606f18$export$f99ded8fe4b79145;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if ($ec2132e1ae606f18$var$customInspectSymbol) $ec2132e1ae606f18$var$Buffer.prototype[$ec2132e1ae606f18$var$customInspectSymbol] = $ec2132e1ae606f18$var$Buffer.prototype.inspect;
$ec2132e1ae606f18$var$Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if ($ec2132e1ae606f18$var$isInstance(target, Uint8Array)) target = $ec2132e1ae606f18$var$Buffer.from(target, target.offset, target.byteLength);
    if (!$ec2132e1ae606f18$var$Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + (typeof target === "undefined" ? "undefined" : (0, $lT21Y.default)(target)));
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function $ec2132e1ae606f18$var$bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if ($ec2132e1ae606f18$var$numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = $ec2132e1ae606f18$var$Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if ($ec2132e1ae606f18$var$Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return $ec2132e1ae606f18$var$arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return $ec2132e1ae606f18$var$arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function $ec2132e1ae606f18$var$arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var read = function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    };
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    var i;
    if (dir) {
        var foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
$ec2132e1ae606f18$var$Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
$ec2132e1ae606f18$var$Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return $ec2132e1ae606f18$var$bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
$ec2132e1ae606f18$var$Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return $ec2132e1ae606f18$var$bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function $ec2132e1ae606f18$var$hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if ($ec2132e1ae606f18$var$numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function $ec2132e1ae606f18$var$utf8Write(buf, string, offset, length) {
    return $ec2132e1ae606f18$var$blitBuffer($ec2132e1ae606f18$var$utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function $ec2132e1ae606f18$var$asciiWrite(buf, string, offset, length) {
    return $ec2132e1ae606f18$var$blitBuffer($ec2132e1ae606f18$var$asciiToBytes(string), buf, offset, length);
}
function $ec2132e1ae606f18$var$base64Write(buf, string, offset, length) {
    return $ec2132e1ae606f18$var$blitBuffer($ec2132e1ae606f18$var$base64ToBytes(string), buf, offset, length);
}
function $ec2132e1ae606f18$var$ucs2Write(buf, string, offset, length) {
    return $ec2132e1ae606f18$var$blitBuffer($ec2132e1ae606f18$var$utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
$ec2132e1ae606f18$var$Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    var loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return $ec2132e1ae606f18$var$hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return $ec2132e1ae606f18$var$utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return $ec2132e1ae606f18$var$asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return $ec2132e1ae606f18$var$base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return $ec2132e1ae606f18$var$ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
$ec2132e1ae606f18$var$Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function $ec2132e1ae606f18$var$base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return $34tAZ.fromByteArray(buf);
    else return $34tAZ.fromByteArray(buf.slice(start, end));
}
function $ec2132e1ae606f18$var$utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return $ec2132e1ae606f18$var$decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var $ec2132e1ae606f18$var$MAX_ARGUMENTS_LENGTH = 0x1000;
function $ec2132e1ae606f18$var$decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= $ec2132e1ae606f18$var$MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = "";
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += $ec2132e1ae606f18$var$MAX_ARGUMENTS_LENGTH));
    return res;
}
function $ec2132e1ae606f18$var$asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function $ec2132e1ae606f18$var$latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function $ec2132e1ae606f18$var$hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = "";
    for(var i = start; i < end; ++i)out += $ec2132e1ae606f18$var$hexSliceLookupTable[buf[i]];
    return out;
}
function $ec2132e1ae606f18$var$utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
$ec2132e1ae606f18$var$Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, $ec2132e1ae606f18$var$Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function $ec2132e1ae606f18$var$checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
$ec2132e1ae606f18$var$Buffer.prototype.readUintLE = $ec2132e1ae606f18$var$Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
$ec2132e1ae606f18$var$Buffer.prototype.readUintBE = $ec2132e1ae606f18$var$Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
$ec2132e1ae606f18$var$Buffer.prototype.readUint8 = $ec2132e1ae606f18$var$Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, 1, this.length);
    return this[offset];
};
$ec2132e1ae606f18$var$Buffer.prototype.readUint16LE = $ec2132e1ae606f18$var$Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
$ec2132e1ae606f18$var$Buffer.prototype.readUint16BE = $ec2132e1ae606f18$var$Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
$ec2132e1ae606f18$var$Buffer.prototype.readUint32LE = $ec2132e1ae606f18$var$Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
$ec2132e1ae606f18$var$Buffer.prototype.readUint32BE = $ec2132e1ae606f18$var$Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
$ec2132e1ae606f18$var$Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$ec2132e1ae606f18$var$Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$ec2132e1ae606f18$var$Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
$ec2132e1ae606f18$var$Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$ec2132e1ae606f18$var$Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$ec2132e1ae606f18$var$Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
$ec2132e1ae606f18$var$Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
$ec2132e1ae606f18$var$Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, 4, this.length);
    return $2GfY9.read(this, offset, true, 23, 4);
};
$ec2132e1ae606f18$var$Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, 4, this.length);
    return $2GfY9.read(this, offset, false, 23, 4);
};
$ec2132e1ae606f18$var$Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, 8, this.length);
    return $2GfY9.read(this, offset, true, 52, 8);
};
$ec2132e1ae606f18$var$Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkOffset(offset, 8, this.length);
    return $2GfY9.read(this, offset, false, 52, 8);
};
function $ec2132e1ae606f18$var$checkInt(buf, value, offset, ext, max, min) {
    if (!$ec2132e1ae606f18$var$Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
$ec2132e1ae606f18$var$Buffer.prototype.writeUintLE = $ec2132e1ae606f18$var$Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $ec2132e1ae606f18$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$ec2132e1ae606f18$var$Buffer.prototype.writeUintBE = $ec2132e1ae606f18$var$Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $ec2132e1ae606f18$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$ec2132e1ae606f18$var$Buffer.prototype.writeUint8 = $ec2132e1ae606f18$var$Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
$ec2132e1ae606f18$var$Buffer.prototype.writeUint16LE = $ec2132e1ae606f18$var$Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$ec2132e1ae606f18$var$Buffer.prototype.writeUint16BE = $ec2132e1ae606f18$var$Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$ec2132e1ae606f18$var$Buffer.prototype.writeUint32LE = $ec2132e1ae606f18$var$Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
$ec2132e1ae606f18$var$Buffer.prototype.writeUint32BE = $ec2132e1ae606f18$var$Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
$ec2132e1ae606f18$var$Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $ec2132e1ae606f18$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$ec2132e1ae606f18$var$Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $ec2132e1ae606f18$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$ec2132e1ae606f18$var$Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
$ec2132e1ae606f18$var$Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$ec2132e1ae606f18$var$Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$ec2132e1ae606f18$var$Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
$ec2132e1ae606f18$var$Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function $ec2132e1ae606f18$var$checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function $ec2132e1ae606f18$var$writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    $2GfY9.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
$ec2132e1ae606f18$var$Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return $ec2132e1ae606f18$var$writeFloat(this, value, offset, true, noAssert);
};
$ec2132e1ae606f18$var$Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return $ec2132e1ae606f18$var$writeFloat(this, value, offset, false, noAssert);
};
function $ec2132e1ae606f18$var$writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ec2132e1ae606f18$var$checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    $2GfY9.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
$ec2132e1ae606f18$var$Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return $ec2132e1ae606f18$var$writeDouble(this, value, offset, true, noAssert);
};
$ec2132e1ae606f18$var$Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return $ec2132e1ae606f18$var$writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
$ec2132e1ae606f18$var$Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!$ec2132e1ae606f18$var$Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
$ec2132e1ae606f18$var$Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !$ec2132e1ae606f18$var$Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = $ec2132e1ae606f18$var$Buffer.isBuffer(val) ? val : $ec2132e1ae606f18$var$Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var $ec2132e1ae606f18$var$INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function $ec2132e1ae606f18$var$base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace($ec2132e1ae606f18$var$INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function $ec2132e1ae606f18$var$utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function $ec2132e1ae606f18$var$asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function $ec2132e1ae606f18$var$utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function $ec2132e1ae606f18$var$base64ToBytes(str) {
    return $34tAZ.toByteArray($ec2132e1ae606f18$var$base64clean(str));
}
function $ec2132e1ae606f18$var$blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function $ec2132e1ae606f18$var$isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function $ec2132e1ae606f18$var$numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var $ec2132e1ae606f18$var$hexSliceLookupTable = function() {
    var alphabet = "0123456789abcdef";
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();

});
parcelRequire.register("34tAZ", function(module, exports) {

$parcel$export(module.exports, "toByteArray", function () { return $23c8b3e7977216a0$export$d622b2ad8d90c771; }, function (v) { return $23c8b3e7977216a0$export$d622b2ad8d90c771 = v; });
$parcel$export(module.exports, "fromByteArray", function () { return $23c8b3e7977216a0$export$6100ba28696e12de; }, function (v) { return $23c8b3e7977216a0$export$6100ba28696e12de = v; });
var $23c8b3e7977216a0$export$a48f0734ac7c2329;
var $23c8b3e7977216a0$export$d622b2ad8d90c771;
var $23c8b3e7977216a0$export$6100ba28696e12de;
"use strict";
$23c8b3e7977216a0$export$a48f0734ac7c2329 = $23c8b3e7977216a0$var$byteLength;
$23c8b3e7977216a0$export$d622b2ad8d90c771 = $23c8b3e7977216a0$var$toByteArray;
$23c8b3e7977216a0$export$6100ba28696e12de = $23c8b3e7977216a0$var$fromByteArray;
var $23c8b3e7977216a0$var$lookup = [];
var $23c8b3e7977216a0$var$revLookup = [];
var $23c8b3e7977216a0$var$Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var $23c8b3e7977216a0$var$code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var $23c8b3e7977216a0$var$i = 0, $23c8b3e7977216a0$var$len = $23c8b3e7977216a0$var$code.length; $23c8b3e7977216a0$var$i < $23c8b3e7977216a0$var$len; ++$23c8b3e7977216a0$var$i){
    $23c8b3e7977216a0$var$lookup[$23c8b3e7977216a0$var$i] = $23c8b3e7977216a0$var$code[$23c8b3e7977216a0$var$i];
    $23c8b3e7977216a0$var$revLookup[$23c8b3e7977216a0$var$code.charCodeAt($23c8b3e7977216a0$var$i)] = $23c8b3e7977216a0$var$i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
$23c8b3e7977216a0$var$revLookup["-".charCodeAt(0)] = 62;
$23c8b3e7977216a0$var$revLookup["_".charCodeAt(0)] = 63;
function $23c8b3e7977216a0$var$getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function $23c8b3e7977216a0$var$byteLength(b64) {
    var lens = $23c8b3e7977216a0$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $23c8b3e7977216a0$var$_byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $23c8b3e7977216a0$var$toByteArray(b64) {
    var tmp;
    var lens = $23c8b3e7977216a0$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new $23c8b3e7977216a0$var$Arr($23c8b3e7977216a0$var$_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = $23c8b3e7977216a0$var$revLookup[b64.charCodeAt(i)] << 18 | $23c8b3e7977216a0$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $23c8b3e7977216a0$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $23c8b3e7977216a0$var$revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = $23c8b3e7977216a0$var$revLookup[b64.charCodeAt(i)] << 2 | $23c8b3e7977216a0$var$revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = $23c8b3e7977216a0$var$revLookup[b64.charCodeAt(i)] << 10 | $23c8b3e7977216a0$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $23c8b3e7977216a0$var$revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function $23c8b3e7977216a0$var$tripletToBase64(num) {
    return $23c8b3e7977216a0$var$lookup[num >> 18 & 0x3F] + $23c8b3e7977216a0$var$lookup[num >> 12 & 0x3F] + $23c8b3e7977216a0$var$lookup[num >> 6 & 0x3F] + $23c8b3e7977216a0$var$lookup[num & 0x3F];
}
function $23c8b3e7977216a0$var$encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push($23c8b3e7977216a0$var$tripletToBase64(tmp));
    }
    return output.join("");
}
function $23c8b3e7977216a0$var$fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($23c8b3e7977216a0$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push($23c8b3e7977216a0$var$lookup[tmp >> 2] + $23c8b3e7977216a0$var$lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push($23c8b3e7977216a0$var$lookup[tmp >> 10] + $23c8b3e7977216a0$var$lookup[tmp >> 4 & 0x3F] + $23c8b3e7977216a0$var$lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

});

parcelRequire.register("2GfY9", function(module, exports) {

$parcel$export(module.exports, "read", function () { return $1f3be428269b5713$export$aafa59e2e03f2942; }, function (v) { return $1f3be428269b5713$export$aafa59e2e03f2942 = v; });
$parcel$export(module.exports, "write", function () { return $1f3be428269b5713$export$68d8715fc104d294; }, function (v) { return $1f3be428269b5713$export$68d8715fc104d294 = v; });
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $1f3be428269b5713$export$aafa59e2e03f2942;
var $1f3be428269b5713$export$68d8715fc104d294;
$1f3be428269b5713$export$aafa59e2e03f2942 = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
$1f3be428269b5713$export$68d8715fc104d294 = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

});


parcelRequire.register("l9xBz", function(module, exports) {
"use strict";

});

parcelRequire.register("cbqs8", function(module, exports) {

var $lT21Y = parcelRequire("lT21Y");
"use strict";
function $8deb0812fbe4808d$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function $8deb0812fbe4808d$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? $8deb0812fbe4808d$var$ownKeys(Object(source), !0).forEach(function(key) {
            $8deb0812fbe4808d$var$_defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : $8deb0812fbe4808d$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function $8deb0812fbe4808d$var$_defineProperty(obj, key, value) {
    key = $8deb0812fbe4808d$var$_toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $8deb0812fbe4808d$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $8deb0812fbe4808d$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, $8deb0812fbe4808d$var$_toPropertyKey(descriptor.key), descriptor);
    }
}
function $8deb0812fbe4808d$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $8deb0812fbe4808d$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $8deb0812fbe4808d$var$_defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function $8deb0812fbe4808d$var$_toPropertyKey(arg) {
    var key = $8deb0812fbe4808d$var$_toPrimitive(arg, "string");
    return (typeof key === "undefined" ? "undefined" : (0, $lT21Y.default)(key)) === "symbol" ? key : String(key);
}
function $8deb0812fbe4808d$var$_toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

var $kgUAE = parcelRequire("kgUAE");
var $8deb0812fbe4808d$var$Buffer = $kgUAE.Buffer;

var $l9xBz = parcelRequire("l9xBz");
var $8deb0812fbe4808d$var$inspect = $l9xBz.inspect;
var $8deb0812fbe4808d$var$custom = $8deb0812fbe4808d$var$inspect && $8deb0812fbe4808d$var$inspect.custom || "inspect";
function $8deb0812fbe4808d$var$copyBuffer(src, target, offset) {
    $8deb0812fbe4808d$var$Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        $8deb0812fbe4808d$var$_classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    $8deb0812fbe4808d$var$_createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return $8deb0812fbe4808d$var$Buffer.alloc(0);
                var ret = $8deb0812fbe4808d$var$Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    $8deb0812fbe4808d$var$copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            }
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            }
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = $8deb0812fbe4808d$var$Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: $8deb0812fbe4808d$var$custom,
            value: function value(_, options) {
                return $8deb0812fbe4808d$var$inspect(this, $8deb0812fbe4808d$var$_objectSpread($8deb0812fbe4808d$var$_objectSpread({}, options), {}, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

});

parcelRequire.register("5RUj6", function(module, exports) {

var $lFBFq = parcelRequire("lFBFq");
"use strict";
// undocumented cb() API, needed for core, not for public API
function $445d9463dcec5220$var$destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) $lFBFq.nextTick($445d9463dcec5220$var$emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                $lFBFq.nextTick($445d9463dcec5220$var$emitErrorNT, this, err);
            }
        }
        return this;
    }
    // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
    // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) $lFBFq.nextTick($445d9463dcec5220$var$emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                $lFBFq.nextTick($445d9463dcec5220$var$emitErrorAndCloseNT, _this, err);
            } else $lFBFq.nextTick($445d9463dcec5220$var$emitCloseNT, _this);
        } else if (cb) {
            $lFBFq.nextTick($445d9463dcec5220$var$emitCloseNT, _this);
            cb(err);
        } else $lFBFq.nextTick($445d9463dcec5220$var$emitCloseNT, _this);
    });
    return this;
}
function $445d9463dcec5220$var$emitErrorAndCloseNT(self, err) {
    $445d9463dcec5220$var$emitErrorNT(self, err);
    $445d9463dcec5220$var$emitCloseNT(self);
}
function $445d9463dcec5220$var$emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function $445d9463dcec5220$var$undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function $445d9463dcec5220$var$emitErrorNT(self, err) {
    self.emit("error", err);
}
function $445d9463dcec5220$var$errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: $445d9463dcec5220$var$destroy,
    undestroy: $445d9463dcec5220$var$undestroy,
    errorOrDestroy: $445d9463dcec5220$var$errorOrDestroy
};

});

parcelRequire.register("3lnFf", function(module, exports) {
"use strict";

var $jKKIi = parcelRequire("jKKIi");
var $26f5b07a7cc36ae8$var$ERR_INVALID_OPT_VALUE = $jKKIi.codes.ERR_INVALID_OPT_VALUE;
function $26f5b07a7cc36ae8$var$highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function $26f5b07a7cc36ae8$var$getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = $26f5b07a7cc36ae8$var$highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new $26f5b07a7cc36ae8$var$ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    }
    // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: $26f5b07a7cc36ae8$var$getHighWaterMark
};

});
parcelRequire.register("jKKIi", function(module, exports) {

$parcel$export(module.exports, "codes", function () { return $e6168c82637ebda6$export$e45cb6485273080e; }, function (v) { return $e6168c82637ebda6$export$e45cb6485273080e = v; });

var $lT21Y = parcelRequire("lT21Y");
var $e6168c82637ebda6$export$e45cb6485273080e;
"use strict";
function $e6168c82637ebda6$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var $e6168c82637ebda6$var$codes = {};
function $e6168c82637ebda6$var$createErrorType(code, message, Base) {
    var getMessage = function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    };
    if (!Base) Base = Error;
    var NodeError = /*#__PURE__*/ function(_Base) {
        var NodeError = function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        };
        $e6168c82637ebda6$var$_inheritsLoose(NodeError, _Base);
        return NodeError;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    $e6168c82637ebda6$var$codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function $e6168c82637ebda6$var$oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function $e6168c82637ebda6$var$startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $e6168c82637ebda6$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function $e6168c82637ebda6$var$includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
$e6168c82637ebda6$var$createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
$e6168c82637ebda6$var$createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && $e6168c82637ebda6$var$startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if ($e6168c82637ebda6$var$endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat($e6168c82637ebda6$var$oneOf(expected, "type"));
    else {
        var type = $e6168c82637ebda6$var$includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat($e6168c82637ebda6$var$oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual === "undefined" ? "undefined" : (0, $lT21Y.default)(actual));
    return msg;
}, TypeError);
$e6168c82637ebda6$var$createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
$e6168c82637ebda6$var$createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
$e6168c82637ebda6$var$createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
$e6168c82637ebda6$var$createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
$e6168c82637ebda6$var$createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
$e6168c82637ebda6$var$createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
$e6168c82637ebda6$var$createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
$e6168c82637ebda6$var$createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
$e6168c82637ebda6$var$createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
$e6168c82637ebda6$var$createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
$e6168c82637ebda6$export$e45cb6485273080e = $e6168c82637ebda6$var$codes;

});


parcelRequire.register("ScPjF", function(module, exports) {
if (typeof Object.create === "function") // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function TempCtor() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

});

parcelRequire.register("lcG3t", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

var $lFBFq = parcelRequire("lFBFq");
"use strict";
/*<replacement>*/ var $f6fb573a950fb195$var$objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = $f6fb573a950fb195$var$Duplex;

var $eFcsd = parcelRequire("eFcsd");

var $kF8wF = parcelRequire("kF8wF");

(parcelRequire("ScPjF"))($f6fb573a950fb195$var$Duplex, $eFcsd);
// Allow the keys array to be GC'ed.
var $f6fb573a950fb195$var$keys = $f6fb573a950fb195$var$objectKeys($kF8wF.prototype);
for(var $f6fb573a950fb195$var$v = 0; $f6fb573a950fb195$var$v < $f6fb573a950fb195$var$keys.length; $f6fb573a950fb195$var$v++){
    var $f6fb573a950fb195$var$method = $f6fb573a950fb195$var$keys[$f6fb573a950fb195$var$v];
    if (!$f6fb573a950fb195$var$Duplex.prototype[$f6fb573a950fb195$var$method]) $f6fb573a950fb195$var$Duplex.prototype[$f6fb573a950fb195$var$method] = $kF8wF.prototype[$f6fb573a950fb195$var$method];
}
function $f6fb573a950fb195$var$Duplex(options) {
    if (!(this instanceof $f6fb573a950fb195$var$Duplex)) return new $f6fb573a950fb195$var$Duplex(options);
    $eFcsd.call(this, options);
    $kF8wF.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", $f6fb573a950fb195$var$onend);
        }
    }
}
Object.defineProperty($f6fb573a950fb195$var$Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty($f6fb573a950fb195$var$Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty($f6fb573a950fb195$var$Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
// the no-half-open enforcer
function $f6fb573a950fb195$var$onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return;
    // no more data can be written.
    // But allow more writes to happen in this tick.
    $lFBFq.nextTick($f6fb573a950fb195$var$onEndNT, this);
}
function $f6fb573a950fb195$var$onEndNT(self) {
    self.end();
}
Object.defineProperty($f6fb573a950fb195$var$Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

});
parcelRequire.register("kF8wF", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

var $lFBFq = parcelRequire("lFBFq");
"use strict";
module.exports = $f0ae4012317e5599$var$Writable;
/* <replacement> */ function $f0ae4012317e5599$var$WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
}
// It seems a linked list but it is not
// there will be only 2 of these for each stream
function $f0ae4012317e5599$var$CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        $f0ae4012317e5599$var$onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var $f0ae4012317e5599$var$Duplex;
/*</replacement>*/ $f0ae4012317e5599$var$Writable.WritableState = $f0ae4012317e5599$var$WritableState;

/*<replacement>*/ var $f0ae4012317e5599$var$internalUtil = {
    deprecate: (parcelRequire("2p2sk"))
};

var $jtbn3 = parcelRequire("jtbn3");

var $kgUAE = parcelRequire("kgUAE");
var $f0ae4012317e5599$require$Buffer = $kgUAE.Buffer;
var $f0ae4012317e5599$var$OurUint8Array = (typeof $parcel$global !== "undefined" ? $parcel$global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function $f0ae4012317e5599$var$_uint8ArrayToBuffer(chunk) {
    return $f0ae4012317e5599$require$Buffer.from(chunk);
}
function $f0ae4012317e5599$var$_isUint8Array(obj) {
    return $f0ae4012317e5599$require$Buffer.isBuffer(obj) || obj instanceof $f0ae4012317e5599$var$OurUint8Array;
}

var $5RUj6 = parcelRequire("5RUj6");

var $3lnFf = parcelRequire("3lnFf");
var $f0ae4012317e5599$var$getHighWaterMark = $3lnFf.getHighWaterMark;

var $jKKIi = parcelRequire("jKKIi");
var $f0ae4012317e5599$require$_require$codes = $jKKIi.codes;
var $f0ae4012317e5599$var$ERR_INVALID_ARG_TYPE = $f0ae4012317e5599$require$_require$codes.ERR_INVALID_ARG_TYPE, $f0ae4012317e5599$var$ERR_METHOD_NOT_IMPLEMENTED = $f0ae4012317e5599$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $f0ae4012317e5599$var$ERR_MULTIPLE_CALLBACK = $f0ae4012317e5599$require$_require$codes.ERR_MULTIPLE_CALLBACK, $f0ae4012317e5599$var$ERR_STREAM_CANNOT_PIPE = $f0ae4012317e5599$require$_require$codes.ERR_STREAM_CANNOT_PIPE, $f0ae4012317e5599$var$ERR_STREAM_DESTROYED = $f0ae4012317e5599$require$_require$codes.ERR_STREAM_DESTROYED, $f0ae4012317e5599$var$ERR_STREAM_NULL_VALUES = $f0ae4012317e5599$require$_require$codes.ERR_STREAM_NULL_VALUES, $f0ae4012317e5599$var$ERR_STREAM_WRITE_AFTER_END = $f0ae4012317e5599$require$_require$codes.ERR_STREAM_WRITE_AFTER_END, $f0ae4012317e5599$var$ERR_UNKNOWN_ENCODING = $f0ae4012317e5599$require$_require$codes.ERR_UNKNOWN_ENCODING;
var $f0ae4012317e5599$var$errorOrDestroy = $5RUj6.errorOrDestroy;

(parcelRequire("ScPjF"))($f0ae4012317e5599$var$Writable, $jtbn3);
function $f0ae4012317e5599$var$nop() {}

function $f0ae4012317e5599$var$WritableState(options, stream, isDuplex) {
    $f0ae4012317e5599$var$Duplex = $f0ae4012317e5599$var$Duplex || (parcelRequire("lcG3t"));
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $f0ae4012317e5599$var$Duplex;
    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = $f0ae4012317e5599$var$getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
    // if _final has been called
    this.finalCalled = false;
    // drain event flag.
    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;
    // has it been destroyed
    this.destroyed = false;
    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;
    // a flag to see when we're in the middle of a write.
    this.writing = false;
    // when true all writes will be buffered until .uncork() call
    this.corked = 0;
    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;
    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;
    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        $f0ae4012317e5599$var$onwrite(stream, er);
    };
    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;
    // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;
    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;
    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy;
    // count buffered requests
    this.bufferedRequestCount = 0;
    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new $f0ae4012317e5599$var$CorkedRequest(this);
}
$f0ae4012317e5599$var$WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty($f0ae4012317e5599$var$WritableState.prototype, "buffer", {
            get: $f0ae4012317e5599$var$internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})();
// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var $f0ae4012317e5599$var$realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    $f0ae4012317e5599$var$realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty($f0ae4012317e5599$var$Writable, Symbol.hasInstance, {
        value: function value(object) {
            if ($f0ae4012317e5599$var$realHasInstance.call(this, object)) return true;
            if (this !== $f0ae4012317e5599$var$Writable) return false;
            return object && object._writableState instanceof $f0ae4012317e5599$var$WritableState;
        }
    });
} else $f0ae4012317e5599$var$realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};

function $f0ae4012317e5599$var$Writable(options) {
    $f0ae4012317e5599$var$Duplex = $f0ae4012317e5599$var$Duplex || (parcelRequire("lcG3t"));
    // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $f0ae4012317e5599$var$Duplex;
    if (!isDuplex && !$f0ae4012317e5599$var$realHasInstance.call($f0ae4012317e5599$var$Writable, this)) return new $f0ae4012317e5599$var$Writable(options);
    this._writableState = new $f0ae4012317e5599$var$WritableState(options, this, isDuplex);
    // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options["final"] === "function") this._final = options["final"];
    }
    $jtbn3.call(this);
}
// Otherwise people can pipe Writable streams, which is just wrong.
$f0ae4012317e5599$var$Writable.prototype.pipe = function() {
    $f0ae4012317e5599$var$errorOrDestroy(this, new $f0ae4012317e5599$var$ERR_STREAM_CANNOT_PIPE());
};
function $f0ae4012317e5599$var$writeAfterEnd(stream, cb) {
    var er = new $f0ae4012317e5599$var$ERR_STREAM_WRITE_AFTER_END();
    // TODO: defer error events consistently everywhere, not just the cb
    $f0ae4012317e5599$var$errorOrDestroy(stream, er);
    $lFBFq.nextTick(cb, er);
}
// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function $f0ae4012317e5599$var$validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new $f0ae4012317e5599$var$ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new $f0ae4012317e5599$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        $f0ae4012317e5599$var$errorOrDestroy(stream, er);
        $lFBFq.nextTick(cb, er);
        return false;
    }
    return true;
}
$f0ae4012317e5599$var$Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && $f0ae4012317e5599$var$_isUint8Array(chunk);
    if (isBuf && !$f0ae4012317e5599$require$Buffer.isBuffer(chunk)) chunk = $f0ae4012317e5599$var$_uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = $f0ae4012317e5599$var$nop;
    if (state.ending) $f0ae4012317e5599$var$writeAfterEnd(this, cb);
    else if (isBuf || $f0ae4012317e5599$var$validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = $f0ae4012317e5599$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
$f0ae4012317e5599$var$Writable.prototype.cork = function() {
    this._writableState.corked++;
};
$f0ae4012317e5599$var$Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $f0ae4012317e5599$var$clearBuffer(this, state);
    }
};
$f0ae4012317e5599$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new $f0ae4012317e5599$var$ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty($f0ae4012317e5599$var$Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function $f0ae4012317e5599$var$decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = $f0ae4012317e5599$require$Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty($f0ae4012317e5599$var$Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function $f0ae4012317e5599$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = $f0ae4012317e5599$var$decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else $f0ae4012317e5599$var$doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function $f0ae4012317e5599$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new $f0ae4012317e5599$var$ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function $f0ae4012317e5599$var$onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        $lFBFq.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        $lFBFq.nextTick($f0ae4012317e5599$var$finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        $f0ae4012317e5599$var$errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        $f0ae4012317e5599$var$errorOrDestroy(stream, er);
        // this can emit finish, but finish must
        // always follow error
        $f0ae4012317e5599$var$finishMaybe(stream, state);
    }
}
function $f0ae4012317e5599$var$onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function $f0ae4012317e5599$var$onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new $f0ae4012317e5599$var$ERR_MULTIPLE_CALLBACK();
    $f0ae4012317e5599$var$onwriteStateUpdate(state);
    if (er) $f0ae4012317e5599$var$onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = $f0ae4012317e5599$var$needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) $f0ae4012317e5599$var$clearBuffer(stream, state);
        if (sync) $lFBFq.nextTick($f0ae4012317e5599$var$afterWrite, stream, state, finished, cb);
        else $f0ae4012317e5599$var$afterWrite(stream, state, finished, cb);
    }
}
function $f0ae4012317e5599$var$afterWrite(stream, state, finished, cb) {
    if (!finished) $f0ae4012317e5599$var$onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    $f0ae4012317e5599$var$finishMaybe(stream, state);
}
// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function $f0ae4012317e5599$var$onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
}
// if there's something in the buffer waiting, then process it
function $f0ae4012317e5599$var$clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        $f0ae4012317e5599$var$doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new $f0ae4012317e5599$var$CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            $f0ae4012317e5599$var$doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
$f0ae4012317e5599$var$Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new $f0ae4012317e5599$var$ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
$f0ae4012317e5599$var$Writable.prototype._writev = null;
$f0ae4012317e5599$var$Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
    // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    }
    // ignore unnecessary end() calls.
    if (!state.ending) $f0ae4012317e5599$var$endWritable(this, state, cb);
    return this;
};
Object.defineProperty($f0ae4012317e5599$var$Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function $f0ae4012317e5599$var$needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function $f0ae4012317e5599$var$callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) $f0ae4012317e5599$var$errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        $f0ae4012317e5599$var$finishMaybe(stream, state);
    });
}
function $f0ae4012317e5599$var$prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            $lFBFq.nextTick($f0ae4012317e5599$var$callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function $f0ae4012317e5599$var$finishMaybe(stream, state) {
    var need = $f0ae4012317e5599$var$needFinish(state);
    if (need) {
        $f0ae4012317e5599$var$prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function $f0ae4012317e5599$var$endWritable(stream, state, cb) {
    state.ending = true;
    $f0ae4012317e5599$var$finishMaybe(stream, state);
    if (cb) {
        if (state.finished) $lFBFq.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function $f0ae4012317e5599$var$onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    }
    // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty($f0ae4012317e5599$var$Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
$f0ae4012317e5599$var$Writable.prototype.destroy = $5RUj6.destroy;
$f0ae4012317e5599$var$Writable.prototype._undestroy = $5RUj6.undestroy;
$f0ae4012317e5599$var$Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

});
parcelRequire.register("2p2sk", function(module, exports) {
/**
 * Module exports.
 */ module.exports = $1bffd23cfca6dccb$var$deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function $1bffd23cfca6dccb$var$deprecate(fn, msg) {
    var deprecated = function deprecated() {
        if (!warned) {
            if ($1bffd23cfca6dccb$var$config("throwDeprecation")) throw new Error(msg);
            else if ($1bffd23cfca6dccb$var$config("traceDeprecation")) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    };
    if ($1bffd23cfca6dccb$var$config("noDeprecation")) return fn;
    var warned = false;
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function $1bffd23cfca6dccb$var$config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!$parcel$global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = $parcel$global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === "true";
}

});



parcelRequire.register("i1uXD", function(module, exports) {

$parcel$export(module.exports, "StringDecoder", function () { return $d1f05627ebb085d7$export$63a7aa211a91ed69; }, function (v) { return $d1f05627ebb085d7$export$63a7aa211a91ed69 = v; });
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
var $d1f05627ebb085d7$export$63a7aa211a91ed69;
"use strict";

var $lXTWZ = parcelRequire("lXTWZ");
var $d1f05627ebb085d7$require$Buffer = $lXTWZ.Buffer;
/*</replacement>*/ var $d1f05627ebb085d7$var$isEncoding = $d1f05627ebb085d7$require$Buffer.isEncoding || function(encoding) {
    encoding = "" + encoding;
    switch(encoding && encoding.toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
            return true;
        default:
            return false;
    }
};
function $d1f05627ebb085d7$var$_normalizeEncoding(enc) {
    if (!enc) return "utf8";
    var retried;
    while(true)switch(enc){
        case "utf8":
        case "utf-8":
            return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return "utf16le";
        case "latin1":
        case "binary":
            return "latin1";
        case "base64":
        case "ascii":
        case "hex":
            return enc;
        default:
            if (retried) return; // undefined
            enc = ("" + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function $d1f05627ebb085d7$var$normalizeEncoding(enc) {
    var nenc = $d1f05627ebb085d7$var$_normalizeEncoding(enc);
    if (typeof nenc !== "string" && ($d1f05627ebb085d7$require$Buffer.isEncoding === $d1f05627ebb085d7$var$isEncoding || !$d1f05627ebb085d7$var$isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
    return nenc || enc;
}
$d1f05627ebb085d7$export$63a7aa211a91ed69 = $d1f05627ebb085d7$var$StringDecoder;
function $d1f05627ebb085d7$var$StringDecoder(encoding) {
    this.encoding = $d1f05627ebb085d7$var$normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case "utf16le":
            this.text = $d1f05627ebb085d7$var$utf16Text;
            this.end = $d1f05627ebb085d7$var$utf16End;
            nb = 4;
            break;
        case "utf8":
            this.fillLast = $d1f05627ebb085d7$var$utf8FillLast;
            nb = 4;
            break;
        case "base64":
            this.text = $d1f05627ebb085d7$var$base64Text;
            this.end = $d1f05627ebb085d7$var$base64End;
            nb = 3;
            break;
        default:
            this.write = $d1f05627ebb085d7$var$simpleWrite;
            this.end = $d1f05627ebb085d7$var$simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = $d1f05627ebb085d7$require$Buffer.allocUnsafe(nb);
}
$d1f05627ebb085d7$var$StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return "";
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return "";
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || "";
};
$d1f05627ebb085d7$var$StringDecoder.prototype.end = $d1f05627ebb085d7$var$utf8End;
// Returns only complete characters in a Buffer
$d1f05627ebb085d7$var$StringDecoder.prototype.text = $d1f05627ebb085d7$var$utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
$d1f05627ebb085d7$var$StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function $d1f05627ebb085d7$var$utf8CheckByte(_byte) {
    if (_byte <= 0x7F) return 0;
    else if (_byte >> 5 === 0x06) return 2;
    else if (_byte >> 4 === 0x0E) return 3;
    else if (_byte >> 3 === 0x1E) return 4;
    return _byte >> 6 === 0x02 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function $d1f05627ebb085d7$var$utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = $d1f05627ebb085d7$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $d1f05627ebb085d7$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $d1f05627ebb085d7$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function $d1f05627ebb085d7$var$utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return "�";
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
            self.lastNeed = 1;
            return "�";
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xC0) !== 0x80) {
                self.lastNeed = 2;
                return "�";
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function $d1f05627ebb085d7$var$utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = $d1f05627ebb085d7$var$utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function $d1f05627ebb085d7$var$utf8Text(buf, i) {
    var total = $d1f05627ebb085d7$var$utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString("utf8", i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString("utf8", i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function $d1f05627ebb085d7$var$utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + "�";
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function $d1f05627ebb085d7$var$utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString("utf16le", i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xD800 && c <= 0xDBFF) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString("utf16le", i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function $d1f05627ebb085d7$var$utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString("utf16le", 0, end);
    }
    return r;
}
function $d1f05627ebb085d7$var$base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString("base64", i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString("base64", i, buf.length - n);
}
function $d1f05627ebb085d7$var$base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : "";
    if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function $d1f05627ebb085d7$var$simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function $d1f05627ebb085d7$var$simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : "";
}

});
parcelRequire.register("lXTWZ", function(module, exports) {
/* eslint-disable node/no-deprecated-api */ 
var $kgUAE = parcelRequire("kgUAE");
var $ffda823e8b632ced$var$Buffer = $kgUAE.Buffer;
// alternative to using Object.keys for old browsers
function $ffda823e8b632ced$var$copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if ($ffda823e8b632ced$var$Buffer.from && $ffda823e8b632ced$var$Buffer.alloc && $ffda823e8b632ced$var$Buffer.allocUnsafe && $ffda823e8b632ced$var$Buffer.allocUnsafeSlow) module.exports = $kgUAE;
else {
    // Copy properties from require('buffer')
    $ffda823e8b632ced$var$copyProps($kgUAE, module.exports);
    module.exports.Buffer = $ffda823e8b632ced$var$SafeBuffer;
}
function $ffda823e8b632ced$var$SafeBuffer(arg, encodingOrOffset, length) {
    return $ffda823e8b632ced$var$Buffer(arg, encodingOrOffset, length);
}
// Copy static methods from Buffer
$ffda823e8b632ced$var$copyProps($ffda823e8b632ced$var$Buffer, $ffda823e8b632ced$var$SafeBuffer);
$ffda823e8b632ced$var$SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
    return $ffda823e8b632ced$var$Buffer(arg, encodingOrOffset, length);
};
$ffda823e8b632ced$var$SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    var buf = $ffda823e8b632ced$var$Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === "string") buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
$ffda823e8b632ced$var$SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return $ffda823e8b632ced$var$Buffer(size);
};
$ffda823e8b632ced$var$SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") throw new TypeError("Argument must be a number");
    return $kgUAE.SlowBuffer(size);
};

});


parcelRequire.register("64FNe", function(module, exports) {

var $lT21Y = parcelRequire("lT21Y");

var $lFBFq = parcelRequire("lFBFq");
"use strict";
var $46c38904a5f23300$var$_Object$setPrototypeO;
function $46c38904a5f23300$var$_defineProperty(obj, key, value) {
    key = $46c38904a5f23300$var$_toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $46c38904a5f23300$var$_toPropertyKey(arg) {
    var key = $46c38904a5f23300$var$_toPrimitive(arg, "string");
    return (typeof key === "undefined" ? "undefined" : (0, $lT21Y.default)(key)) === "symbol" ? key : String(key);
}
function $46c38904a5f23300$var$_toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

var $bVwML = parcelRequire("bVwML");
var $46c38904a5f23300$var$kLastResolve = Symbol("lastResolve");
var $46c38904a5f23300$var$kLastReject = Symbol("lastReject");
var $46c38904a5f23300$var$kError = Symbol("error");
var $46c38904a5f23300$var$kEnded = Symbol("ended");
var $46c38904a5f23300$var$kLastPromise = Symbol("lastPromise");
var $46c38904a5f23300$var$kHandlePromise = Symbol("handlePromise");
var $46c38904a5f23300$var$kStream = Symbol("stream");
function $46c38904a5f23300$var$createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function $46c38904a5f23300$var$readAndResolve(iter) {
    var resolve = iter[$46c38904a5f23300$var$kLastResolve];
    if (resolve !== null) {
        var data = iter[$46c38904a5f23300$var$kStream].read();
        // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[$46c38904a5f23300$var$kLastPromise] = null;
            iter[$46c38904a5f23300$var$kLastResolve] = null;
            iter[$46c38904a5f23300$var$kLastReject] = null;
            resolve($46c38904a5f23300$var$createIterResult(data, false));
        }
    }
}
function $46c38904a5f23300$var$onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    $lFBFq.nextTick($46c38904a5f23300$var$readAndResolve, iter);
}
function $46c38904a5f23300$var$wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[$46c38904a5f23300$var$kEnded]) {
                resolve($46c38904a5f23300$var$createIterResult(undefined, true));
                return;
            }
            iter[$46c38904a5f23300$var$kHandlePromise](resolve, reject);
        }, reject);
    };
}
var $46c38904a5f23300$var$AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var $46c38904a5f23300$var$ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(($46c38904a5f23300$var$_Object$setPrototypeO = {
    get stream () {
        return this[$46c38904a5f23300$var$kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[$46c38904a5f23300$var$kError];
        if (error !== null) return Promise.reject(error);
        if (this[$46c38904a5f23300$var$kEnded]) return Promise.resolve($46c38904a5f23300$var$createIterResult(undefined, true));
        if (this[$46c38904a5f23300$var$kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            $lFBFq.nextTick(function() {
                if (_this[$46c38904a5f23300$var$kError]) reject(_this[$46c38904a5f23300$var$kError]);
                else resolve($46c38904a5f23300$var$createIterResult(undefined, true));
            });
        });
        // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[$46c38904a5f23300$var$kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise($46c38904a5f23300$var$wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[$46c38904a5f23300$var$kStream].read();
            if (data !== null) return Promise.resolve($46c38904a5f23300$var$createIterResult(data, false));
            promise = new Promise(this[$46c38904a5f23300$var$kHandlePromise]);
        }
        this[$46c38904a5f23300$var$kLastPromise] = promise;
        return promise;
    }
}, $46c38904a5f23300$var$_defineProperty($46c38904a5f23300$var$_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), $46c38904a5f23300$var$_defineProperty($46c38904a5f23300$var$_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[$46c38904a5f23300$var$kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve($46c38904a5f23300$var$createIterResult(undefined, true));
        });
    });
}), $46c38904a5f23300$var$_Object$setPrototypeO), $46c38904a5f23300$var$AsyncIteratorPrototype);
var $46c38904a5f23300$var$createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create($46c38904a5f23300$var$ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, $46c38904a5f23300$var$_defineProperty(_Object$create, $46c38904a5f23300$var$kStream, {
        value: stream,
        writable: true
    }), $46c38904a5f23300$var$_defineProperty(_Object$create, $46c38904a5f23300$var$kLastResolve, {
        value: null,
        writable: true
    }), $46c38904a5f23300$var$_defineProperty(_Object$create, $46c38904a5f23300$var$kLastReject, {
        value: null,
        writable: true
    }), $46c38904a5f23300$var$_defineProperty(_Object$create, $46c38904a5f23300$var$kError, {
        value: null,
        writable: true
    }), $46c38904a5f23300$var$_defineProperty(_Object$create, $46c38904a5f23300$var$kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), $46c38904a5f23300$var$_defineProperty(_Object$create, $46c38904a5f23300$var$kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[$46c38904a5f23300$var$kStream].read();
            if (data) {
                iterator[$46c38904a5f23300$var$kLastPromise] = null;
                iterator[$46c38904a5f23300$var$kLastResolve] = null;
                iterator[$46c38904a5f23300$var$kLastReject] = null;
                resolve($46c38904a5f23300$var$createIterResult(data, false));
            } else {
                iterator[$46c38904a5f23300$var$kLastResolve] = resolve;
                iterator[$46c38904a5f23300$var$kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[$46c38904a5f23300$var$kLastPromise] = null;
    $bVwML(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[$46c38904a5f23300$var$kLastReject];
            // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[$46c38904a5f23300$var$kLastPromise] = null;
                iterator[$46c38904a5f23300$var$kLastResolve] = null;
                iterator[$46c38904a5f23300$var$kLastReject] = null;
                reject(err);
            }
            iterator[$46c38904a5f23300$var$kError] = err;
            return;
        }
        var resolve = iterator[$46c38904a5f23300$var$kLastResolve];
        if (resolve !== null) {
            iterator[$46c38904a5f23300$var$kLastPromise] = null;
            iterator[$46c38904a5f23300$var$kLastResolve] = null;
            iterator[$46c38904a5f23300$var$kLastReject] = null;
            resolve($46c38904a5f23300$var$createIterResult(undefined, true));
        }
        iterator[$46c38904a5f23300$var$kEnded] = true;
    });
    stream.on("readable", $46c38904a5f23300$var$onReadable.bind(null, iterator));
    return iterator;
};
module.exports = $46c38904a5f23300$var$createReadableStreamAsyncIterator;

});
parcelRequire.register("bVwML", function(module, exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";

var $jKKIi = parcelRequire("jKKIi");
var $8aee7318a2b9abab$var$ERR_STREAM_PREMATURE_CLOSE = $jKKIi.codes.ERR_STREAM_PREMATURE_CLOSE;
function $8aee7318a2b9abab$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function $8aee7318a2b9abab$var$noop() {}
function $8aee7318a2b9abab$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function $8aee7318a2b9abab$var$eos(stream, opts, callback) {
    if (typeof opts === "function") return $8aee7318a2b9abab$var$eos(stream, null, opts);
    if (!opts) opts = {};
    callback = $8aee7318a2b9abab$var$once(callback || $8aee7318a2b9abab$var$noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new $8aee7318a2b9abab$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new $8aee7318a2b9abab$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if ($8aee7318a2b9abab$var$isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = $8aee7318a2b9abab$var$eos;

});


parcelRequire.register("iXFvX", function(module, exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

});


parcelRequire.register("edTzz", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = $a5ad63305b96d7c7$var$Transform;

var $jKKIi = parcelRequire("jKKIi");
var $a5ad63305b96d7c7$require$_require$codes = $jKKIi.codes;
var $a5ad63305b96d7c7$var$ERR_METHOD_NOT_IMPLEMENTED = $a5ad63305b96d7c7$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $a5ad63305b96d7c7$var$ERR_MULTIPLE_CALLBACK = $a5ad63305b96d7c7$require$_require$codes.ERR_MULTIPLE_CALLBACK, $a5ad63305b96d7c7$var$ERR_TRANSFORM_ALREADY_TRANSFORMING = $a5ad63305b96d7c7$require$_require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, $a5ad63305b96d7c7$var$ERR_TRANSFORM_WITH_LENGTH_0 = $a5ad63305b96d7c7$require$_require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var $lcG3t = parcelRequire("lcG3t");

(parcelRequire("ScPjF"))($a5ad63305b96d7c7$var$Transform, $lcG3t);
function $a5ad63305b96d7c7$var$afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new $a5ad63305b96d7c7$var$ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function $a5ad63305b96d7c7$var$Transform(options) {
    if (!(this instanceof $a5ad63305b96d7c7$var$Transform)) return new $a5ad63305b96d7c7$var$Transform(options);
    $lcG3t.call(this, options);
    this._transformState = {
        afterTransform: $a5ad63305b96d7c7$var$afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    };
    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;
    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    }
    // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", $a5ad63305b96d7c7$var$prefinish);
}
function $a5ad63305b96d7c7$var$prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        $a5ad63305b96d7c7$var$done(_this, er, data);
    });
    else $a5ad63305b96d7c7$var$done(this, null, null);
}
$a5ad63305b96d7c7$var$Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return $lcG3t.prototype.push.call(this, chunk, encoding);
};
// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
$a5ad63305b96d7c7$var$Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new $a5ad63305b96d7c7$var$ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
$a5ad63305b96d7c7$var$Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
};
// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
$a5ad63305b96d7c7$var$Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
$a5ad63305b96d7c7$var$Transform.prototype._destroy = function(err, cb) {
    $lcG3t.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function $a5ad63305b96d7c7$var$done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);
    // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new $a5ad63305b96d7c7$var$ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new $a5ad63305b96d7c7$var$ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

});

parcelRequire.register("3IwIf", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = $2b4edb3c00b130ff$var$PassThrough;

var $edTzz = parcelRequire("edTzz");

(parcelRequire("ScPjF"))($2b4edb3c00b130ff$var$PassThrough, $edTzz);
function $2b4edb3c00b130ff$var$PassThrough(options) {
    if (!(this instanceof $2b4edb3c00b130ff$var$PassThrough)) return new $2b4edb3c00b130ff$var$PassThrough(options);
    $edTzz.call(this, options);
}
$2b4edb3c00b130ff$var$PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

});

parcelRequire.register("UmLRC", function(module, exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var $0a96e4ec3d8104f7$var$eos;
function $0a96e4ec3d8104f7$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}

var $jKKIi = parcelRequire("jKKIi");
var $0a96e4ec3d8104f7$require$_require$codes = $jKKIi.codes;
var $0a96e4ec3d8104f7$var$ERR_MISSING_ARGS = $0a96e4ec3d8104f7$require$_require$codes.ERR_MISSING_ARGS, $0a96e4ec3d8104f7$var$ERR_STREAM_DESTROYED = $0a96e4ec3d8104f7$require$_require$codes.ERR_STREAM_DESTROYED;
function $0a96e4ec3d8104f7$var$noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function $0a96e4ec3d8104f7$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}

function $0a96e4ec3d8104f7$var$destroyer(stream, reading, writing, callback) {
    callback = $0a96e4ec3d8104f7$var$once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if ($0a96e4ec3d8104f7$var$eos === undefined) $0a96e4ec3d8104f7$var$eos = (parcelRequire("bVwML"));
    $0a96e4ec3d8104f7$var$eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true;
        // request.destroy just do .end - .abort is what we want
        if ($0a96e4ec3d8104f7$var$isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new $0a96e4ec3d8104f7$var$ERR_STREAM_DESTROYED("pipe"));
    };
}
function $0a96e4ec3d8104f7$var$call(fn) {
    fn();
}
function $0a96e4ec3d8104f7$var$pipe(from, to) {
    return from.pipe(to);
}
function $0a96e4ec3d8104f7$var$popCallback(streams) {
    if (!streams.length) return $0a96e4ec3d8104f7$var$noop;
    if (typeof streams[streams.length - 1] !== "function") return $0a96e4ec3d8104f7$var$noop;
    return streams.pop();
}
function $0a96e4ec3d8104f7$var$pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = $0a96e4ec3d8104f7$var$popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new $0a96e4ec3d8104f7$var$ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return $0a96e4ec3d8104f7$var$destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach($0a96e4ec3d8104f7$var$call);
            if (reading) return;
            destroys.forEach($0a96e4ec3d8104f7$var$call);
            callback(error);
        });
    });
    return streams.reduce($0a96e4ec3d8104f7$var$pipe);
}
module.exports = $0a96e4ec3d8104f7$var$pipeline;

});


parcelRequire.register("2wG4o", function(module, exports) {

var $kE1KM = parcelRequire("kE1KM");
"use strict";
module.exports = function(Yallist) {
    Yallist.prototype[Symbol.iterator] = function() {
        var walker;
        return (0, $kE1KM.__generator)(this, function(_state) {
            switch(_state.label){
                case 0:
                    walker = this.head;
                    _state.label = 1;
                case 1:
                    if (!walker) return [
                        3,
                        4
                    ];
                    return [
                        4,
                        walker.value
                    ];
                case 2:
                    _state.sent();
                    _state.label = 3;
                case 3:
                    walker = walker.next;
                    return [
                        3,
                        1
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    };
};

});
parcelRequire.register("kE1KM", function(module, exports) {

$parcel$export(module.exports, "__generator", function () { return $f078e74592755e8a$export$67ebef60e6f28a6; });
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ 
var $lT21Y = parcelRequire("lT21Y");
var $f078e74592755e8a$var$extendStatics = function extendStatics1(d, b) {
    $f078e74592755e8a$var$extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return $f078e74592755e8a$var$extendStatics(d, b);
};
function $f078e74592755e8a$export$a8ba968b8961cb8a(d, b) {
    var __ = function __() {
        this.constructor = d;
    };
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    $f078e74592755e8a$var$extendStatics(d, b);
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var $f078e74592755e8a$export$18ce0697a983be9b = function __assign1() {
    $f078e74592755e8a$export$18ce0697a983be9b = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $f078e74592755e8a$export$18ce0697a983be9b.apply(this, arguments);
};
function $f078e74592755e8a$export$3c9a16f847548506(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function $f078e74592755e8a$export$29e00dfd3077644b(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function $f078e74592755e8a$export$d5ad3fd78186038f(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function $f078e74592755e8a$export$3a84e1ae4e97e9b0(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    var accept = function accept(f) {
        if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
        return f;
    };
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for(var i = decorators.length - 1; i >= 0; i--){
        var context = {};
        for(var p in contextIn)context[p] = p === "access" ? {} : contextIn[p];
        for(var p in contextIn.access)context.access[p] = contextIn.access[p];
        context.addInitializer = function(f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(kind === "accessor" ? {
            get: descriptor.get,
            set: descriptor.set
        } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.push(_);
        } else if (_ = accept(result)) {
            if (kind === "field") initializers.push(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
}
function $f078e74592755e8a$export$d831c04e792af3d(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    return useValue ? value : void 0;
}
function $f078e74592755e8a$export$6a2a36740a146cb8(x) {
    return (typeof x === "undefined" ? "undefined" : (0, $lT21Y.default)(x)) === "symbol" ? x : "".concat(x);
}
function $f078e74592755e8a$export$d1a06452d3489bc7(f, name, prefix) {
    if ((typeof name === "undefined" ? "undefined" : (0, $lT21Y.default)(name)) === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", {
        configurable: true,
        value: prefix ? "".concat(prefix, " ", name) : name
    });
}
function $f078e74592755e8a$export$f1db080c865becb9(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function $f078e74592755e8a$export$1050f835b63b671e(thisArg, _arguments, P, generator) {
    var adopt = function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    };
    return new (P || (P = Promise))(function(resolve, reject) {
        var fulfilled = function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        };
        var rejected = function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        };
        var step = function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        };
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function $f078e74592755e8a$export$67ebef60e6f28a6(thisArg, body) {
    var verb = function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    };
    var step = function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    };
    var _ = {
        label: 0,
        sent: function sent() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
}
var $f078e74592755e8a$export$45d3717a4c69092e = Object.create ? function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function get() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function $f078e74592755e8a$export$f33643c0debef087(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) $f078e74592755e8a$export$45d3717a4c69092e(o, m, p);
}
function $f078e74592755e8a$export$19a8beecd37a4c45(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function $f078e74592755e8a$export$8d051b38c9118094(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function $f078e74592755e8a$export$afc72e2116322959() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat($f078e74592755e8a$export$8d051b38c9118094(arguments[i]));
    return ar;
}
function $f078e74592755e8a$export$6388937ca91ccae8() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function $f078e74592755e8a$export$1216008129fb82ed(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function $f078e74592755e8a$export$10c90e4f7922046c(v) {
    return this instanceof $f078e74592755e8a$export$10c90e4f7922046c ? (this.v = v, this) : new $f078e74592755e8a$export$10c90e4f7922046c(v);
}
function $f078e74592755e8a$export$e427f37a30a4de9b(thisArg, _arguments, generator) {
    var verb = function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    };
    var resume = function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    };
    var step = function step(r) {
        r.value instanceof $f078e74592755e8a$export$10c90e4f7922046c ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    };
    var fulfill = function fulfill(value) {
        resume("next", value);
    };
    var reject = function reject(value) {
        resume("throw", value);
    };
    var settle = function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    };
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
}
function $f078e74592755e8a$export$bbd80228419bb833(o) {
    var verb = function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: $f078e74592755e8a$export$10c90e4f7922046c(o[n](v)),
                done: false
            } : f ? f(v) : v;
        } : f;
    };
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
}
function $f078e74592755e8a$export$e3b29a3d6162315f(o) {
    var verb = function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    };
    var settle = function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    };
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof $f078e74592755e8a$export$19a8beecd37a4c45 === "function" ? $f078e74592755e8a$export$19a8beecd37a4c45(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
}
function $f078e74592755e8a$export$4fb47efe1390b86f(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var $f078e74592755e8a$var$__setModuleDefault = Object.create ? function __setModuleDefault(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function $f078e74592755e8a$export$c21735bcef00d192(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $f078e74592755e8a$export$45d3717a4c69092e(result, mod, k);
    }
    $f078e74592755e8a$var$__setModuleDefault(result, mod);
    return result;
}
function $f078e74592755e8a$export$da59b14a69baef04(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
}
function $f078e74592755e8a$export$d5dcaf168c640c35(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function $f078e74592755e8a$export$d40a35129aaff81f(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function $f078e74592755e8a$export$81fdc39f203e4e04(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}

});


parcelRequire.register("8woo2", function(module, exports) {
/* eslint-env browser */ /**
 * This is the web browser implementation of `debug()`.
 */ 
var $lFBFq = parcelRequire("lFBFq");
module.exports.formatArgs = $63443a92eb7cd9b4$var$formatArgs;
module.exports.save = $63443a92eb7cd9b4$var$save;
module.exports.load = $63443a92eb7cd9b4$var$load;
module.exports.useColors = $63443a92eb7cd9b4$var$useColors;
module.exports.storage = $63443a92eb7cd9b4$var$localstorage();
module.exports.destroy = function() {
    var warned = false;
    return function() {
        if (!warned) {
            warned = true;
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
    };
}();
/**
 * Colors.
 */ module.exports.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */ // eslint-disable-next-line complexity
function $63443a92eb7cd9b4$var$useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) return true;
    // Internet Explorer and Edge do not support colors.
    if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) return false;
    // Is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
    typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
    typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */ function $63443a92eb7cd9b4$var$formatArgs(args) {
    args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
    if (!this.useColors) return;
    var c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    // The final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    var index = 0;
    var lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, function(match) {
        if (match === "%%") return;
        index++;
        if (match === "%c") // We only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index;
    });
    args.splice(lastC, 0, c);
}
/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */ module.exports.log = console.debug || console.log || function() {};
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function $63443a92eb7cd9b4$var$save(namespaces) {
    try {
        if (namespaces) module.exports.storage.setItem("debug", namespaces);
        else module.exports.storage.removeItem("debug");
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function $63443a92eb7cd9b4$var$load() {
    var r;
    try {
        r = module.exports.storage.getItem("debug");
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof $lFBFq !== "undefined" && "env" in $lFBFq) r = undefined;
    return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */ function $63443a92eb7cd9b4$var$localstorage() {
    try {
        // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
        // The Browser also has localStorage in the global context.
        return localStorage;
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}

module.exports = (parcelRequire("14Ipi"))(module.exports);
var $63443a92eb7cd9b4$var$formatters = module.exports.formatters;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */ $63443a92eb7cd9b4$var$formatters.j = function(v) {
    try {
        return JSON.stringify(v);
    } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
    }
};

});
parcelRequire.register("14Ipi", function(module, exports) {
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */ 
var $jyjfM = parcelRequire("jyjfM");

function $0c889c7405e002e3$var$setup(env) {
    var selectColor = /**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/ function selectColor(namespace) {
        var hash = 0;
        for(var i = 0; i < namespace.length; i++){
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    };
    var extend = function extend(namespace, delimiter) {
        var newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
    };
    var enable = /**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/ function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        var i;
        var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        var len = split.length;
        for(i = 0; i < len; i++){
            if (!split[i]) continue;
            namespaces = split[i].replace(/\*/g, ".*?");
            if (namespaces[0] === "-") createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
            else createDebug.names.push(new RegExp("^" + namespaces + "$"));
        }
    };
    var disable = /**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/ function disable() {
        var namespaces = (0, $jyjfM.default)(createDebug.names.map(toNamespace)).concat((0, $jyjfM.default)(createDebug.skips.map(toNamespace).map(function(namespace) {
            return "-" + namespace;
        }))).join(",");
        createDebug.enable("");
        return namespaces;
    };
    var enabled = /**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/ function enabled(name) {
        if (name[name.length - 1] === "*") return true;
        var i;
        var len;
        for(i = 0, len = createDebug.skips.length; i < len; i++){
            if (createDebug.skips[i].test(name)) return false;
        }
        for(i = 0, len = createDebug.names.length; i < len; i++){
            if (createDebug.names[i].test(name)) return true;
        }
        return false;
    };
    var toNamespace = /**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/ function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
    };
    var coerce = /**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/ function coerce(val) {
        if (val instanceof Error) return val.stack || val.message;
        return val;
    };
    var destroy = /**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/ function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    };
    createDebug.debug = createDebug;
    createDebug["default"] = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = (parcelRequire("hWiXe"));
    createDebug.destroy = destroy;
    Object.keys(env).forEach(function(key) {
        createDebug[key] = env[key];
    });
    /**
	* The currently active debug mode names, and names to skip.
	*/ createDebug.names = [];
    createDebug.skips = [];
    /**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/ createDebug.formatters = {};
    createDebug.selectColor = selectColor;
    /**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/ function createDebug(namespace) {
        var prevTime;
        var enableOverride = null;
        var namespacesCache;
        var enabledCache;
        function debug() {
            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
                args[_key] = arguments[_key];
            }
            // Disabled?
            if (!debug.enabled) return;
            var self = debug;
            // Set `diff` timestamp
            var curr = Number(new Date());
            var ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== "string") // Anything else let's inspect with %O
            args.unshift("%O");
            // Apply any `formatters` transformations
            var index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
                // If we encounter an escaped % then don't increase the array index
                if (match === "%%") return "%";
                index++;
                var formatter = createDebug.formatters[format];
                if (typeof formatter === "function") {
                    var val = args[index];
                    match = formatter.call(self, val);
                    // Now we need to remove `args[index]` since it's inlined in the `format`
                    args.splice(index, 1);
                    index--;
                }
                return match;
            });
            // Apply env-specific formatting (colors, etc.)
            createDebug.formatArgs.call(self, args);
            var logFn = self.log || createDebug.log;
            logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.
        Object.defineProperty(debug, "enabled", {
            enumerable: true,
            configurable: false,
            get: function() {
                if (enableOverride !== null) return enableOverride;
                if (namespacesCache !== createDebug.namespaces) {
                    namespacesCache = createDebug.namespaces;
                    enabledCache = createDebug.enabled(namespace);
                }
                return enabledCache;
            },
            set: function(v) {
                enableOverride = v;
            }
        });
        // Env-specific initialization logic for debug instances
        if (typeof createDebug.init === "function") createDebug.init(debug);
        return debug;
    }
    createDebug.enable(createDebug.load());
    return createDebug;
}
module.exports = $0c889c7405e002e3$var$setup;

});
parcelRequire.register("jyjfM", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $2964a74df30860a5$export$2e2bcd8739ae039; });

var $c1raF = parcelRequire("c1raF");

var $lNiV5 = parcelRequire("lNiV5");

var $jii8b = parcelRequire("jii8b");

var $4XqZQ = parcelRequire("4XqZQ");
function $2964a74df30860a5$export$2e2bcd8739ae039(arr) {
    return (0, $c1raF.default)(arr) || (0, $lNiV5.default)(arr) || (0, $4XqZQ.default)(arr) || (0, $jii8b.default)();
}

});
parcelRequire.register("c1raF", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $1eff69d19102cef4$export$2e2bcd8739ae039; });

var $gxIMm = parcelRequire("gxIMm");
function $1eff69d19102cef4$export$2e2bcd8739ae039(arr) {
    if (Array.isArray(arr)) return (0, $gxIMm.default)(arr);
}

});
parcelRequire.register("gxIMm", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $8e10d5387f51b551$export$2e2bcd8739ae039; });
function $8e10d5387f51b551$export$2e2bcd8739ae039(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}

});


parcelRequire.register("lNiV5", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $ebec43925b514865$export$2e2bcd8739ae039; });
function $ebec43925b514865$export$2e2bcd8739ae039(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

});

parcelRequire.register("jii8b", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $3ba757588a0f03e6$export$2e2bcd8739ae039; });
function $3ba757588a0f03e6$export$2e2bcd8739ae039() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

});

parcelRequire.register("4XqZQ", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $6842459d5565b742$export$2e2bcd8739ae039; });

var $gxIMm = parcelRequire("gxIMm");
function $6842459d5565b742$export$2e2bcd8739ae039(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return (0, $gxIMm.default)(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $gxIMm.default)(o, minLen);
}

});


parcelRequire.register("hWiXe", function(module, exports) {
/**
 * Helpers.
 */ 
var $lT21Y = parcelRequire("lT21Y");
var $d0f68e5f7549fa33$var$s = 1000;
var $d0f68e5f7549fa33$var$m = $d0f68e5f7549fa33$var$s * 60;
var $d0f68e5f7549fa33$var$h = $d0f68e5f7549fa33$var$m * 60;
var $d0f68e5f7549fa33$var$d = $d0f68e5f7549fa33$var$h * 24;
var $d0f68e5f7549fa33$var$w = $d0f68e5f7549fa33$var$d * 7;
var $d0f68e5f7549fa33$var$y = $d0f68e5f7549fa33$var$d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */ module.exports = function(val, options) {
    options = options || {};
    var type = typeof val === "undefined" ? "undefined" : (0, $lT21Y.default)(val);
    if (type === "string" && val.length > 0) return $d0f68e5f7549fa33$var$parse(val);
    else if (type === "number" && isFinite(val)) return options["long"] ? $d0f68e5f7549fa33$var$fmtLong(val) : $d0f68e5f7549fa33$var$fmtShort(val);
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */ function $d0f68e5f7549fa33$var$parse(str) {
    str = String(str);
    if (str.length > 100) return;
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) return;
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch(type){
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
            return n * $d0f68e5f7549fa33$var$y;
        case "weeks":
        case "week":
        case "w":
            return n * $d0f68e5f7549fa33$var$w;
        case "days":
        case "day":
        case "d":
            return n * $d0f68e5f7549fa33$var$d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
            return n * $d0f68e5f7549fa33$var$h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
            return n * $d0f68e5f7549fa33$var$m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
            return n * $d0f68e5f7549fa33$var$s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
            return n;
        default:
            return undefined;
    }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function $d0f68e5f7549fa33$var$fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= $d0f68e5f7549fa33$var$d) return Math.round(ms / $d0f68e5f7549fa33$var$d) + "d";
    if (msAbs >= $d0f68e5f7549fa33$var$h) return Math.round(ms / $d0f68e5f7549fa33$var$h) + "h";
    if (msAbs >= $d0f68e5f7549fa33$var$m) return Math.round(ms / $d0f68e5f7549fa33$var$m) + "m";
    if (msAbs >= $d0f68e5f7549fa33$var$s) return Math.round(ms / $d0f68e5f7549fa33$var$s) + "s";
    return ms + "ms";
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function $d0f68e5f7549fa33$var$fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= $d0f68e5f7549fa33$var$d) return $d0f68e5f7549fa33$var$plural(ms, msAbs, $d0f68e5f7549fa33$var$d, "day");
    if (msAbs >= $d0f68e5f7549fa33$var$h) return $d0f68e5f7549fa33$var$plural(ms, msAbs, $d0f68e5f7549fa33$var$h, "hour");
    if (msAbs >= $d0f68e5f7549fa33$var$m) return $d0f68e5f7549fa33$var$plural(ms, msAbs, $d0f68e5f7549fa33$var$m, "minute");
    if (msAbs >= $d0f68e5f7549fa33$var$s) return $d0f68e5f7549fa33$var$plural(ms, msAbs, $d0f68e5f7549fa33$var$s, "second");
    return ms + " ms";
}
/**
 * Pluralization helper.
 */ function $d0f68e5f7549fa33$var$plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
}

});



parcelRequire.register("g3DWB", function(module, exports) {

var $d92bh = parcelRequire("d92bh");

var $883e7 = parcelRequire("883e7");

var $6KwX4 = parcelRequire("6KwX4");

var $jWEoH = parcelRequire("jWEoH");

var $5DVRw = parcelRequire("5DVRw");

var $eJwY4 = parcelRequire("eJwY4");

var $5iHVL = parcelRequire("5iHVL");

var $dsnGd = parcelRequire("dsnGd");

var $bb0be93a6b39da3e$var$debug = (parcelRequire("8woo2"))("mqtt-packet:parser");
var $bb0be93a6b39da3e$var$Parser = /*#__PURE__*/ function(EventEmitter) {
    "use strict";
    (0, $6KwX4.default)(Parser, EventEmitter);
    var _super = (0, $jWEoH.default)(Parser);
    function Parser() {
        (0, $d92bh.default)(this, Parser);
        var _this;
        _this = _super.call(this);
        _this.parser = _this.constructor.parser;
        return _this;
    }
    (0, $883e7.default)(Parser, [
        {
            key: "_resetState",
            value: function _resetState() {
                $bb0be93a6b39da3e$var$debug("_resetState: resetting packet, error, _list, and _stateCounter");
                this.packet = new $5iHVL();
                this.error = null;
                this._list = $5DVRw();
                this._stateCounter = 0;
            }
        },
        {
            key: "parse",
            value: function parse(buf) {
                if (this.error) this._resetState();
                this._list.append(buf);
                $bb0be93a6b39da3e$var$debug("parse: current state: %s", this._states[this._stateCounter]);
                while((this.packet.length !== -1 || this._list.length > 0) && this[this._states[this._stateCounter]]() && !this.error){
                    this._stateCounter++;
                    $bb0be93a6b39da3e$var$debug("parse: state complete. _stateCounter is now: %d", this._stateCounter);
                    $bb0be93a6b39da3e$var$debug("parse: packet.length: %d, buffer list length: %d", this.packet.length, this._list.length);
                    if (this._stateCounter >= this._states.length) this._stateCounter = 0;
                }
                $bb0be93a6b39da3e$var$debug("parse: exited while loop. packet: %d, buffer list length: %d", this.packet.length, this._list.length);
                return this._list.length;
            }
        },
        {
            key: "_parseHeader",
            value: function _parseHeader() {
                // There is at least one byte in the buffer
                var zero = this._list.readUInt8(0);
                this.packet.cmd = $dsnGd.types[zero >> $dsnGd.CMD_SHIFT];
                this.packet.retain = (zero & $dsnGd.RETAIN_MASK) !== 0;
                this.packet.qos = zero >> $dsnGd.QOS_SHIFT & $dsnGd.QOS_MASK;
                this.packet.dup = (zero & $dsnGd.DUP_MASK) !== 0;
                $bb0be93a6b39da3e$var$debug("_parseHeader: packet: %o", this.packet);
                this._list.consume(1);
                return true;
            }
        },
        {
            key: "_parseLength",
            value: function _parseLength() {
                // There is at least one byte in the list
                var result = this._parseVarByteNum(true);
                if (result) {
                    this.packet.length = result.value;
                    this._list.consume(result.bytes);
                }
                $bb0be93a6b39da3e$var$debug("_parseLength %d", result.value);
                return !!result;
            }
        },
        {
            key: "_parsePayload",
            value: function _parsePayload() {
                $bb0be93a6b39da3e$var$debug("_parsePayload: payload %O", this._list);
                var result = false;
                // Do we have a payload? Do we have enough data to complete the payload?
                // PINGs have no payload
                if (this.packet.length === 0 || this._list.length >= this.packet.length) {
                    this._pos = 0;
                    switch(this.packet.cmd){
                        case "connect":
                            this._parseConnect();
                            break;
                        case "connack":
                            this._parseConnack();
                            break;
                        case "publish":
                            this._parsePublish();
                            break;
                        case "puback":
                        case "pubrec":
                        case "pubrel":
                        case "pubcomp":
                            this._parseConfirmation();
                            break;
                        case "subscribe":
                            this._parseSubscribe();
                            break;
                        case "suback":
                            this._parseSuback();
                            break;
                        case "unsubscribe":
                            this._parseUnsubscribe();
                            break;
                        case "unsuback":
                            this._parseUnsuback();
                            break;
                        case "pingreq":
                        case "pingresp":
                            break;
                        case "disconnect":
                            this._parseDisconnect();
                            break;
                        case "auth":
                            this._parseAuth();
                            break;
                        default:
                            this._emitError(new Error("Not supported"));
                    }
                    result = true;
                }
                $bb0be93a6b39da3e$var$debug("_parsePayload complete result: %s", result);
                return result;
            }
        },
        {
            key: "_parseConnect",
            value: function _parseConnect() {
                $bb0be93a6b39da3e$var$debug("_parseConnect");
                var topic // Will topic
                ;
                var payload // Will payload
                ;
                var password // Password
                ;
                var username // Username
                ;
                var flags = {};
                var packet = this.packet;
                // Parse protocolId
                var protocolId = this._parseString();
                if (protocolId === null) return this._emitError(new Error("Cannot parse protocolId"));
                if (protocolId !== "MQTT" && protocolId !== "MQIsdp") return this._emitError(new Error("Invalid protocolId"));
                packet.protocolId = protocolId;
                // Parse constants version number
                if (this._pos >= this._list.length) return this._emitError(new Error("Packet too short"));
                packet.protocolVersion = this._list.readUInt8(this._pos);
                if (packet.protocolVersion >= 128) {
                    packet.bridgeMode = true;
                    packet.protocolVersion = packet.protocolVersion - 128;
                }
                if (packet.protocolVersion !== 3 && packet.protocolVersion !== 4 && packet.protocolVersion !== 5) return this._emitError(new Error("Invalid protocol version"));
                this._pos++;
                if (this._pos >= this._list.length) return this._emitError(new Error("Packet too short"));
                // Parse connect flags
                flags.username = this._list.readUInt8(this._pos) & $dsnGd.USERNAME_MASK;
                flags.password = this._list.readUInt8(this._pos) & $dsnGd.PASSWORD_MASK;
                flags.will = this._list.readUInt8(this._pos) & $dsnGd.WILL_FLAG_MASK;
                if (flags.will) {
                    packet.will = {};
                    packet.will.retain = (this._list.readUInt8(this._pos) & $dsnGd.WILL_RETAIN_MASK) !== 0;
                    packet.will.qos = (this._list.readUInt8(this._pos) & $dsnGd.WILL_QOS_MASK) >> $dsnGd.WILL_QOS_SHIFT;
                }
                packet.clean = (this._list.readUInt8(this._pos) & $dsnGd.CLEAN_SESSION_MASK) !== 0;
                this._pos++;
                // Parse keepalive
                packet.keepalive = this._parseNum();
                if (packet.keepalive === -1) return this._emitError(new Error("Packet too short"));
                // parse properties
                if (packet.protocolVersion === 5) {
                    var properties = this._parseProperties();
                    if (Object.getOwnPropertyNames(properties).length) packet.properties = properties;
                }
                // Parse clientId
                var clientId = this._parseString();
                if (clientId === null) return this._emitError(new Error("Packet too short"));
                packet.clientId = clientId;
                $bb0be93a6b39da3e$var$debug("_parseConnect: packet.clientId: %s", packet.clientId);
                if (flags.will) {
                    if (packet.protocolVersion === 5) {
                        var willProperties = this._parseProperties();
                        if (Object.getOwnPropertyNames(willProperties).length) packet.will.properties = willProperties;
                    }
                    // Parse will topic
                    topic = this._parseString();
                    if (topic === null) return this._emitError(new Error("Cannot parse will topic"));
                    packet.will.topic = topic;
                    $bb0be93a6b39da3e$var$debug("_parseConnect: packet.will.topic: %s", packet.will.topic);
                    // Parse will payload
                    payload = this._parseBuffer();
                    if (payload === null) return this._emitError(new Error("Cannot parse will payload"));
                    packet.will.payload = payload;
                    $bb0be93a6b39da3e$var$debug("_parseConnect: packet.will.paylaod: %s", packet.will.payload);
                }
                // Parse username
                if (flags.username) {
                    username = this._parseString();
                    if (username === null) return this._emitError(new Error("Cannot parse username"));
                    packet.username = username;
                    $bb0be93a6b39da3e$var$debug("_parseConnect: packet.username: %s", packet.username);
                }
                // Parse password
                if (flags.password) {
                    password = this._parseBuffer();
                    if (password === null) return this._emitError(new Error("Cannot parse password"));
                    packet.password = password;
                }
                // need for right parse auth packet and self set up
                this.settings = packet;
                $bb0be93a6b39da3e$var$debug("_parseConnect: complete");
                return packet;
            }
        },
        {
            key: "_parseConnack",
            value: function _parseConnack() {
                $bb0be93a6b39da3e$var$debug("_parseConnack");
                var packet = this.packet;
                if (this._list.length < 1) return null;
                packet.sessionPresent = !!(this._list.readUInt8(this._pos++) & $dsnGd.SESSIONPRESENT_MASK);
                if (this.settings.protocolVersion === 5) {
                    if (this._list.length >= 2) packet.reasonCode = this._list.readUInt8(this._pos++);
                    else packet.reasonCode = 0;
                } else {
                    if (this._list.length < 2) return null;
                    packet.returnCode = this._list.readUInt8(this._pos++);
                }
                if (packet.returnCode === -1 || packet.reasonCode === -1) return this._emitError(new Error("Cannot parse return code"));
                // mqtt 5 properties
                if (this.settings.protocolVersion === 5) {
                    var properties = this._parseProperties();
                    if (Object.getOwnPropertyNames(properties).length) packet.properties = properties;
                }
                $bb0be93a6b39da3e$var$debug("_parseConnack: complete");
            }
        },
        {
            key: "_parsePublish",
            value: function _parsePublish() {
                $bb0be93a6b39da3e$var$debug("_parsePublish");
                var packet = this.packet;
                packet.topic = this._parseString();
                if (packet.topic === null) return this._emitError(new Error("Cannot parse topic"));
                // Parse messageId
                if (packet.qos > 0) {
                    if (!this._parseMessageId()) return;
                }
                // Properties mqtt 5
                if (this.settings.protocolVersion === 5) {
                    var properties = this._parseProperties();
                    if (Object.getOwnPropertyNames(properties).length) packet.properties = properties;
                }
                packet.payload = this._list.slice(this._pos, packet.length);
                $bb0be93a6b39da3e$var$debug("_parsePublish: payload from buffer list: %o", packet.payload);
            }
        },
        {
            key: "_parseSubscribe",
            value: function _parseSubscribe() {
                $bb0be93a6b39da3e$var$debug("_parseSubscribe");
                var packet = this.packet;
                var topic;
                var options;
                var qos;
                var rh;
                var rap;
                var nl;
                var subscription;
                if (packet.qos !== 1) return this._emitError(new Error("Wrong subscribe header"));
                packet.subscriptions = [];
                if (!this._parseMessageId()) return;
                // Properties mqtt 5
                if (this.settings.protocolVersion === 5) {
                    var properties = this._parseProperties();
                    if (Object.getOwnPropertyNames(properties).length) packet.properties = properties;
                }
                while(this._pos < packet.length){
                    // Parse topic
                    topic = this._parseString();
                    if (topic === null) return this._emitError(new Error("Cannot parse topic"));
                    if (this._pos >= packet.length) return this._emitError(new Error("Malformed Subscribe Payload"));
                    options = this._parseByte();
                    qos = options & $dsnGd.SUBSCRIBE_OPTIONS_QOS_MASK;
                    nl = (options >> $dsnGd.SUBSCRIBE_OPTIONS_NL_SHIFT & $dsnGd.SUBSCRIBE_OPTIONS_NL_MASK) !== 0;
                    rap = (options >> $dsnGd.SUBSCRIBE_OPTIONS_RAP_SHIFT & $dsnGd.SUBSCRIBE_OPTIONS_RAP_MASK) !== 0;
                    rh = options >> $dsnGd.SUBSCRIBE_OPTIONS_RH_SHIFT & $dsnGd.SUBSCRIBE_OPTIONS_RH_MASK;
                    subscription = {
                        topic: topic,
                        qos: qos
                    };
                    // mqtt 5 options
                    if (this.settings.protocolVersion === 5) {
                        subscription.nl = nl;
                        subscription.rap = rap;
                        subscription.rh = rh;
                    } else if (this.settings.bridgeMode) {
                        subscription.rh = 0;
                        subscription.rap = true;
                        subscription.nl = true;
                    }
                    // Push pair to subscriptions
                    $bb0be93a6b39da3e$var$debug("_parseSubscribe: push subscription `%s` to subscription", subscription);
                    packet.subscriptions.push(subscription);
                }
            }
        },
        {
            key: "_parseSuback",
            value: function _parseSuback() {
                $bb0be93a6b39da3e$var$debug("_parseSuback");
                var packet = this.packet;
                this.packet.granted = [];
                if (!this._parseMessageId()) return;
                // Properties mqtt 5
                if (this.settings.protocolVersion === 5) {
                    var properties = this._parseProperties();
                    if (Object.getOwnPropertyNames(properties).length) packet.properties = properties;
                }
                // Parse granted QoSes
                while(this._pos < this.packet.length)this.packet.granted.push(this._list.readUInt8(this._pos++));
            }
        },
        {
            key: "_parseUnsubscribe",
            value: function _parseUnsubscribe() {
                $bb0be93a6b39da3e$var$debug("_parseUnsubscribe");
                var packet = this.packet;
                packet.unsubscriptions = [];
                // Parse messageId
                if (!this._parseMessageId()) return;
                // Properties mqtt 5
                if (this.settings.protocolVersion === 5) {
                    var properties = this._parseProperties();
                    if (Object.getOwnPropertyNames(properties).length) packet.properties = properties;
                }
                while(this._pos < packet.length){
                    // Parse topic
                    var topic = this._parseString();
                    if (topic === null) return this._emitError(new Error("Cannot parse topic"));
                    // Push topic to unsubscriptions
                    $bb0be93a6b39da3e$var$debug("_parseUnsubscribe: push topic `%s` to unsubscriptions", topic);
                    packet.unsubscriptions.push(topic);
                }
            }
        },
        {
            key: "_parseUnsuback",
            value: function _parseUnsuback() {
                $bb0be93a6b39da3e$var$debug("_parseUnsuback");
                var packet = this.packet;
                if (!this._parseMessageId()) return this._emitError(new Error("Cannot parse messageId"));
                // Properties mqtt 5
                if (this.settings.protocolVersion === 5) {
                    var properties = this._parseProperties();
                    if (Object.getOwnPropertyNames(properties).length) packet.properties = properties;
                    // Parse granted QoSes
                    packet.granted = [];
                    while(this._pos < this.packet.length)this.packet.granted.push(this._list.readUInt8(this._pos++));
                }
            }
        },
        {
            // parse packets like puback, pubrec, pubrel, pubcomp
            key: "_parseConfirmation",
            value: function _parseConfirmation() {
                $bb0be93a6b39da3e$var$debug("_parseConfirmation: packet.cmd: `%s`", this.packet.cmd);
                var packet = this.packet;
                this._parseMessageId();
                if (this.settings.protocolVersion === 5) {
                    if (packet.length > 2) {
                        // response code
                        packet.reasonCode = this._parseByte();
                        $bb0be93a6b39da3e$var$debug("_parseConfirmation: packet.reasonCode `%d`", packet.reasonCode);
                    } else packet.reasonCode = 0;
                    if (packet.length > 3) {
                        // properies mqtt 5
                        var properties = this._parseProperties();
                        if (Object.getOwnPropertyNames(properties).length) packet.properties = properties;
                    }
                }
                return true;
            }
        },
        {
            // parse disconnect packet
            key: "_parseDisconnect",
            value: function _parseDisconnect() {
                var packet = this.packet;
                $bb0be93a6b39da3e$var$debug("_parseDisconnect");
                if (this.settings.protocolVersion === 5) {
                    // response code
                    if (this._list.length > 0) packet.reasonCode = this._parseByte();
                    else packet.reasonCode = 0;
                    // properies mqtt 5
                    var properties = this._parseProperties();
                    if (Object.getOwnPropertyNames(properties).length) packet.properties = properties;
                }
                $bb0be93a6b39da3e$var$debug("_parseDisconnect result: true");
                return true;
            }
        },
        {
            // parse auth packet
            key: "_parseAuth",
            value: function _parseAuth() {
                $bb0be93a6b39da3e$var$debug("_parseAuth");
                var packet = this.packet;
                if (this.settings.protocolVersion !== 5) return this._emitError(new Error("Not supported auth packet for this version MQTT"));
                // response code
                packet.reasonCode = this._parseByte();
                // properies mqtt 5
                var properties = this._parseProperties();
                if (Object.getOwnPropertyNames(properties).length) packet.properties = properties;
                $bb0be93a6b39da3e$var$debug("_parseAuth: result: true");
                return true;
            }
        },
        {
            key: "_parseMessageId",
            value: function _parseMessageId() {
                var packet = this.packet;
                packet.messageId = this._parseNum();
                if (packet.messageId === null) {
                    this._emitError(new Error("Cannot parse messageId"));
                    return false;
                }
                $bb0be93a6b39da3e$var$debug("_parseMessageId: packet.messageId %d", packet.messageId);
                return true;
            }
        },
        {
            key: "_parseString",
            value: function _parseString(maybeBuffer) {
                var length = this._parseNum();
                var end = length + this._pos;
                if (length === -1 || end > this._list.length || end > this.packet.length) return null;
                var result = this._list.toString("utf8", this._pos, end);
                this._pos += length;
                $bb0be93a6b39da3e$var$debug("_parseString: result: %s", result);
                return result;
            }
        },
        {
            key: "_parseStringPair",
            value: function _parseStringPair() {
                $bb0be93a6b39da3e$var$debug("_parseStringPair");
                return {
                    name: this._parseString(),
                    value: this._parseString()
                };
            }
        },
        {
            key: "_parseBuffer",
            value: function _parseBuffer() {
                var length = this._parseNum();
                var end = length + this._pos;
                if (length === -1 || end > this._list.length || end > this.packet.length) return null;
                var result = this._list.slice(this._pos, end);
                this._pos += length;
                $bb0be93a6b39da3e$var$debug("_parseBuffer: result: %o", result);
                return result;
            }
        },
        {
            key: "_parseNum",
            value: function _parseNum() {
                if (this._list.length - this._pos < 2) return -1;
                var result = this._list.readUInt16BE(this._pos);
                this._pos += 2;
                $bb0be93a6b39da3e$var$debug("_parseNum: result: %s", result);
                return result;
            }
        },
        {
            key: "_parse4ByteNum",
            value: function _parse4ByteNum() {
                if (this._list.length - this._pos < 4) return -1;
                var result = this._list.readUInt32BE(this._pos);
                this._pos += 4;
                $bb0be93a6b39da3e$var$debug("_parse4ByteNum: result: %s", result);
                return result;
            }
        },
        {
            key: "_parseVarByteNum",
            value: function _parseVarByteNum(fullInfoFlag) {
                $bb0be93a6b39da3e$var$debug("_parseVarByteNum");
                var maxBytes = 4;
                var bytes = 0;
                var mul = 1;
                var value = 0;
                var result = false;
                var current;
                var padding = this._pos ? this._pos : 0;
                while(bytes < maxBytes && padding + bytes < this._list.length){
                    current = this._list.readUInt8(padding + bytes++);
                    value += mul * (current & $dsnGd.VARBYTEINT_MASK);
                    mul *= 0x80;
                    if ((current & $dsnGd.VARBYTEINT_FIN_MASK) === 0) {
                        result = true;
                        break;
                    }
                    if (this._list.length <= bytes) break;
                }
                if (!result && bytes === maxBytes && this._list.length >= bytes) this._emitError(new Error("Invalid variable byte integer"));
                if (padding) this._pos += bytes;
                result = result ? fullInfoFlag ? {
                    bytes: bytes,
                    value: value
                } : value : false;
                $bb0be93a6b39da3e$var$debug("_parseVarByteNum: result: %o", result);
                return result;
            }
        },
        {
            key: "_parseByte",
            value: function _parseByte() {
                var result;
                if (this._pos < this._list.length) {
                    result = this._list.readUInt8(this._pos);
                    this._pos++;
                }
                $bb0be93a6b39da3e$var$debug("_parseByte: result: %o", result);
                return result;
            }
        },
        {
            key: "_parseByType",
            value: function _parseByType(type) {
                $bb0be93a6b39da3e$var$debug("_parseByType: type: %s", type);
                switch(type){
                    case "byte":
                        return this._parseByte() !== 0;
                    case "int8":
                        return this._parseByte();
                    case "int16":
                        return this._parseNum();
                    case "int32":
                        return this._parse4ByteNum();
                    case "var":
                        return this._parseVarByteNum();
                    case "string":
                        return this._parseString();
                    case "pair":
                        return this._parseStringPair();
                    case "binary":
                        return this._parseBuffer();
                }
            }
        },
        {
            key: "_parseProperties",
            value: function _parseProperties() {
                $bb0be93a6b39da3e$var$debug("_parseProperties");
                var length = this._parseVarByteNum();
                var start = this._pos;
                var end = start + length;
                var result = {};
                while(this._pos < end){
                    var type = this._parseByte();
                    if (!type) {
                        this._emitError(new Error("Cannot parse property code type"));
                        return false;
                    }
                    var name = $dsnGd.propertiesCodes[type];
                    if (!name) {
                        this._emitError(new Error("Unknown property"));
                        return false;
                    }
                    // user properties process
                    if (name === "userProperties") {
                        if (!result[name]) result[name] = Object.create(null);
                        var currentUserProperty = this._parseByType($dsnGd.propertiesTypes[name]);
                        if (result[name][currentUserProperty.name]) {
                            if (Array.isArray(result[name][currentUserProperty.name])) result[name][currentUserProperty.name].push(currentUserProperty.value);
                            else {
                                var currentValue = result[name][currentUserProperty.name];
                                result[name][currentUserProperty.name] = [
                                    currentValue
                                ];
                                result[name][currentUserProperty.name].push(currentUserProperty.value);
                            }
                        } else result[name][currentUserProperty.name] = currentUserProperty.value;
                        continue;
                    }
                    if (result[name]) {
                        if (Array.isArray(result[name])) result[name].push(this._parseByType($dsnGd.propertiesTypes[name]));
                        else {
                            result[name] = [
                                result[name]
                            ];
                            result[name].push(this._parseByType($dsnGd.propertiesTypes[name]));
                        }
                    } else result[name] = this._parseByType($dsnGd.propertiesTypes[name]);
                }
                return result;
            }
        },
        {
            key: "_newPacket",
            value: function _newPacket() {
                $bb0be93a6b39da3e$var$debug("_newPacket");
                if (this.packet) {
                    this._list.consume(this.packet.length);
                    $bb0be93a6b39da3e$var$debug("_newPacket: parser emit packet: packet.cmd: %s, packet.payload: %s, packet.length: %d", this.packet.cmd, this.packet.payload, this.packet.length);
                    this.emit("packet", this.packet);
                }
                $bb0be93a6b39da3e$var$debug("_newPacket: new packet");
                this.packet = new $5iHVL();
                this._pos = 0;
                return true;
            }
        },
        {
            key: "_emitError",
            value: function _emitError(err) {
                $bb0be93a6b39da3e$var$debug("_emitError");
                this.error = err;
                this.emit("error", err);
            }
        }
    ], [
        {
            key: "parser",
            value: function parser(opt) {
                if (!(this instanceof Parser)) return new Parser().parser(opt);
                this.settings = opt || {};
                this._states = [
                    "_parseHeader",
                    "_parseLength",
                    "_parsePayload",
                    "_newPacket"
                ];
                this._resetState();
                return this;
            }
        }
    ]);
    return Parser;
}($eJwY4);
module.exports = $bb0be93a6b39da3e$var$Parser;

});
parcelRequire.register("d92bh", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $ce235bfd42c023c6$export$2e2bcd8739ae039; });
function $ce235bfd42c023c6$export$2e2bcd8739ae039(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

});

parcelRequire.register("883e7", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $0f9bb2854e0b6ced$export$2e2bcd8739ae039; });
function $0f9bb2854e0b6ced$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function $0f9bb2854e0b6ced$export$2e2bcd8739ae039(Constructor, protoProps, staticProps) {
    if (protoProps) $0f9bb2854e0b6ced$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $0f9bb2854e0b6ced$var$_defineProperties(Constructor, staticProps);
    return Constructor;
}

});

parcelRequire.register("6KwX4", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $51d0ab1f8eb9653b$export$2e2bcd8739ae039; });

var $9H3Q6 = parcelRequire("9H3Q6");
function $51d0ab1f8eb9653b$export$2e2bcd8739ae039(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) (0, $9H3Q6.default)(subClass, superClass);
}

});
parcelRequire.register("9H3Q6", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $15117b588409f17b$export$2e2bcd8739ae039; });
function $15117b588409f17b$var$setPrototypeOf(o, p) {
    $15117b588409f17b$var$setPrototypeOf = Object.setPrototypeOf || function setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return $15117b588409f17b$var$setPrototypeOf(o, p);
}
function $15117b588409f17b$export$2e2bcd8739ae039(o, p) {
    return $15117b588409f17b$var$setPrototypeOf(o, p);
}

});


parcelRequire.register("jWEoH", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $a1af4fcb2eab459c$export$2e2bcd8739ae039; });

var $2e7gB = parcelRequire("2e7gB");

var $kuczW = parcelRequire("kuczW");

var $eZVQB = parcelRequire("eZVQB");
function $a1af4fcb2eab459c$export$2e2bcd8739ae039(Derived) {
    var hasNativeReflectConstruct = (0, $2e7gB.default)();
    return function _createSuperInternal() {
        var Super = (0, $kuczW.default)(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = (0, $kuczW.default)(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return (0, $eZVQB.default)(this, result);
    };
}

});
parcelRequire.register("2e7gB", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $9e33d31b6be93909$export$2e2bcd8739ae039; });
function $9e33d31b6be93909$export$2e2bcd8739ae039() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}

});

parcelRequire.register("kuczW", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $937f20c5c873ea9a$export$2e2bcd8739ae039; });
function $937f20c5c873ea9a$var$getPrototypeOf(o) {
    $937f20c5c873ea9a$var$getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return $937f20c5c873ea9a$var$getPrototypeOf(o);
}
function $937f20c5c873ea9a$export$2e2bcd8739ae039(o) {
    return $937f20c5c873ea9a$var$getPrototypeOf(o);
}

});

parcelRequire.register("eZVQB", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $f1b683e80a2eb18f$export$2e2bcd8739ae039; });

var $iDws5 = parcelRequire("iDws5");

var $lT21Y = parcelRequire("lT21Y");
function $f1b683e80a2eb18f$export$2e2bcd8739ae039(self, call) {
    if (call && ((0, $lT21Y.default)(call) === "object" || typeof call === "function")) return call;
    return (0, $iDws5.default)(self);
}

});
parcelRequire.register("iDws5", function(module, exports) {

$parcel$export(module.exports, "default", function () { return $594ba63cbe9964fe$export$2e2bcd8739ae039; });
function $594ba63cbe9964fe$export$2e2bcd8739ae039(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}

});



parcelRequire.register("5DVRw", function(module, exports) {
"use strict";

var $7MMDB = parcelRequire("7MMDB");
var $41bd7a872aa69d29$require$DuplexStream = $7MMDB.Duplex;

var $ScPjF = parcelRequire("ScPjF");

var $2TkPX = parcelRequire("2TkPX");
function $41bd7a872aa69d29$var$BufferListStream(callback) {
    if (!(this instanceof $41bd7a872aa69d29$var$BufferListStream)) return new $41bd7a872aa69d29$var$BufferListStream(callback);
    if (typeof callback === "function") {
        this._callback = callback;
        var piper = (function piper(err) {
            if (this._callback) {
                this._callback(err);
                this._callback = null;
            }
        }).bind(this);
        this.on("pipe", function onPipe(src) {
            src.on("error", piper);
        });
        this.on("unpipe", function onUnpipe(src) {
            src.removeListener("error", piper);
        });
        callback = null;
    }
    $2TkPX._init.call(this, callback);
    $41bd7a872aa69d29$require$DuplexStream.call(this);
}
$ScPjF($41bd7a872aa69d29$var$BufferListStream, $41bd7a872aa69d29$require$DuplexStream);
Object.assign($41bd7a872aa69d29$var$BufferListStream.prototype, $2TkPX.prototype);
$41bd7a872aa69d29$var$BufferListStream.prototype._new = function _new(callback) {
    return new $41bd7a872aa69d29$var$BufferListStream(callback);
};
$41bd7a872aa69d29$var$BufferListStream.prototype._write = function _write(buf, encoding, callback) {
    this._appendBuffer(buf);
    if (typeof callback === "function") callback();
};
$41bd7a872aa69d29$var$BufferListStream.prototype._read = function _read(size) {
    if (!this.length) return this.push(null);
    size = Math.min(size, this.length);
    this.push(this.slice(0, size));
    this.consume(size);
};
$41bd7a872aa69d29$var$BufferListStream.prototype.end = function end(chunk) {
    $41bd7a872aa69d29$require$DuplexStream.prototype.end.call(this, chunk);
    if (this._callback) {
        this._callback(null, this.slice());
        this._callback = null;
    }
};
$41bd7a872aa69d29$var$BufferListStream.prototype._destroy = function _destroy(err, cb) {
    this._bufs.length = 0;
    this.length = 0;
    cb(err);
};
$41bd7a872aa69d29$var$BufferListStream.prototype._isBufferList = function _isBufferList(b) {
    return b instanceof $41bd7a872aa69d29$var$BufferListStream || b instanceof $2TkPX || $41bd7a872aa69d29$var$BufferListStream.isBufferList(b);
};
$41bd7a872aa69d29$var$BufferListStream.isBufferList = $2TkPX.isBufferList;
module.exports = $41bd7a872aa69d29$var$BufferListStream;
module.exports.BufferListStream = $41bd7a872aa69d29$var$BufferListStream;
module.exports.BufferList = $2TkPX;

});
parcelRequire.register("7MMDB", function(module, exports) {

exports = module.exports = (parcelRequire("1NTeN"));
exports.Stream = exports;
exports.Readable = exports;

exports.Writable = (parcelRequire("03ivy"));

exports.Duplex = (parcelRequire("5Cjcb"));

exports.Transform = (parcelRequire("cO4fX"));

exports.PassThrough = (parcelRequire("j8SMH"));

exports.finished = (parcelRequire("kYxlB"));

exports.pipeline = (parcelRequire("hwpd2"));

});
parcelRequire.register("1NTeN", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var $lFBFq = parcelRequire("lFBFq");
"use strict";
module.exports = $1505371258dd2e12$var$Readable;
/*<replacement>*/ var $1505371258dd2e12$var$Duplex;
/*</replacement>*/ $1505371258dd2e12$var$Readable.ReadableState = $1505371258dd2e12$var$ReadableState;

var $eJwY4 = parcelRequire("eJwY4");
var $1505371258dd2e12$require$EE = $eJwY4.EventEmitter;
var $1505371258dd2e12$var$EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};

var $ioHK4 = parcelRequire("ioHK4");

var $kgUAE = parcelRequire("kgUAE");
var $1505371258dd2e12$require$Buffer = $kgUAE.Buffer;
var $1505371258dd2e12$var$OurUint8Array = (typeof $parcel$global !== "undefined" ? $parcel$global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function $1505371258dd2e12$var$_uint8ArrayToBuffer(chunk) {
    return $1505371258dd2e12$require$Buffer.from(chunk);
}
function $1505371258dd2e12$var$_isUint8Array(obj) {
    return $1505371258dd2e12$require$Buffer.isBuffer(obj) || obj instanceof $1505371258dd2e12$var$OurUint8Array;
}

var $l9xBz = parcelRequire("l9xBz");
var $1505371258dd2e12$var$debug;
if ($l9xBz && $l9xBz.debuglog) $1505371258dd2e12$var$debug = $l9xBz.debuglog("stream");
else $1505371258dd2e12$var$debug = function debug() {};

var $6cCIi = parcelRequire("6cCIi");

var $ZJ19m = parcelRequire("ZJ19m");

var $22phb = parcelRequire("22phb");
var $1505371258dd2e12$var$getHighWaterMark = $22phb.getHighWaterMark;

var $b2l9e = parcelRequire("b2l9e");
var $1505371258dd2e12$require$_require$codes = $b2l9e.codes;
var $1505371258dd2e12$var$ERR_INVALID_ARG_TYPE = $1505371258dd2e12$require$_require$codes.ERR_INVALID_ARG_TYPE, $1505371258dd2e12$var$ERR_STREAM_PUSH_AFTER_EOF = $1505371258dd2e12$require$_require$codes.ERR_STREAM_PUSH_AFTER_EOF, $1505371258dd2e12$var$ERR_METHOD_NOT_IMPLEMENTED = $1505371258dd2e12$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $1505371258dd2e12$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT = $1505371258dd2e12$require$_require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
// Lazy loaded to improve the startup performance.
var $1505371258dd2e12$var$StringDecoder;
var $1505371258dd2e12$var$createReadableStreamAsyncIterator;
var $1505371258dd2e12$var$from;

(parcelRequire("ScPjF"))($1505371258dd2e12$var$Readable, $ioHK4);
var $1505371258dd2e12$var$errorOrDestroy = $ZJ19m.errorOrDestroy;
var $1505371258dd2e12$var$kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function $1505371258dd2e12$var$prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}


function $1505371258dd2e12$var$ReadableState(options, stream, isDuplex) {
    $1505371258dd2e12$var$Duplex = $1505371258dd2e12$var$Duplex || (parcelRequire("5Cjcb"));
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $1505371258dd2e12$var$Duplex;
    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = $1505371258dd2e12$var$getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new $6cCIi();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true;
    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy;
    // has it been destroyed
    this.destroyed = false;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;
    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!$1505371258dd2e12$var$StringDecoder) $1505371258dd2e12$var$StringDecoder = (parcelRequire("i1uXD")).StringDecoder;
        this.decoder = new $1505371258dd2e12$var$StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}

function $1505371258dd2e12$var$Readable(options) {
    $1505371258dd2e12$var$Duplex = $1505371258dd2e12$var$Duplex || (parcelRequire("5Cjcb"));
    if (!(this instanceof $1505371258dd2e12$var$Readable)) return new $1505371258dd2e12$var$Readable(options);
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $1505371258dd2e12$var$Duplex;
    this._readableState = new $1505371258dd2e12$var$ReadableState(options, this, isDuplex);
    // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    $ioHK4.call(this);
}
Object.defineProperty($1505371258dd2e12$var$Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
$1505371258dd2e12$var$Readable.prototype.destroy = $ZJ19m.destroy;
$1505371258dd2e12$var$Readable.prototype._undestroy = $ZJ19m.undestroy;
$1505371258dd2e12$var$Readable.prototype._destroy = function(err, cb) {
    cb(err);
};
// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
$1505371258dd2e12$var$Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = $1505371258dd2e12$require$Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return $1505371258dd2e12$var$readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};
// Unshift should *always* be something directly out of read()
$1505371258dd2e12$var$Readable.prototype.unshift = function(chunk) {
    return $1505371258dd2e12$var$readableAddChunk(this, chunk, null, true, false);
};
function $1505371258dd2e12$var$readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    $1505371258dd2e12$var$debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        $1505371258dd2e12$var$onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = $1505371258dd2e12$var$chunkInvalid(state, chunk);
        if (er) $1505371258dd2e12$var$errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== $1505371258dd2e12$require$Buffer.prototype) chunk = $1505371258dd2e12$var$_uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) $1505371258dd2e12$var$errorOrDestroy(stream, new $1505371258dd2e12$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else $1505371258dd2e12$var$addChunk(stream, state, chunk, true);
            } else if (state.ended) $1505371258dd2e12$var$errorOrDestroy(stream, new $1505371258dd2e12$var$ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) $1505371258dd2e12$var$addChunk(stream, state, chunk, false);
                    else $1505371258dd2e12$var$maybeReadMore(stream, state);
                } else $1505371258dd2e12$var$addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            $1505371258dd2e12$var$maybeReadMore(stream, state);
        }
    }
    // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function $1505371258dd2e12$var$addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) $1505371258dd2e12$var$emitReadable(stream);
    }
    $1505371258dd2e12$var$maybeReadMore(stream, state);
}
function $1505371258dd2e12$var$chunkInvalid(state, chunk) {
    var er;
    if (!$1505371258dd2e12$var$_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new $1505371258dd2e12$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
$1505371258dd2e12$var$Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
};

// backwards compatibility.
$1505371258dd2e12$var$Readable.prototype.setEncoding = function(enc) {
    if (!$1505371258dd2e12$var$StringDecoder) $1505371258dd2e12$var$StringDecoder = (parcelRequire("i1uXD")).StringDecoder;
    var decoder = new $1505371258dd2e12$var$StringDecoder(enc);
    this._readableState.decoder = decoder;
    // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding;
    // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
};
// Don't raise the hwm > 1GB
var $1505371258dd2e12$var$MAX_HWM = 0x40000000;
function $1505371258dd2e12$var$computeNewHighWaterMark(n) {
    if (n >= $1505371258dd2e12$var$MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = $1505371258dd2e12$var$MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
}
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $1505371258dd2e12$var$howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = $1505371258dd2e12$var$computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
}
// you can override either this method, or the async _read(n) below.
$1505371258dd2e12$var$Readable.prototype.read = function(n) {
    $1505371258dd2e12$var$debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false;
    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        $1505371258dd2e12$var$debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) $1505371258dd2e12$var$endReadable(this);
        else $1505371258dd2e12$var$emitReadable(this);
        return null;
    }
    n = $1505371258dd2e12$var$howMuchToRead(n, state);
    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) $1505371258dd2e12$var$endReadable(this);
        return null;
    }
    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    $1505371258dd2e12$var$debug("need readable", doRead);
    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        $1505371258dd2e12$var$debug("length less than watermark", doRead);
    }
    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        $1505371258dd2e12$var$debug("reading or ended", doRead);
    } else if (doRead) {
        $1505371258dd2e12$var$debug("do read");
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = $1505371258dd2e12$var$howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = $1505371258dd2e12$var$fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;
        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) $1505371258dd2e12$var$endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function $1505371258dd2e12$var$onEofChunk(stream, state) {
    $1505371258dd2e12$var$debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    $1505371258dd2e12$var$emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            $1505371258dd2e12$var$emitReadable_(stream);
        }
    }
}
// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function $1505371258dd2e12$var$emitReadable(stream) {
    var state = stream._readableState;
    $1505371258dd2e12$var$debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        $1505371258dd2e12$var$debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        $lFBFq.nextTick($1505371258dd2e12$var$emitReadable_, stream);
    }
}
function $1505371258dd2e12$var$emitReadable_(stream) {
    var state = stream._readableState;
    $1505371258dd2e12$var$debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    }
    // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    $1505371258dd2e12$var$flow(stream);
}
// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function $1505371258dd2e12$var$maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        $lFBFq.nextTick($1505371258dd2e12$var$maybeReadMore_, stream, state);
    }
}
function $1505371258dd2e12$var$maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        $1505371258dd2e12$var$debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
}
// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
$1505371258dd2e12$var$Readable.prototype._read = function(n) {
    $1505371258dd2e12$var$errorOrDestroy(this, new $1505371258dd2e12$var$ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
$1505371258dd2e12$var$Readable.prototype.pipe = function(dest, pipeOpts) {
    var onunpipe = function onunpipe(readable, unpipeInfo) {
        $1505371258dd2e12$var$debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    };
    var onend = function onend() {
        $1505371258dd2e12$var$debug("onend");
        dest.end();
    };
    var cleanup = function cleanup() {
        $1505371258dd2e12$var$debug("cleanup");
        // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    };
    var ondata = function ondata(chunk) {
        $1505371258dd2e12$var$debug("ondata");
        var ret = dest.write(chunk);
        $1505371258dd2e12$var$debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && $1505371258dd2e12$var$indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                $1505371258dd2e12$var$debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    };
    var onclose = // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    };
    var onfinish = function onfinish() {
        $1505371258dd2e12$var$debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    };
    var unpipe = function unpipe() {
        $1505371258dd2e12$var$debug("unpipe");
        src.unpipe(dest);
    };
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    $1505371258dd2e12$var$debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== $lFBFq.stdout && dest !== $lFBFq.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) $lFBFq.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = $1505371258dd2e12$var$pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    src.on("data", ondata);
    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        $1505371258dd2e12$var$debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if ($1505371258dd2e12$var$EElistenerCount(dest, "error") === 0) $1505371258dd2e12$var$errorOrDestroy(dest, er);
    }
    // Make sure our error handler is attached before userland ones.
    $1505371258dd2e12$var$prependListener(dest, "error", onerror);
    dest.once("close", onclose);
    dest.once("finish", onfinish);
    // tell the dest that it's being piped to
    dest.emit("pipe", src);
    // start the flow if it hasn't been started already.
    if (!state.flowing) {
        $1505371258dd2e12$var$debug("pipe resume");
        src.resume();
    }
    return dest;
};
function $1505371258dd2e12$var$pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        $1505371258dd2e12$var$debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && $1505371258dd2e12$var$EElistenerCount(src, "data")) {
            state.flowing = true;
            $1505371258dd2e12$var$flow(src);
        }
    };
}
$1505371258dd2e12$var$Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    };
    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;
    // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    }
    // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    }
    // try to find the right one.
    var index = $1505371258dd2e12$var$indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
};
// set up data events if they are asked for
// Ensure readable listeners eventually get something
$1505371258dd2e12$var$Readable.prototype.on = function(ev, fn) {
    var res = $ioHK4.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0;
        // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            $1505371258dd2e12$var$debug("on readable", state.length, state.reading);
            if (state.length) $1505371258dd2e12$var$emitReadable(this);
            else if (!state.reading) $lFBFq.nextTick($1505371258dd2e12$var$nReadingNextTick, this);
        }
    }
    return res;
};
$1505371258dd2e12$var$Readable.prototype.addListener = $1505371258dd2e12$var$Readable.prototype.on;
$1505371258dd2e12$var$Readable.prototype.removeListener = function(ev, fn) {
    var res = $ioHK4.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $lFBFq.nextTick($1505371258dd2e12$var$updateReadableListening, this);
    return res;
};
$1505371258dd2e12$var$Readable.prototype.removeAllListeners = function(ev) {
    var res = $ioHK4.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $lFBFq.nextTick($1505371258dd2e12$var$updateReadableListening, this);
    return res;
};
function $1505371258dd2e12$var$updateReadableListening(self1) {
    var state = self1._readableState;
    state.readableListening = self1.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;
    else if (self1.listenerCount("data") > 0) self1.resume();
}
function $1505371258dd2e12$var$nReadingNextTick(self1) {
    $1505371258dd2e12$var$debug("readable nexttick read 0");
    self1.read(0);
}
// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
$1505371258dd2e12$var$Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        $1505371258dd2e12$var$debug("resume");
        // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        $1505371258dd2e12$var$resume(this, state);
    }
    state.paused = false;
    return this;
};
function $1505371258dd2e12$var$resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        $lFBFq.nextTick($1505371258dd2e12$var$resume_, stream, state);
    }
}
function $1505371258dd2e12$var$resume_(stream, state) {
    $1505371258dd2e12$var$debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    $1505371258dd2e12$var$flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
$1505371258dd2e12$var$Readable.prototype.pause = function() {
    $1505371258dd2e12$var$debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        $1505371258dd2e12$var$debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function $1505371258dd2e12$var$flow(stream) {
    var state = stream._readableState;
    $1505371258dd2e12$var$debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
}
// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
$1505371258dd2e12$var$Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        $1505371258dd2e12$var$debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        $1505371258dd2e12$var$debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk);
        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    });
    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
    // proxy certain important events.
    for(var n = 0; n < $1505371258dd2e12$var$kProxyEvents.length; n++)stream.on($1505371258dd2e12$var$kProxyEvents[n], this.emit.bind(this, $1505371258dd2e12$var$kProxyEvents[n]));
    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        $1505371258dd2e12$var$debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};

if (typeof Symbol === "function") $1505371258dd2e12$var$Readable.prototype[Symbol.asyncIterator] = function() {
    if ($1505371258dd2e12$var$createReadableStreamAsyncIterator === undefined) $1505371258dd2e12$var$createReadableStreamAsyncIterator = (parcelRequire("4Krqk"));
    return $1505371258dd2e12$var$createReadableStreamAsyncIterator(this);
};
Object.defineProperty($1505371258dd2e12$var$Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty($1505371258dd2e12$var$Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty($1505371258dd2e12$var$Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
});
// exposed for testing purposes only.
$1505371258dd2e12$var$Readable._fromList = $1505371258dd2e12$var$fromList;
Object.defineProperty($1505371258dd2e12$var$Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
});
// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $1505371258dd2e12$var$fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function $1505371258dd2e12$var$endReadable(stream) {
    var state = stream._readableState;
    $1505371258dd2e12$var$debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        $lFBFq.nextTick($1505371258dd2e12$var$endReadableNT, state, stream);
    }
}
function $1505371258dd2e12$var$endReadableNT(state, stream) {
    $1505371258dd2e12$var$debug("endReadableNT", state.endEmitted, state.length);
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}

if (typeof Symbol === "function") $1505371258dd2e12$var$Readable.from = function(iterable, opts) {
    if ($1505371258dd2e12$var$from === undefined) $1505371258dd2e12$var$from = (parcelRequire("hXMYx"));
    return $1505371258dd2e12$var$from($1505371258dd2e12$var$Readable, iterable, opts);
};
function $1505371258dd2e12$var$indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

});
parcelRequire.register("ioHK4", function(module, exports) {

module.exports = (parcelRequire("eJwY4")).EventEmitter;

});

parcelRequire.register("6cCIi", function(module, exports) {

var $lT21Y = parcelRequire("lT21Y");
"use strict";
function $4841e4be871bddf1$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function $4841e4be871bddf1$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? $4841e4be871bddf1$var$ownKeys(Object(source), !0).forEach(function(key) {
            $4841e4be871bddf1$var$_defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : $4841e4be871bddf1$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function $4841e4be871bddf1$var$_defineProperty(obj, key, value) {
    key = $4841e4be871bddf1$var$_toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $4841e4be871bddf1$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $4841e4be871bddf1$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, $4841e4be871bddf1$var$_toPropertyKey(descriptor.key), descriptor);
    }
}
function $4841e4be871bddf1$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $4841e4be871bddf1$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $4841e4be871bddf1$var$_defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function $4841e4be871bddf1$var$_toPropertyKey(arg) {
    var key = $4841e4be871bddf1$var$_toPrimitive(arg, "string");
    return (typeof key === "undefined" ? "undefined" : (0, $lT21Y.default)(key)) === "symbol" ? key : String(key);
}
function $4841e4be871bddf1$var$_toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

var $kgUAE = parcelRequire("kgUAE");
var $4841e4be871bddf1$var$Buffer = $kgUAE.Buffer;

var $l9xBz = parcelRequire("l9xBz");
var $4841e4be871bddf1$var$inspect = $l9xBz.inspect;
var $4841e4be871bddf1$var$custom = $4841e4be871bddf1$var$inspect && $4841e4be871bddf1$var$inspect.custom || "inspect";
function $4841e4be871bddf1$var$copyBuffer(src, target, offset) {
    $4841e4be871bddf1$var$Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        $4841e4be871bddf1$var$_classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    $4841e4be871bddf1$var$_createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return $4841e4be871bddf1$var$Buffer.alloc(0);
                var ret = $4841e4be871bddf1$var$Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    $4841e4be871bddf1$var$copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            }
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            }
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = $4841e4be871bddf1$var$Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: $4841e4be871bddf1$var$custom,
            value: function value(_, options) {
                return $4841e4be871bddf1$var$inspect(this, $4841e4be871bddf1$var$_objectSpread($4841e4be871bddf1$var$_objectSpread({}, options), {}, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

});

parcelRequire.register("ZJ19m", function(module, exports) {

var $lFBFq = parcelRequire("lFBFq");
"use strict";
// undocumented cb() API, needed for core, not for public API
function $0b989e2ace46d97d$var$destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) $lFBFq.nextTick($0b989e2ace46d97d$var$emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                $lFBFq.nextTick($0b989e2ace46d97d$var$emitErrorNT, this, err);
            }
        }
        return this;
    }
    // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
    // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) $lFBFq.nextTick($0b989e2ace46d97d$var$emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                $lFBFq.nextTick($0b989e2ace46d97d$var$emitErrorAndCloseNT, _this, err);
            } else $lFBFq.nextTick($0b989e2ace46d97d$var$emitCloseNT, _this);
        } else if (cb) {
            $lFBFq.nextTick($0b989e2ace46d97d$var$emitCloseNT, _this);
            cb(err);
        } else $lFBFq.nextTick($0b989e2ace46d97d$var$emitCloseNT, _this);
    });
    return this;
}
function $0b989e2ace46d97d$var$emitErrorAndCloseNT(self, err) {
    $0b989e2ace46d97d$var$emitErrorNT(self, err);
    $0b989e2ace46d97d$var$emitCloseNT(self);
}
function $0b989e2ace46d97d$var$emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function $0b989e2ace46d97d$var$undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function $0b989e2ace46d97d$var$emitErrorNT(self, err) {
    self.emit("error", err);
}
function $0b989e2ace46d97d$var$errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: $0b989e2ace46d97d$var$destroy,
    undestroy: $0b989e2ace46d97d$var$undestroy,
    errorOrDestroy: $0b989e2ace46d97d$var$errorOrDestroy
};

});

parcelRequire.register("22phb", function(module, exports) {
"use strict";

var $b2l9e = parcelRequire("b2l9e");
var $17bf5ffee2034dc8$var$ERR_INVALID_OPT_VALUE = $b2l9e.codes.ERR_INVALID_OPT_VALUE;
function $17bf5ffee2034dc8$var$highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function $17bf5ffee2034dc8$var$getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = $17bf5ffee2034dc8$var$highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new $17bf5ffee2034dc8$var$ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    }
    // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: $17bf5ffee2034dc8$var$getHighWaterMark
};

});
parcelRequire.register("b2l9e", function(module, exports) {

$parcel$export(module.exports, "codes", function () { return $8090491ef4845260$export$e45cb6485273080e; }, function (v) { return $8090491ef4845260$export$e45cb6485273080e = v; });

var $lT21Y = parcelRequire("lT21Y");
var $8090491ef4845260$export$e45cb6485273080e;
"use strict";
function $8090491ef4845260$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var $8090491ef4845260$var$codes = {};
function $8090491ef4845260$var$createErrorType(code, message, Base) {
    var getMessage = function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    };
    if (!Base) Base = Error;
    var NodeError = /*#__PURE__*/ function(_Base) {
        var NodeError = function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        };
        $8090491ef4845260$var$_inheritsLoose(NodeError, _Base);
        return NodeError;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    $8090491ef4845260$var$codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function $8090491ef4845260$var$oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function $8090491ef4845260$var$startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $8090491ef4845260$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function $8090491ef4845260$var$includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
$8090491ef4845260$var$createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
$8090491ef4845260$var$createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && $8090491ef4845260$var$startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if ($8090491ef4845260$var$endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat($8090491ef4845260$var$oneOf(expected, "type"));
    else {
        var type = $8090491ef4845260$var$includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat($8090491ef4845260$var$oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual === "undefined" ? "undefined" : (0, $lT21Y.default)(actual));
    return msg;
}, TypeError);
$8090491ef4845260$var$createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
$8090491ef4845260$var$createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
$8090491ef4845260$var$createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
$8090491ef4845260$var$createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
$8090491ef4845260$var$createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
$8090491ef4845260$var$createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
$8090491ef4845260$var$createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
$8090491ef4845260$var$createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
$8090491ef4845260$var$createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
$8090491ef4845260$var$createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
$8090491ef4845260$export$e45cb6485273080e = $8090491ef4845260$var$codes;

});


parcelRequire.register("5Cjcb", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

var $lFBFq = parcelRequire("lFBFq");
"use strict";
/*<replacement>*/ var $416f6430e9485468$var$objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = $416f6430e9485468$var$Duplex;

var $1NTeN = parcelRequire("1NTeN");

var $03ivy = parcelRequire("03ivy");

(parcelRequire("ScPjF"))($416f6430e9485468$var$Duplex, $1NTeN);
// Allow the keys array to be GC'ed.
var $416f6430e9485468$var$keys = $416f6430e9485468$var$objectKeys($03ivy.prototype);
for(var $416f6430e9485468$var$v = 0; $416f6430e9485468$var$v < $416f6430e9485468$var$keys.length; $416f6430e9485468$var$v++){
    var $416f6430e9485468$var$method = $416f6430e9485468$var$keys[$416f6430e9485468$var$v];
    if (!$416f6430e9485468$var$Duplex.prototype[$416f6430e9485468$var$method]) $416f6430e9485468$var$Duplex.prototype[$416f6430e9485468$var$method] = $03ivy.prototype[$416f6430e9485468$var$method];
}
function $416f6430e9485468$var$Duplex(options) {
    if (!(this instanceof $416f6430e9485468$var$Duplex)) return new $416f6430e9485468$var$Duplex(options);
    $1NTeN.call(this, options);
    $03ivy.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", $416f6430e9485468$var$onend);
        }
    }
}
Object.defineProperty($416f6430e9485468$var$Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty($416f6430e9485468$var$Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty($416f6430e9485468$var$Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
// the no-half-open enforcer
function $416f6430e9485468$var$onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return;
    // no more data can be written.
    // But allow more writes to happen in this tick.
    $lFBFq.nextTick($416f6430e9485468$var$onEndNT, this);
}
function $416f6430e9485468$var$onEndNT(self) {
    self.end();
}
Object.defineProperty($416f6430e9485468$var$Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

});
parcelRequire.register("03ivy", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

var $lFBFq = parcelRequire("lFBFq");
"use strict";
module.exports = $009ea3350b032b1d$var$Writable;
/* <replacement> */ function $009ea3350b032b1d$var$WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
}
// It seems a linked list but it is not
// there will be only 2 of these for each stream
function $009ea3350b032b1d$var$CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        $009ea3350b032b1d$var$onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var $009ea3350b032b1d$var$Duplex;
/*</replacement>*/ $009ea3350b032b1d$var$Writable.WritableState = $009ea3350b032b1d$var$WritableState;

/*<replacement>*/ var $009ea3350b032b1d$var$internalUtil = {
    deprecate: (parcelRequire("2p2sk"))
};

var $ioHK4 = parcelRequire("ioHK4");

var $kgUAE = parcelRequire("kgUAE");
var $009ea3350b032b1d$require$Buffer = $kgUAE.Buffer;
var $009ea3350b032b1d$var$OurUint8Array = (typeof $parcel$global !== "undefined" ? $parcel$global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function $009ea3350b032b1d$var$_uint8ArrayToBuffer(chunk) {
    return $009ea3350b032b1d$require$Buffer.from(chunk);
}
function $009ea3350b032b1d$var$_isUint8Array(obj) {
    return $009ea3350b032b1d$require$Buffer.isBuffer(obj) || obj instanceof $009ea3350b032b1d$var$OurUint8Array;
}

var $ZJ19m = parcelRequire("ZJ19m");

var $22phb = parcelRequire("22phb");
var $009ea3350b032b1d$var$getHighWaterMark = $22phb.getHighWaterMark;

var $b2l9e = parcelRequire("b2l9e");
var $009ea3350b032b1d$require$_require$codes = $b2l9e.codes;
var $009ea3350b032b1d$var$ERR_INVALID_ARG_TYPE = $009ea3350b032b1d$require$_require$codes.ERR_INVALID_ARG_TYPE, $009ea3350b032b1d$var$ERR_METHOD_NOT_IMPLEMENTED = $009ea3350b032b1d$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $009ea3350b032b1d$var$ERR_MULTIPLE_CALLBACK = $009ea3350b032b1d$require$_require$codes.ERR_MULTIPLE_CALLBACK, $009ea3350b032b1d$var$ERR_STREAM_CANNOT_PIPE = $009ea3350b032b1d$require$_require$codes.ERR_STREAM_CANNOT_PIPE, $009ea3350b032b1d$var$ERR_STREAM_DESTROYED = $009ea3350b032b1d$require$_require$codes.ERR_STREAM_DESTROYED, $009ea3350b032b1d$var$ERR_STREAM_NULL_VALUES = $009ea3350b032b1d$require$_require$codes.ERR_STREAM_NULL_VALUES, $009ea3350b032b1d$var$ERR_STREAM_WRITE_AFTER_END = $009ea3350b032b1d$require$_require$codes.ERR_STREAM_WRITE_AFTER_END, $009ea3350b032b1d$var$ERR_UNKNOWN_ENCODING = $009ea3350b032b1d$require$_require$codes.ERR_UNKNOWN_ENCODING;
var $009ea3350b032b1d$var$errorOrDestroy = $ZJ19m.errorOrDestroy;

(parcelRequire("ScPjF"))($009ea3350b032b1d$var$Writable, $ioHK4);
function $009ea3350b032b1d$var$nop() {}

function $009ea3350b032b1d$var$WritableState(options, stream, isDuplex) {
    $009ea3350b032b1d$var$Duplex = $009ea3350b032b1d$var$Duplex || (parcelRequire("5Cjcb"));
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $009ea3350b032b1d$var$Duplex;
    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = $009ea3350b032b1d$var$getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
    // if _final has been called
    this.finalCalled = false;
    // drain event flag.
    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;
    // has it been destroyed
    this.destroyed = false;
    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;
    // a flag to see when we're in the middle of a write.
    this.writing = false;
    // when true all writes will be buffered until .uncork() call
    this.corked = 0;
    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;
    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;
    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        $009ea3350b032b1d$var$onwrite(stream, er);
    };
    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;
    // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;
    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;
    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy;
    // count buffered requests
    this.bufferedRequestCount = 0;
    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new $009ea3350b032b1d$var$CorkedRequest(this);
}
$009ea3350b032b1d$var$WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty($009ea3350b032b1d$var$WritableState.prototype, "buffer", {
            get: $009ea3350b032b1d$var$internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})();
// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var $009ea3350b032b1d$var$realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    $009ea3350b032b1d$var$realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty($009ea3350b032b1d$var$Writable, Symbol.hasInstance, {
        value: function value(object) {
            if ($009ea3350b032b1d$var$realHasInstance.call(this, object)) return true;
            if (this !== $009ea3350b032b1d$var$Writable) return false;
            return object && object._writableState instanceof $009ea3350b032b1d$var$WritableState;
        }
    });
} else $009ea3350b032b1d$var$realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};

function $009ea3350b032b1d$var$Writable(options) {
    $009ea3350b032b1d$var$Duplex = $009ea3350b032b1d$var$Duplex || (parcelRequire("5Cjcb"));
    // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $009ea3350b032b1d$var$Duplex;
    if (!isDuplex && !$009ea3350b032b1d$var$realHasInstance.call($009ea3350b032b1d$var$Writable, this)) return new $009ea3350b032b1d$var$Writable(options);
    this._writableState = new $009ea3350b032b1d$var$WritableState(options, this, isDuplex);
    // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options["final"] === "function") this._final = options["final"];
    }
    $ioHK4.call(this);
}
// Otherwise people can pipe Writable streams, which is just wrong.
$009ea3350b032b1d$var$Writable.prototype.pipe = function() {
    $009ea3350b032b1d$var$errorOrDestroy(this, new $009ea3350b032b1d$var$ERR_STREAM_CANNOT_PIPE());
};
function $009ea3350b032b1d$var$writeAfterEnd(stream, cb) {
    var er = new $009ea3350b032b1d$var$ERR_STREAM_WRITE_AFTER_END();
    // TODO: defer error events consistently everywhere, not just the cb
    $009ea3350b032b1d$var$errorOrDestroy(stream, er);
    $lFBFq.nextTick(cb, er);
}
// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function $009ea3350b032b1d$var$validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new $009ea3350b032b1d$var$ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new $009ea3350b032b1d$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        $009ea3350b032b1d$var$errorOrDestroy(stream, er);
        $lFBFq.nextTick(cb, er);
        return false;
    }
    return true;
}
$009ea3350b032b1d$var$Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && $009ea3350b032b1d$var$_isUint8Array(chunk);
    if (isBuf && !$009ea3350b032b1d$require$Buffer.isBuffer(chunk)) chunk = $009ea3350b032b1d$var$_uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = $009ea3350b032b1d$var$nop;
    if (state.ending) $009ea3350b032b1d$var$writeAfterEnd(this, cb);
    else if (isBuf || $009ea3350b032b1d$var$validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = $009ea3350b032b1d$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
$009ea3350b032b1d$var$Writable.prototype.cork = function() {
    this._writableState.corked++;
};
$009ea3350b032b1d$var$Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $009ea3350b032b1d$var$clearBuffer(this, state);
    }
};
$009ea3350b032b1d$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new $009ea3350b032b1d$var$ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty($009ea3350b032b1d$var$Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function $009ea3350b032b1d$var$decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = $009ea3350b032b1d$require$Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty($009ea3350b032b1d$var$Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function $009ea3350b032b1d$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = $009ea3350b032b1d$var$decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else $009ea3350b032b1d$var$doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function $009ea3350b032b1d$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new $009ea3350b032b1d$var$ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function $009ea3350b032b1d$var$onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        $lFBFq.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        $lFBFq.nextTick($009ea3350b032b1d$var$finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        $009ea3350b032b1d$var$errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        $009ea3350b032b1d$var$errorOrDestroy(stream, er);
        // this can emit finish, but finish must
        // always follow error
        $009ea3350b032b1d$var$finishMaybe(stream, state);
    }
}
function $009ea3350b032b1d$var$onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function $009ea3350b032b1d$var$onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new $009ea3350b032b1d$var$ERR_MULTIPLE_CALLBACK();
    $009ea3350b032b1d$var$onwriteStateUpdate(state);
    if (er) $009ea3350b032b1d$var$onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = $009ea3350b032b1d$var$needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) $009ea3350b032b1d$var$clearBuffer(stream, state);
        if (sync) $lFBFq.nextTick($009ea3350b032b1d$var$afterWrite, stream, state, finished, cb);
        else $009ea3350b032b1d$var$afterWrite(stream, state, finished, cb);
    }
}
function $009ea3350b032b1d$var$afterWrite(stream, state, finished, cb) {
    if (!finished) $009ea3350b032b1d$var$onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    $009ea3350b032b1d$var$finishMaybe(stream, state);
}
// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function $009ea3350b032b1d$var$onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
}
// if there's something in the buffer waiting, then process it
function $009ea3350b032b1d$var$clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        $009ea3350b032b1d$var$doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new $009ea3350b032b1d$var$CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            $009ea3350b032b1d$var$doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
$009ea3350b032b1d$var$Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new $009ea3350b032b1d$var$ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
$009ea3350b032b1d$var$Writable.prototype._writev = null;
$009ea3350b032b1d$var$Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
    // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    }
    // ignore unnecessary end() calls.
    if (!state.ending) $009ea3350b032b1d$var$endWritable(this, state, cb);
    return this;
};
Object.defineProperty($009ea3350b032b1d$var$Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function $009ea3350b032b1d$var$needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function $009ea3350b032b1d$var$callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) $009ea3350b032b1d$var$errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        $009ea3350b032b1d$var$finishMaybe(stream, state);
    });
}
function $009ea3350b032b1d$var$prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            $lFBFq.nextTick($009ea3350b032b1d$var$callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function $009ea3350b032b1d$var$finishMaybe(stream, state) {
    var need = $009ea3350b032b1d$var$needFinish(state);
    if (need) {
        $009ea3350b032b1d$var$prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function $009ea3350b032b1d$var$endWritable(stream, state, cb) {
    state.ending = true;
    $009ea3350b032b1d$var$finishMaybe(stream, state);
    if (cb) {
        if (state.finished) $lFBFq.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function $009ea3350b032b1d$var$onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    }
    // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty($009ea3350b032b1d$var$Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
$009ea3350b032b1d$var$Writable.prototype.destroy = $ZJ19m.destroy;
$009ea3350b032b1d$var$Writable.prototype._undestroy = $ZJ19m.undestroy;
$009ea3350b032b1d$var$Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

});


parcelRequire.register("4Krqk", function(module, exports) {

var $lT21Y = parcelRequire("lT21Y");

var $lFBFq = parcelRequire("lFBFq");
"use strict";
var $3750bb0e064d4d1e$var$_Object$setPrototypeO;
function $3750bb0e064d4d1e$var$_defineProperty(obj, key, value) {
    key = $3750bb0e064d4d1e$var$_toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $3750bb0e064d4d1e$var$_toPropertyKey(arg) {
    var key = $3750bb0e064d4d1e$var$_toPrimitive(arg, "string");
    return (typeof key === "undefined" ? "undefined" : (0, $lT21Y.default)(key)) === "symbol" ? key : String(key);
}
function $3750bb0e064d4d1e$var$_toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

var $kYxlB = parcelRequire("kYxlB");
var $3750bb0e064d4d1e$var$kLastResolve = Symbol("lastResolve");
var $3750bb0e064d4d1e$var$kLastReject = Symbol("lastReject");
var $3750bb0e064d4d1e$var$kError = Symbol("error");
var $3750bb0e064d4d1e$var$kEnded = Symbol("ended");
var $3750bb0e064d4d1e$var$kLastPromise = Symbol("lastPromise");
var $3750bb0e064d4d1e$var$kHandlePromise = Symbol("handlePromise");
var $3750bb0e064d4d1e$var$kStream = Symbol("stream");
function $3750bb0e064d4d1e$var$createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function $3750bb0e064d4d1e$var$readAndResolve(iter) {
    var resolve = iter[$3750bb0e064d4d1e$var$kLastResolve];
    if (resolve !== null) {
        var data = iter[$3750bb0e064d4d1e$var$kStream].read();
        // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[$3750bb0e064d4d1e$var$kLastPromise] = null;
            iter[$3750bb0e064d4d1e$var$kLastResolve] = null;
            iter[$3750bb0e064d4d1e$var$kLastReject] = null;
            resolve($3750bb0e064d4d1e$var$createIterResult(data, false));
        }
    }
}
function $3750bb0e064d4d1e$var$onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    $lFBFq.nextTick($3750bb0e064d4d1e$var$readAndResolve, iter);
}
function $3750bb0e064d4d1e$var$wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[$3750bb0e064d4d1e$var$kEnded]) {
                resolve($3750bb0e064d4d1e$var$createIterResult(undefined, true));
                return;
            }
            iter[$3750bb0e064d4d1e$var$kHandlePromise](resolve, reject);
        }, reject);
    };
}
var $3750bb0e064d4d1e$var$AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var $3750bb0e064d4d1e$var$ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(($3750bb0e064d4d1e$var$_Object$setPrototypeO = {
    get stream () {
        return this[$3750bb0e064d4d1e$var$kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[$3750bb0e064d4d1e$var$kError];
        if (error !== null) return Promise.reject(error);
        if (this[$3750bb0e064d4d1e$var$kEnded]) return Promise.resolve($3750bb0e064d4d1e$var$createIterResult(undefined, true));
        if (this[$3750bb0e064d4d1e$var$kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            $lFBFq.nextTick(function() {
                if (_this[$3750bb0e064d4d1e$var$kError]) reject(_this[$3750bb0e064d4d1e$var$kError]);
                else resolve($3750bb0e064d4d1e$var$createIterResult(undefined, true));
            });
        });
        // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[$3750bb0e064d4d1e$var$kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise($3750bb0e064d4d1e$var$wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[$3750bb0e064d4d1e$var$kStream].read();
            if (data !== null) return Promise.resolve($3750bb0e064d4d1e$var$createIterResult(data, false));
            promise = new Promise(this[$3750bb0e064d4d1e$var$kHandlePromise]);
        }
        this[$3750bb0e064d4d1e$var$kLastPromise] = promise;
        return promise;
    }
}, $3750bb0e064d4d1e$var$_defineProperty($3750bb0e064d4d1e$var$_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), $3750bb0e064d4d1e$var$_defineProperty($3750bb0e064d4d1e$var$_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[$3750bb0e064d4d1e$var$kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve($3750bb0e064d4d1e$var$createIterResult(undefined, true));
        });
    });
}), $3750bb0e064d4d1e$var$_Object$setPrototypeO), $3750bb0e064d4d1e$var$AsyncIteratorPrototype);
var $3750bb0e064d4d1e$var$createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create($3750bb0e064d4d1e$var$ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, $3750bb0e064d4d1e$var$_defineProperty(_Object$create, $3750bb0e064d4d1e$var$kStream, {
        value: stream,
        writable: true
    }), $3750bb0e064d4d1e$var$_defineProperty(_Object$create, $3750bb0e064d4d1e$var$kLastResolve, {
        value: null,
        writable: true
    }), $3750bb0e064d4d1e$var$_defineProperty(_Object$create, $3750bb0e064d4d1e$var$kLastReject, {
        value: null,
        writable: true
    }), $3750bb0e064d4d1e$var$_defineProperty(_Object$create, $3750bb0e064d4d1e$var$kError, {
        value: null,
        writable: true
    }), $3750bb0e064d4d1e$var$_defineProperty(_Object$create, $3750bb0e064d4d1e$var$kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), $3750bb0e064d4d1e$var$_defineProperty(_Object$create, $3750bb0e064d4d1e$var$kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[$3750bb0e064d4d1e$var$kStream].read();
            if (data) {
                iterator[$3750bb0e064d4d1e$var$kLastPromise] = null;
                iterator[$3750bb0e064d4d1e$var$kLastResolve] = null;
                iterator[$3750bb0e064d4d1e$var$kLastReject] = null;
                resolve($3750bb0e064d4d1e$var$createIterResult(data, false));
            } else {
                iterator[$3750bb0e064d4d1e$var$kLastResolve] = resolve;
                iterator[$3750bb0e064d4d1e$var$kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[$3750bb0e064d4d1e$var$kLastPromise] = null;
    $kYxlB(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[$3750bb0e064d4d1e$var$kLastReject];
            // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[$3750bb0e064d4d1e$var$kLastPromise] = null;
                iterator[$3750bb0e064d4d1e$var$kLastResolve] = null;
                iterator[$3750bb0e064d4d1e$var$kLastReject] = null;
                reject(err);
            }
            iterator[$3750bb0e064d4d1e$var$kError] = err;
            return;
        }
        var resolve = iterator[$3750bb0e064d4d1e$var$kLastResolve];
        if (resolve !== null) {
            iterator[$3750bb0e064d4d1e$var$kLastPromise] = null;
            iterator[$3750bb0e064d4d1e$var$kLastResolve] = null;
            iterator[$3750bb0e064d4d1e$var$kLastReject] = null;
            resolve($3750bb0e064d4d1e$var$createIterResult(undefined, true));
        }
        iterator[$3750bb0e064d4d1e$var$kEnded] = true;
    });
    stream.on("readable", $3750bb0e064d4d1e$var$onReadable.bind(null, iterator));
    return iterator;
};
module.exports = $3750bb0e064d4d1e$var$createReadableStreamAsyncIterator;

});
parcelRequire.register("kYxlB", function(module, exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";

var $b2l9e = parcelRequire("b2l9e");
var $f453475832aaa4f3$var$ERR_STREAM_PREMATURE_CLOSE = $b2l9e.codes.ERR_STREAM_PREMATURE_CLOSE;
function $f453475832aaa4f3$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function $f453475832aaa4f3$var$noop() {}
function $f453475832aaa4f3$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function $f453475832aaa4f3$var$eos(stream, opts, callback) {
    if (typeof opts === "function") return $f453475832aaa4f3$var$eos(stream, null, opts);
    if (!opts) opts = {};
    callback = $f453475832aaa4f3$var$once(callback || $f453475832aaa4f3$var$noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new $f453475832aaa4f3$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new $f453475832aaa4f3$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if ($f453475832aaa4f3$var$isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = $f453475832aaa4f3$var$eos;

});


parcelRequire.register("hXMYx", function(module, exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

});


parcelRequire.register("cO4fX", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = $952d74c02fb39493$var$Transform;

var $b2l9e = parcelRequire("b2l9e");
var $952d74c02fb39493$require$_require$codes = $b2l9e.codes;
var $952d74c02fb39493$var$ERR_METHOD_NOT_IMPLEMENTED = $952d74c02fb39493$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $952d74c02fb39493$var$ERR_MULTIPLE_CALLBACK = $952d74c02fb39493$require$_require$codes.ERR_MULTIPLE_CALLBACK, $952d74c02fb39493$var$ERR_TRANSFORM_ALREADY_TRANSFORMING = $952d74c02fb39493$require$_require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, $952d74c02fb39493$var$ERR_TRANSFORM_WITH_LENGTH_0 = $952d74c02fb39493$require$_require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var $5Cjcb = parcelRequire("5Cjcb");

(parcelRequire("ScPjF"))($952d74c02fb39493$var$Transform, $5Cjcb);
function $952d74c02fb39493$var$afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new $952d74c02fb39493$var$ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function $952d74c02fb39493$var$Transform(options) {
    if (!(this instanceof $952d74c02fb39493$var$Transform)) return new $952d74c02fb39493$var$Transform(options);
    $5Cjcb.call(this, options);
    this._transformState = {
        afterTransform: $952d74c02fb39493$var$afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    };
    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;
    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    }
    // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", $952d74c02fb39493$var$prefinish);
}
function $952d74c02fb39493$var$prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        $952d74c02fb39493$var$done(_this, er, data);
    });
    else $952d74c02fb39493$var$done(this, null, null);
}
$952d74c02fb39493$var$Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return $5Cjcb.prototype.push.call(this, chunk, encoding);
};
// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
$952d74c02fb39493$var$Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new $952d74c02fb39493$var$ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
$952d74c02fb39493$var$Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
};
// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
$952d74c02fb39493$var$Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
$952d74c02fb39493$var$Transform.prototype._destroy = function(err, cb) {
    $5Cjcb.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function $952d74c02fb39493$var$done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);
    // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new $952d74c02fb39493$var$ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new $952d74c02fb39493$var$ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

});

parcelRequire.register("j8SMH", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = $def942b6f960c451$var$PassThrough;

var $cO4fX = parcelRequire("cO4fX");

(parcelRequire("ScPjF"))($def942b6f960c451$var$PassThrough, $cO4fX);
function $def942b6f960c451$var$PassThrough(options) {
    if (!(this instanceof $def942b6f960c451$var$PassThrough)) return new $def942b6f960c451$var$PassThrough(options);
    $cO4fX.call(this, options);
}
$def942b6f960c451$var$PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

});

parcelRequire.register("hwpd2", function(module, exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var $cc18fae0128a8153$var$eos;
function $cc18fae0128a8153$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}

var $b2l9e = parcelRequire("b2l9e");
var $cc18fae0128a8153$require$_require$codes = $b2l9e.codes;
var $cc18fae0128a8153$var$ERR_MISSING_ARGS = $cc18fae0128a8153$require$_require$codes.ERR_MISSING_ARGS, $cc18fae0128a8153$var$ERR_STREAM_DESTROYED = $cc18fae0128a8153$require$_require$codes.ERR_STREAM_DESTROYED;
function $cc18fae0128a8153$var$noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function $cc18fae0128a8153$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}

function $cc18fae0128a8153$var$destroyer(stream, reading, writing, callback) {
    callback = $cc18fae0128a8153$var$once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if ($cc18fae0128a8153$var$eos === undefined) $cc18fae0128a8153$var$eos = (parcelRequire("kYxlB"));
    $cc18fae0128a8153$var$eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true;
        // request.destroy just do .end - .abort is what we want
        if ($cc18fae0128a8153$var$isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new $cc18fae0128a8153$var$ERR_STREAM_DESTROYED("pipe"));
    };
}
function $cc18fae0128a8153$var$call(fn) {
    fn();
}
function $cc18fae0128a8153$var$pipe(from, to) {
    return from.pipe(to);
}
function $cc18fae0128a8153$var$popCallback(streams) {
    if (!streams.length) return $cc18fae0128a8153$var$noop;
    if (typeof streams[streams.length - 1] !== "function") return $cc18fae0128a8153$var$noop;
    return streams.pop();
}
function $cc18fae0128a8153$var$pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = $cc18fae0128a8153$var$popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new $cc18fae0128a8153$var$ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return $cc18fae0128a8153$var$destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach($cc18fae0128a8153$var$call);
            if (reading) return;
            destroys.forEach($cc18fae0128a8153$var$call);
            callback(error);
        });
    });
    return streams.reduce($cc18fae0128a8153$var$pipe);
}
module.exports = $cc18fae0128a8153$var$pipeline;

});


parcelRequire.register("2TkPX", function(module, exports) {
"use strict";

var $kgUAE = parcelRequire("kgUAE");
var $21b0e1a146dc820f$require$Buffer = $kgUAE.Buffer;
var $21b0e1a146dc820f$var$symbol = Symbol["for"]("BufferList");
function $21b0e1a146dc820f$var$BufferList(buf) {
    if (!(this instanceof $21b0e1a146dc820f$var$BufferList)) return new $21b0e1a146dc820f$var$BufferList(buf);
    $21b0e1a146dc820f$var$BufferList._init.call(this, buf);
}
$21b0e1a146dc820f$var$BufferList._init = function _init(buf) {
    Object.defineProperty(this, $21b0e1a146dc820f$var$symbol, {
        value: true
    });
    this._bufs = [];
    this.length = 0;
    if (buf) this.append(buf);
};
$21b0e1a146dc820f$var$BufferList.prototype._new = function _new(buf) {
    return new $21b0e1a146dc820f$var$BufferList(buf);
};
$21b0e1a146dc820f$var$BufferList.prototype._offset = function _offset(offset) {
    if (offset === 0) return [
        0,
        0
    ];
    var tot = 0;
    for(var i = 0; i < this._bufs.length; i++){
        var _t = tot + this._bufs[i].length;
        if (offset < _t || i === this._bufs.length - 1) return [
            i,
            offset - tot
        ];
        tot = _t;
    }
};
$21b0e1a146dc820f$var$BufferList.prototype._reverseOffset = function(blOffset) {
    var bufferId = blOffset[0];
    var offset = blOffset[1];
    for(var i = 0; i < bufferId; i++)offset += this._bufs[i].length;
    return offset;
};
$21b0e1a146dc820f$var$BufferList.prototype.get = function get(index) {
    if (index > this.length || index < 0) return undefined;
    var offset = this._offset(index);
    return this._bufs[offset[0]][offset[1]];
};
$21b0e1a146dc820f$var$BufferList.prototype.slice = function slice(start, end) {
    if (typeof start === "number" && start < 0) start += this.length;
    if (typeof end === "number" && end < 0) end += this.length;
    return this.copy(null, 0, start, end);
};
$21b0e1a146dc820f$var$BufferList.prototype.copy = function copy(dst, dstStart, srcStart, srcEnd) {
    if (typeof srcStart !== "number" || srcStart < 0) srcStart = 0;
    if (typeof srcEnd !== "number" || srcEnd > this.length) srcEnd = this.length;
    if (srcStart >= this.length) return dst || $21b0e1a146dc820f$require$Buffer.alloc(0);
    if (srcEnd <= 0) return dst || $21b0e1a146dc820f$require$Buffer.alloc(0);
    var copy = !!dst;
    var off = this._offset(srcStart);
    var len = srcEnd - srcStart;
    var bytes = len;
    var bufoff = copy && dstStart || 0;
    var start = off[1];
    // copy/slice everything
    if (srcStart === 0 && srcEnd === this.length) {
        if (!copy) // slice, but full concat if multiple buffers
        return this._bufs.length === 1 ? this._bufs[0] : $21b0e1a146dc820f$require$Buffer.concat(this._bufs, this.length);
        // copy, need to copy individual buffers
        for(var i = 0; i < this._bufs.length; i++){
            this._bufs[i].copy(dst, bufoff);
            bufoff += this._bufs[i].length;
        }
        return dst;
    }
    // easy, cheap case where it's a subset of one of the buffers
    if (bytes <= this._bufs[off[0]].length - start) return copy ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes) : this._bufs[off[0]].slice(start, start + bytes);
    if (!copy) // a slice, we need something to copy in to
    dst = $21b0e1a146dc820f$require$Buffer.allocUnsafe(len);
    for(var i1 = off[0]; i1 < this._bufs.length; i1++){
        var l = this._bufs[i1].length - start;
        if (bytes > l) {
            this._bufs[i1].copy(dst, bufoff, start);
            bufoff += l;
        } else {
            this._bufs[i1].copy(dst, bufoff, start, start + bytes);
            bufoff += l;
            break;
        }
        bytes -= l;
        if (start) start = 0;
    }
    // safeguard so that we don't return uninitialized memory
    if (dst.length > bufoff) return dst.slice(0, bufoff);
    return dst;
};
$21b0e1a146dc820f$var$BufferList.prototype.shallowSlice = function shallowSlice(start, end) {
    start = start || 0;
    end = typeof end !== "number" ? this.length : end;
    if (start < 0) start += this.length;
    if (end < 0) end += this.length;
    if (start === end) return this._new();
    var startOffset = this._offset(start);
    var endOffset = this._offset(end);
    var buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1);
    if (endOffset[1] === 0) buffers.pop();
    else buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1]);
    if (startOffset[1] !== 0) buffers[0] = buffers[0].slice(startOffset[1]);
    return this._new(buffers);
};
$21b0e1a146dc820f$var$BufferList.prototype.toString = function toString(encoding, start, end) {
    return this.slice(start, end).toString(encoding);
};
$21b0e1a146dc820f$var$BufferList.prototype.consume = function consume(bytes) {
    // first, normalize the argument, in accordance with how Buffer does it
    bytes = Math.trunc(bytes);
    // do nothing if not a positive number
    if (Number.isNaN(bytes) || bytes <= 0) return this;
    while(this._bufs.length)if (bytes >= this._bufs[0].length) {
        bytes -= this._bufs[0].length;
        this.length -= this._bufs[0].length;
        this._bufs.shift();
    } else {
        this._bufs[0] = this._bufs[0].slice(bytes);
        this.length -= bytes;
        break;
    }
    return this;
};
$21b0e1a146dc820f$var$BufferList.prototype.duplicate = function duplicate() {
    var copy = this._new();
    for(var i = 0; i < this._bufs.length; i++)copy.append(this._bufs[i]);
    return copy;
};
$21b0e1a146dc820f$var$BufferList.prototype.append = function append(buf) {
    if (buf == null) return this;
    if (buf.buffer) // append a view of the underlying ArrayBuffer
    this._appendBuffer($21b0e1a146dc820f$require$Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength));
    else if (Array.isArray(buf)) for(var i = 0; i < buf.length; i++)this.append(buf[i]);
    else if (this._isBufferList(buf)) // unwrap argument into individual BufferLists
    for(var i1 = 0; i1 < buf._bufs.length; i1++)this.append(buf._bufs[i1]);
    else {
        // coerce number arguments to strings, since Buffer(number) does
        // uninitialized memory allocation
        if (typeof buf === "number") buf = buf.toString();
        this._appendBuffer($21b0e1a146dc820f$require$Buffer.from(buf));
    }
    return this;
};
$21b0e1a146dc820f$var$BufferList.prototype._appendBuffer = function appendBuffer(buf) {
    this._bufs.push(buf);
    this.length += buf.length;
};
$21b0e1a146dc820f$var$BufferList.prototype.indexOf = function(search, offset, encoding) {
    if (encoding === undefined && typeof offset === "string") {
        encoding = offset;
        offset = undefined;
    }
    if (typeof search === "function" || Array.isArray(search)) throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.');
    else if (typeof search === "number") search = $21b0e1a146dc820f$require$Buffer.from([
        search
    ]);
    else if (typeof search === "string") search = $21b0e1a146dc820f$require$Buffer.from(search, encoding);
    else if (this._isBufferList(search)) search = search.slice();
    else if (Array.isArray(search.buffer)) search = $21b0e1a146dc820f$require$Buffer.from(search.buffer, search.byteOffset, search.byteLength);
    else if (!$21b0e1a146dc820f$require$Buffer.isBuffer(search)) search = $21b0e1a146dc820f$require$Buffer.from(search);
    offset = Number(offset || 0);
    if (isNaN(offset)) offset = 0;
    if (offset < 0) offset = this.length + offset;
    if (offset < 0) offset = 0;
    if (search.length === 0) return offset > this.length ? this.length : offset;
    var blOffset = this._offset(offset);
    var blIndex = blOffset[0] // index of which internal buffer we're working on
    ;
    var buffOffset = blOffset[1] // offset of the internal buffer we're working on
    ;
    // scan over each buffer
    for(; blIndex < this._bufs.length; blIndex++){
        var buff = this._bufs[blIndex];
        while(buffOffset < buff.length){
            var availableWindow = buff.length - buffOffset;
            if (availableWindow >= search.length) {
                var nativeSearchResult = buff.indexOf(search, buffOffset);
                if (nativeSearchResult !== -1) return this._reverseOffset([
                    blIndex,
                    nativeSearchResult
                ]);
                buffOffset = buff.length - search.length + 1 // end of native search window
                ;
            } else {
                var revOffset = this._reverseOffset([
                    blIndex,
                    buffOffset
                ]);
                if (this._match(revOffset, search)) return revOffset;
                buffOffset++;
            }
        }
        buffOffset = 0;
    }
    return -1;
};
$21b0e1a146dc820f$var$BufferList.prototype._match = function(offset, search) {
    if (this.length - offset < search.length) return false;
    for(var searchOffset = 0; searchOffset < search.length; searchOffset++){
        if (this.get(offset + searchOffset) !== search[searchOffset]) return false;
    }
    return true;
};
(function() {
    var methods = {
        readDoubleBE: 8,
        readDoubleLE: 8,
        readFloatBE: 4,
        readFloatLE: 4,
        readInt32BE: 4,
        readInt32LE: 4,
        readUInt32BE: 4,
        readUInt32LE: 4,
        readInt16BE: 2,
        readInt16LE: 2,
        readUInt16BE: 2,
        readUInt16LE: 2,
        readInt8: 1,
        readUInt8: 1,
        readIntBE: null,
        readIntLE: null,
        readUIntBE: null,
        readUIntLE: null
    };
    for(var m in methods)(function(m) {
        if (methods[m] === null) $21b0e1a146dc820f$var$BufferList.prototype[m] = function(offset, byteLength) {
            return this.slice(offset, offset + byteLength)[m](0, byteLength);
        };
        else $21b0e1a146dc820f$var$BufferList.prototype[m] = function() {
            var offset = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
            return this.slice(offset, offset + methods[m])[m](0);
        };
    })(m);
})();
// Used internally by the class and also as an indicator of this object being
// a `BufferList`. It's not possible to use `instanceof BufferList` in a browser
// environment because there could be multiple different copies of the
// BufferList class and some `BufferList`s might be `BufferList`s.
$21b0e1a146dc820f$var$BufferList.prototype._isBufferList = function _isBufferList(b) {
    return b instanceof $21b0e1a146dc820f$var$BufferList || $21b0e1a146dc820f$var$BufferList.isBufferList(b);
};
$21b0e1a146dc820f$var$BufferList.isBufferList = function isBufferList(b) {
    return b != null && b[$21b0e1a146dc820f$var$symbol];
};
module.exports = $21b0e1a146dc820f$var$BufferList;

});


parcelRequire.register("5iHVL", function(module, exports) {

var $d92bh = parcelRequire("d92bh");
var $3dc0b5ed668b5ec4$var$Packet = function Packet() {
    "use strict";
    (0, $d92bh.default)(this, Packet);
    this.cmd = null;
    this.retain = false;
    this.qos = 0;
    this.dup = false;
    this.length = -1;
    this.topic = null;
    this.payload = null;
};
module.exports = $3dc0b5ed668b5ec4$var$Packet;

});

parcelRequire.register("dsnGd", function(module, exports) {
/* Protocol - protocol constants */ 
var $kgUAE = parcelRequire("kgUAE");
var $9cc04235db3894a8$require$Buffer = $kgUAE.Buffer;
var $9cc04235db3894a8$var$protocol = module.exports;
/* Command code => mnemonic */ $9cc04235db3894a8$var$protocol.types = {
    0: "reserved",
    1: "connect",
    2: "connack",
    3: "publish",
    4: "puback",
    5: "pubrec",
    6: "pubrel",
    7: "pubcomp",
    8: "subscribe",
    9: "suback",
    10: "unsubscribe",
    11: "unsuback",
    12: "pingreq",
    13: "pingresp",
    14: "disconnect",
    15: "auth"
};
/* Mnemonic => Command code */ $9cc04235db3894a8$var$protocol.codes = {};
for(var $9cc04235db3894a8$var$k in $9cc04235db3894a8$var$protocol.types){
    var $9cc04235db3894a8$var$v = $9cc04235db3894a8$var$protocol.types[$9cc04235db3894a8$var$k];
    $9cc04235db3894a8$var$protocol.codes[$9cc04235db3894a8$var$v] = $9cc04235db3894a8$var$k;
}
/* Header */ $9cc04235db3894a8$var$protocol.CMD_SHIFT = 4;
$9cc04235db3894a8$var$protocol.CMD_MASK = 0xF0;
$9cc04235db3894a8$var$protocol.DUP_MASK = 0x08;
$9cc04235db3894a8$var$protocol.QOS_MASK = 0x03;
$9cc04235db3894a8$var$protocol.QOS_SHIFT = 1;
$9cc04235db3894a8$var$protocol.RETAIN_MASK = 0x01;
/* Length */ $9cc04235db3894a8$var$protocol.VARBYTEINT_MASK = 0x7F;
$9cc04235db3894a8$var$protocol.VARBYTEINT_FIN_MASK = 0x80;
$9cc04235db3894a8$var$protocol.VARBYTEINT_MAX = 268435455;
/* Connack */ $9cc04235db3894a8$var$protocol.SESSIONPRESENT_MASK = 0x01;
$9cc04235db3894a8$var$protocol.SESSIONPRESENT_HEADER = $9cc04235db3894a8$require$Buffer.from([
    $9cc04235db3894a8$var$protocol.SESSIONPRESENT_MASK
]);
$9cc04235db3894a8$var$protocol.CONNACK_HEADER = $9cc04235db3894a8$require$Buffer.from([
    $9cc04235db3894a8$var$protocol.codes.connack << $9cc04235db3894a8$var$protocol.CMD_SHIFT
]);
/* Connect */ $9cc04235db3894a8$var$protocol.USERNAME_MASK = 0x80;
$9cc04235db3894a8$var$protocol.PASSWORD_MASK = 0x40;
$9cc04235db3894a8$var$protocol.WILL_RETAIN_MASK = 0x20;
$9cc04235db3894a8$var$protocol.WILL_QOS_MASK = 0x18;
$9cc04235db3894a8$var$protocol.WILL_QOS_SHIFT = 3;
$9cc04235db3894a8$var$protocol.WILL_FLAG_MASK = 0x04;
$9cc04235db3894a8$var$protocol.CLEAN_SESSION_MASK = 0x02;
$9cc04235db3894a8$var$protocol.CONNECT_HEADER = $9cc04235db3894a8$require$Buffer.from([
    $9cc04235db3894a8$var$protocol.codes.connect << $9cc04235db3894a8$var$protocol.CMD_SHIFT
]);
/* Properties */ $9cc04235db3894a8$var$protocol.properties = {
    sessionExpiryInterval: 17,
    willDelayInterval: 24,
    receiveMaximum: 33,
    maximumPacketSize: 39,
    topicAliasMaximum: 34,
    requestResponseInformation: 25,
    requestProblemInformation: 23,
    userProperties: 38,
    authenticationMethod: 21,
    authenticationData: 22,
    payloadFormatIndicator: 1,
    messageExpiryInterval: 2,
    contentType: 3,
    responseTopic: 8,
    correlationData: 9,
    maximumQoS: 36,
    retainAvailable: 37,
    assignedClientIdentifier: 18,
    reasonString: 31,
    wildcardSubscriptionAvailable: 40,
    subscriptionIdentifiersAvailable: 41,
    sharedSubscriptionAvailable: 42,
    serverKeepAlive: 19,
    responseInformation: 26,
    serverReference: 28,
    topicAlias: 35,
    subscriptionIdentifier: 11
};
$9cc04235db3894a8$var$protocol.propertiesCodes = {};
for(var $9cc04235db3894a8$var$prop in $9cc04235db3894a8$var$protocol.properties){
    var $9cc04235db3894a8$var$id = $9cc04235db3894a8$var$protocol.properties[$9cc04235db3894a8$var$prop];
    $9cc04235db3894a8$var$protocol.propertiesCodes[$9cc04235db3894a8$var$id] = $9cc04235db3894a8$var$prop;
}
$9cc04235db3894a8$var$protocol.propertiesTypes = {
    sessionExpiryInterval: "int32",
    willDelayInterval: "int32",
    receiveMaximum: "int16",
    maximumPacketSize: "int32",
    topicAliasMaximum: "int16",
    requestResponseInformation: "byte",
    requestProblemInformation: "byte",
    userProperties: "pair",
    authenticationMethod: "string",
    authenticationData: "binary",
    payloadFormatIndicator: "byte",
    messageExpiryInterval: "int32",
    contentType: "string",
    responseTopic: "string",
    correlationData: "binary",
    maximumQoS: "int8",
    retainAvailable: "byte",
    assignedClientIdentifier: "string",
    reasonString: "string",
    wildcardSubscriptionAvailable: "byte",
    subscriptionIdentifiersAvailable: "byte",
    sharedSubscriptionAvailable: "byte",
    serverKeepAlive: "int16",
    responseInformation: "string",
    serverReference: "string",
    topicAlias: "int16",
    subscriptionIdentifier: "var"
};
function $9cc04235db3894a8$var$genHeader(type) {
    return [
        0,
        1,
        2
    ].map(function(qos) {
        return [
            0,
            1
        ].map(function(dup) {
            return [
                0,
                1
            ].map(function(retain) {
                var buf = $9cc04235db3894a8$require$Buffer.alloc(1);
                buf.writeUInt8($9cc04235db3894a8$var$protocol.codes[type] << $9cc04235db3894a8$var$protocol.CMD_SHIFT | (dup ? $9cc04235db3894a8$var$protocol.DUP_MASK : 0) | qos << $9cc04235db3894a8$var$protocol.QOS_SHIFT | retain, 0, true);
                return buf;
            });
        });
    });
}
/* Publish */ $9cc04235db3894a8$var$protocol.PUBLISH_HEADER = $9cc04235db3894a8$var$genHeader("publish");
/* Subscribe */ $9cc04235db3894a8$var$protocol.SUBSCRIBE_HEADER = $9cc04235db3894a8$var$genHeader("subscribe");
$9cc04235db3894a8$var$protocol.SUBSCRIBE_OPTIONS_QOS_MASK = 0x03;
$9cc04235db3894a8$var$protocol.SUBSCRIBE_OPTIONS_NL_MASK = 0x01;
$9cc04235db3894a8$var$protocol.SUBSCRIBE_OPTIONS_NL_SHIFT = 2;
$9cc04235db3894a8$var$protocol.SUBSCRIBE_OPTIONS_RAP_MASK = 0x01;
$9cc04235db3894a8$var$protocol.SUBSCRIBE_OPTIONS_RAP_SHIFT = 3;
$9cc04235db3894a8$var$protocol.SUBSCRIBE_OPTIONS_RH_MASK = 0x03;
$9cc04235db3894a8$var$protocol.SUBSCRIBE_OPTIONS_RH_SHIFT = 4;
$9cc04235db3894a8$var$protocol.SUBSCRIBE_OPTIONS_RH = [
    0x00,
    0x10,
    0x20
];
$9cc04235db3894a8$var$protocol.SUBSCRIBE_OPTIONS_NL = 0x04;
$9cc04235db3894a8$var$protocol.SUBSCRIBE_OPTIONS_RAP = 0x08;
$9cc04235db3894a8$var$protocol.SUBSCRIBE_OPTIONS_QOS = [
    0x00,
    0x01,
    0x02
];
/* Unsubscribe */ $9cc04235db3894a8$var$protocol.UNSUBSCRIBE_HEADER = $9cc04235db3894a8$var$genHeader("unsubscribe");
/* Confirmations */ $9cc04235db3894a8$var$protocol.ACKS = {
    unsuback: $9cc04235db3894a8$var$genHeader("unsuback"),
    puback: $9cc04235db3894a8$var$genHeader("puback"),
    pubcomp: $9cc04235db3894a8$var$genHeader("pubcomp"),
    pubrel: $9cc04235db3894a8$var$genHeader("pubrel"),
    pubrec: $9cc04235db3894a8$var$genHeader("pubrec")
};
$9cc04235db3894a8$var$protocol.SUBACK_HEADER = $9cc04235db3894a8$require$Buffer.from([
    $9cc04235db3894a8$var$protocol.codes.suback << $9cc04235db3894a8$var$protocol.CMD_SHIFT
]);
/* Protocol versions */ $9cc04235db3894a8$var$protocol.VERSION3 = $9cc04235db3894a8$require$Buffer.from([
    3
]);
$9cc04235db3894a8$var$protocol.VERSION4 = $9cc04235db3894a8$require$Buffer.from([
    4
]);
$9cc04235db3894a8$var$protocol.VERSION5 = $9cc04235db3894a8$require$Buffer.from([
    5
]);
$9cc04235db3894a8$var$protocol.VERSION131 = $9cc04235db3894a8$require$Buffer.from([
    131
]);
$9cc04235db3894a8$var$protocol.VERSION132 = $9cc04235db3894a8$require$Buffer.from([
    132
]);
/* QoS */ $9cc04235db3894a8$var$protocol.QOS = [
    0,
    1,
    2
].map(function(qos) {
    return $9cc04235db3894a8$require$Buffer.from([
        qos
    ]);
});
/* Empty packets */ $9cc04235db3894a8$var$protocol.EMPTY = {
    pingreq: $9cc04235db3894a8$require$Buffer.from([
        $9cc04235db3894a8$var$protocol.codes.pingreq << 4,
        0
    ]),
    pingresp: $9cc04235db3894a8$require$Buffer.from([
        $9cc04235db3894a8$var$protocol.codes.pingresp << 4,
        0
    ]),
    disconnect: $9cc04235db3894a8$require$Buffer.from([
        $9cc04235db3894a8$var$protocol.codes.disconnect << 4,
        0
    ])
};

});


parcelRequire.register("bDv4t", function(module, exports) {

var $d92bh = parcelRequire("d92bh");

var $883e7 = parcelRequire("883e7");

var $6KwX4 = parcelRequire("6KwX4");

var $jWEoH = parcelRequire("jWEoH");

var $kgUAE = parcelRequire("kgUAE");
var $878b70502961cd05$require$Buffer = $kgUAE.Buffer;

var $fHNWs = parcelRequire("fHNWs");

var $eJwY4 = parcelRequire("eJwY4");
function $878b70502961cd05$var$generate(packet, opts) {
    var stream = new $878b70502961cd05$var$Accumulator();
    $fHNWs(packet, stream, opts);
    return stream.concat();
}
var $878b70502961cd05$var$Accumulator = /*#__PURE__*/ function(EventEmitter) {
    "use strict";
    (0, $6KwX4.default)(Accumulator, EventEmitter);
    var _super = (0, $jWEoH.default)(Accumulator);
    function Accumulator() {
        (0, $d92bh.default)(this, Accumulator);
        var _this;
        _this = _super.call(this);
        _this._array = new Array(20);
        _this._i = 0;
        return _this;
    }
    (0, $883e7.default)(Accumulator, [
        {
            key: "write",
            value: function write(chunk) {
                this._array[this._i++] = chunk;
                return true;
            }
        },
        {
            key: "concat",
            value: function concat() {
                var length = 0;
                var lengths = new Array(this._array.length);
                var list = this._array;
                var pos = 0;
                var i;
                for(i = 0; i < list.length && list[i] !== undefined; i++){
                    if (typeof list[i] !== "string") lengths[i] = list[i].length;
                    else lengths[i] = $878b70502961cd05$require$Buffer.byteLength(list[i]);
                    length += lengths[i];
                }
                var result = $878b70502961cd05$require$Buffer.allocUnsafe(length);
                for(i = 0; i < list.length && list[i] !== undefined; i++)if (typeof list[i] !== "string") {
                    list[i].copy(result, pos);
                    pos += lengths[i];
                } else {
                    result.write(list[i], pos);
                    pos += lengths[i];
                }
                return result;
            }
        }
    ]);
    return Accumulator;
}($eJwY4);
module.exports = $878b70502961cd05$var$generate;

});
parcelRequire.register("fHNWs", function(module, exports) {

var $kgUAE = parcelRequire("kgUAE");
var $b6f19c9a0a044808$require$Buffer = $kgUAE.Buffer;

var $dsnGd = parcelRequire("dsnGd");
var $b6f19c9a0a044808$var$empty = $b6f19c9a0a044808$require$Buffer.allocUnsafe(0);
var $b6f19c9a0a044808$var$zeroBuf = $b6f19c9a0a044808$require$Buffer.from([
    0
]);

var $heu3x = parcelRequire("heu3x");

var $5ZUJF = parcelRequire("5ZUJF");
var $b6f19c9a0a044808$require$nextTick = $5ZUJF.nextTick;

var $b6f19c9a0a044808$var$debug = (parcelRequire("8woo2"))("mqtt-packet:writeToStream");
var $b6f19c9a0a044808$var$numCache = $heu3x.cache;
var $b6f19c9a0a044808$var$generateNumber = $heu3x.generateNumber;
var $b6f19c9a0a044808$var$generateCache = $heu3x.generateCache;
var $b6f19c9a0a044808$var$genBufVariableByteInt = $heu3x.genBufVariableByteInt;
var $b6f19c9a0a044808$var$generate4ByteBuffer = $heu3x.generate4ByteBuffer;
var $b6f19c9a0a044808$var$writeNumber = $b6f19c9a0a044808$var$writeNumberCached;
var $b6f19c9a0a044808$var$toGenerate = true;
function $b6f19c9a0a044808$var$generate(packet, stream, opts) {
    $b6f19c9a0a044808$var$debug("generate called");
    if (stream.cork) {
        stream.cork();
        $b6f19c9a0a044808$require$nextTick($b6f19c9a0a044808$var$uncork, stream);
    }
    if ($b6f19c9a0a044808$var$toGenerate) {
        $b6f19c9a0a044808$var$toGenerate = false;
        $b6f19c9a0a044808$var$generateCache();
    }
    $b6f19c9a0a044808$var$debug("generate: packet.cmd: %s", packet.cmd);
    switch(packet.cmd){
        case "connect":
            return $b6f19c9a0a044808$var$connect(packet, stream, opts);
        case "connack":
            return $b6f19c9a0a044808$var$connack(packet, stream, opts);
        case "publish":
            return $b6f19c9a0a044808$var$publish(packet, stream, opts);
        case "puback":
        case "pubrec":
        case "pubrel":
        case "pubcomp":
            return $b6f19c9a0a044808$var$confirmation(packet, stream, opts);
        case "subscribe":
            return $b6f19c9a0a044808$var$subscribe(packet, stream, opts);
        case "suback":
            return $b6f19c9a0a044808$var$suback(packet, stream, opts);
        case "unsubscribe":
            return $b6f19c9a0a044808$var$unsubscribe(packet, stream, opts);
        case "unsuback":
            return $b6f19c9a0a044808$var$unsuback(packet, stream, opts);
        case "pingreq":
        case "pingresp":
            return $b6f19c9a0a044808$var$emptyPacket(packet, stream, opts);
        case "disconnect":
            return $b6f19c9a0a044808$var$disconnect(packet, stream, opts);
        case "auth":
            return $b6f19c9a0a044808$var$auth(packet, stream, opts);
        default:
            stream.emit("error", new Error("Unknown command"));
            return false;
    }
}
/**
 * Controls numbers cache.
 * Set to "false" to allocate buffers on-the-flight instead of pre-generated cache
 */ Object.defineProperty($b6f19c9a0a044808$var$generate, "cacheNumbers", {
    get: function() {
        return $b6f19c9a0a044808$var$writeNumber === $b6f19c9a0a044808$var$writeNumberCached;
    },
    set: function(value) {
        if (value) {
            if (!$b6f19c9a0a044808$var$numCache || Object.keys($b6f19c9a0a044808$var$numCache).length === 0) $b6f19c9a0a044808$var$toGenerate = true;
            $b6f19c9a0a044808$var$writeNumber = $b6f19c9a0a044808$var$writeNumberCached;
        } else {
            $b6f19c9a0a044808$var$toGenerate = false;
            $b6f19c9a0a044808$var$writeNumber = $b6f19c9a0a044808$var$writeNumberGenerated;
        }
    }
});
function $b6f19c9a0a044808$var$uncork(stream) {
    stream.uncork();
}
function $b6f19c9a0a044808$var$connect(packet, stream, opts) {
    var settings = packet || {};
    var protocolId = settings.protocolId || "MQTT";
    var protocolVersion = settings.protocolVersion || 4;
    var will = settings.will;
    var clean = settings.clean;
    var keepalive = settings.keepalive || 0;
    var clientId = settings.clientId || "";
    var username = settings.username;
    var password = settings.password;
    /* mqtt5 new oprions */ var properties = settings.properties;
    if (clean === undefined) clean = true;
    var length = 0;
    // Must be a string and non-falsy
    if (!protocolId || typeof protocolId !== "string" && !$b6f19c9a0a044808$require$Buffer.isBuffer(protocolId)) {
        stream.emit("error", new Error("Invalid protocolId"));
        return false;
    } else length += protocolId.length + 2;
    // Must be 3 or 4 or 5
    if (protocolVersion !== 3 && protocolVersion !== 4 && protocolVersion !== 5) {
        stream.emit("error", new Error("Invalid protocol version"));
        return false;
    } else length += 1;
    // ClientId might be omitted in 3.1.1 and 5, but only if cleanSession is set to 1
    if ((typeof clientId === "string" || $b6f19c9a0a044808$require$Buffer.isBuffer(clientId)) && (clientId || protocolVersion >= 4) && (clientId || clean)) length += $b6f19c9a0a044808$require$Buffer.byteLength(clientId) + 2;
    else {
        if (protocolVersion < 4) {
            stream.emit("error", new Error("clientId must be supplied before 3.1.1"));
            return false;
        }
        if (clean * 1 === 0) {
            stream.emit("error", new Error("clientId must be given if cleanSession set to 0"));
            return false;
        }
    }
    // Must be a two byte number
    if (typeof keepalive !== "number" || keepalive < 0 || keepalive > 65535 || keepalive % 1 !== 0) {
        stream.emit("error", new Error("Invalid keepalive"));
        return false;
    } else length += 2;
    // Connect flags
    length += 1;
    // Properties
    if (protocolVersion === 5) {
        var propertiesData = $b6f19c9a0a044808$var$getProperties(stream, properties);
        if (!propertiesData) return false;
        length += propertiesData.length;
    }
    // If will exists...
    if (will) {
        // It must be an object
        if (typeof will !== "object") {
            stream.emit("error", new Error("Invalid will"));
            return false;
        }
        // It must have topic typeof string
        if (!will.topic || typeof will.topic !== "string") {
            stream.emit("error", new Error("Invalid will topic"));
            return false;
        } else length += $b6f19c9a0a044808$require$Buffer.byteLength(will.topic) + 2;
        // Payload
        length += 2 // payload length
        ;
        if (will.payload) {
            if (will.payload.length >= 0) {
                if (typeof will.payload === "string") length += $b6f19c9a0a044808$require$Buffer.byteLength(will.payload);
                else length += will.payload.length;
            } else {
                stream.emit("error", new Error("Invalid will payload"));
                return false;
            }
        }
        // will properties
        var willProperties = {};
        if (protocolVersion === 5) {
            willProperties = $b6f19c9a0a044808$var$getProperties(stream, will.properties);
            if (!willProperties) return false;
            length += willProperties.length;
        }
    }
    // Username
    var providedUsername = false;
    if (username != null) {
        if ($b6f19c9a0a044808$var$isStringOrBuffer(username)) {
            providedUsername = true;
            length += $b6f19c9a0a044808$require$Buffer.byteLength(username) + 2;
        } else {
            stream.emit("error", new Error("Invalid username"));
            return false;
        }
    }
    // Password
    if (password != null) {
        if (!providedUsername) {
            stream.emit("error", new Error("Username is required to use password"));
            return false;
        }
        if ($b6f19c9a0a044808$var$isStringOrBuffer(password)) length += $b6f19c9a0a044808$var$byteLength(password) + 2;
        else {
            stream.emit("error", new Error("Invalid password"));
            return false;
        }
    }
    // Generate header
    stream.write($dsnGd.CONNECT_HEADER);
    // Generate length
    $b6f19c9a0a044808$var$writeVarByteInt(stream, length);
    // Generate protocol ID
    $b6f19c9a0a044808$var$writeStringOrBuffer(stream, protocolId);
    if (settings.bridgeMode) protocolVersion += 128;
    stream.write(protocolVersion === 131 ? $dsnGd.VERSION131 : protocolVersion === 132 ? $dsnGd.VERSION132 : protocolVersion === 4 ? $dsnGd.VERSION4 : protocolVersion === 5 ? $dsnGd.VERSION5 : $dsnGd.VERSION3);
    // Connect flags
    var flags = 0;
    flags |= username != null ? $dsnGd.USERNAME_MASK : 0;
    flags |= password != null ? $dsnGd.PASSWORD_MASK : 0;
    flags |= will && will.retain ? $dsnGd.WILL_RETAIN_MASK : 0;
    flags |= will && will.qos ? will.qos << $dsnGd.WILL_QOS_SHIFT : 0;
    flags |= will ? $dsnGd.WILL_FLAG_MASK : 0;
    flags |= clean ? $dsnGd.CLEAN_SESSION_MASK : 0;
    stream.write($b6f19c9a0a044808$require$Buffer.from([
        flags
    ]));
    // Keepalive
    $b6f19c9a0a044808$var$writeNumber(stream, keepalive);
    // Properties
    if (protocolVersion === 5) propertiesData.write();
    // Client ID
    $b6f19c9a0a044808$var$writeStringOrBuffer(stream, clientId);
    // Will
    if (will) {
        if (protocolVersion === 5) willProperties.write();
        $b6f19c9a0a044808$var$writeString(stream, will.topic);
        $b6f19c9a0a044808$var$writeStringOrBuffer(stream, will.payload);
    }
    // Username and password
    if (username != null) $b6f19c9a0a044808$var$writeStringOrBuffer(stream, username);
    if (password != null) $b6f19c9a0a044808$var$writeStringOrBuffer(stream, password);
    // This is a small packet that happens only once on a stream
    // We assume the stream is always free to receive more data after this
    return true;
}
function $b6f19c9a0a044808$var$connack(packet, stream, opts) {
    var version = opts ? opts.protocolVersion : 4;
    var settings = packet || {};
    var rc = version === 5 ? settings.reasonCode : settings.returnCode;
    var properties = settings.properties;
    var length = 2 // length of rc and sessionHeader
    ;
    // Check return code
    if (typeof rc !== "number") {
        stream.emit("error", new Error("Invalid return code"));
        return false;
    }
    // mqtt5 properties
    var propertiesData = null;
    if (version === 5) {
        propertiesData = $b6f19c9a0a044808$var$getProperties(stream, properties);
        if (!propertiesData) return false;
        length += propertiesData.length;
    }
    stream.write($dsnGd.CONNACK_HEADER);
    // length
    $b6f19c9a0a044808$var$writeVarByteInt(stream, length);
    stream.write(settings.sessionPresent ? $dsnGd.SESSIONPRESENT_HEADER : $b6f19c9a0a044808$var$zeroBuf);
    stream.write($b6f19c9a0a044808$require$Buffer.from([
        rc
    ]));
    if (propertiesData != null) propertiesData.write();
    return true;
}
function $b6f19c9a0a044808$var$publish(packet, stream, opts) {
    $b6f19c9a0a044808$var$debug("publish: packet: %o", packet);
    var version = opts ? opts.protocolVersion : 4;
    var settings = packet || {};
    var qos = settings.qos || 0;
    var retain = settings.retain ? $dsnGd.RETAIN_MASK : 0;
    var topic = settings.topic;
    var payload = settings.payload || $b6f19c9a0a044808$var$empty;
    var id = settings.messageId;
    var properties = settings.properties;
    var length = 0;
    // Topic must be a non-empty string or Buffer
    if (typeof topic === "string") length += $b6f19c9a0a044808$require$Buffer.byteLength(topic) + 2;
    else if ($b6f19c9a0a044808$require$Buffer.isBuffer(topic)) length += topic.length + 2;
    else {
        stream.emit("error", new Error("Invalid topic"));
        return false;
    }
    // Get the payload length
    if (!$b6f19c9a0a044808$require$Buffer.isBuffer(payload)) length += $b6f19c9a0a044808$require$Buffer.byteLength(payload);
    else length += payload.length;
    // Message ID must a number if qos > 0
    if (qos && typeof id !== "number") {
        stream.emit("error", new Error("Invalid messageId"));
        return false;
    } else if (qos) length += 2;
    // mqtt5 properties
    var propertiesData = null;
    if (version === 5) {
        propertiesData = $b6f19c9a0a044808$var$getProperties(stream, properties);
        if (!propertiesData) return false;
        length += propertiesData.length;
    }
    // Header
    stream.write($dsnGd.PUBLISH_HEADER[qos][settings.dup ? 1 : 0][retain ? 1 : 0]);
    // Remaining length
    $b6f19c9a0a044808$var$writeVarByteInt(stream, length);
    // Topic
    $b6f19c9a0a044808$var$writeNumber(stream, $b6f19c9a0a044808$var$byteLength(topic));
    stream.write(topic);
    // Message ID
    if (qos > 0) $b6f19c9a0a044808$var$writeNumber(stream, id);
    // Properties
    if (propertiesData != null) propertiesData.write();
    // Payload
    $b6f19c9a0a044808$var$debug("publish: payload: %o", payload);
    return stream.write(payload);
}
/* Puback, pubrec, pubrel and pubcomp */ function $b6f19c9a0a044808$var$confirmation(packet, stream, opts) {
    var version = opts ? opts.protocolVersion : 4;
    var settings = packet || {};
    var type = settings.cmd || "puback";
    var id = settings.messageId;
    var dup = settings.dup && type === "pubrel" ? $dsnGd.DUP_MASK : 0;
    var qos = 0;
    var reasonCode = settings.reasonCode;
    var properties = settings.properties;
    var length = version === 5 ? 3 : 2;
    if (type === "pubrel") qos = 1;
    // Check message ID
    if (typeof id !== "number") {
        stream.emit("error", new Error("Invalid messageId"));
        return false;
    }
    // properies mqtt 5
    var propertiesData = null;
    if (version === 5) // Confirm should not add empty property length with no properties (rfc 3.4.2.2.1)
    {
        if (typeof properties === "object") {
            propertiesData = $b6f19c9a0a044808$var$getPropertiesByMaximumPacketSize(stream, properties, opts, length);
            if (!propertiesData) return false;
            length += propertiesData.length;
        }
    }
    // Header
    stream.write($dsnGd.ACKS[type][qos][dup][0]);
    // Length
    $b6f19c9a0a044808$var$writeVarByteInt(stream, length);
    // Message ID
    $b6f19c9a0a044808$var$writeNumber(stream, id);
    // reason code in header
    if (version === 5) stream.write($b6f19c9a0a044808$require$Buffer.from([
        reasonCode
    ]));
    // properies mqtt 5
    if (propertiesData !== null) propertiesData.write();
    return true;
}
function $b6f19c9a0a044808$var$subscribe(packet, stream, opts) {
    $b6f19c9a0a044808$var$debug("subscribe: packet: ");
    var version = opts ? opts.protocolVersion : 4;
    var settings = packet || {};
    var dup = settings.dup ? $dsnGd.DUP_MASK : 0;
    var id = settings.messageId;
    var subs = settings.subscriptions;
    var properties = settings.properties;
    var length = 0;
    // Check message ID
    if (typeof id !== "number") {
        stream.emit("error", new Error("Invalid messageId"));
        return false;
    } else length += 2;
    // properies mqtt 5
    var propertiesData = null;
    if (version === 5) {
        propertiesData = $b6f19c9a0a044808$var$getProperties(stream, properties);
        if (!propertiesData) return false;
        length += propertiesData.length;
    }
    // Check subscriptions
    if (typeof subs === "object" && subs.length) for(var i = 0; i < subs.length; i += 1){
        var itopic = subs[i].topic;
        var iqos = subs[i].qos;
        if (typeof itopic !== "string") {
            stream.emit("error", new Error("Invalid subscriptions - invalid topic"));
            return false;
        }
        if (typeof iqos !== "number") {
            stream.emit("error", new Error("Invalid subscriptions - invalid qos"));
            return false;
        }
        if (version === 5) {
            var nl = subs[i].nl || false;
            if (typeof nl !== "boolean") {
                stream.emit("error", new Error("Invalid subscriptions - invalid No Local"));
                return false;
            }
            var rap = subs[i].rap || false;
            if (typeof rap !== "boolean") {
                stream.emit("error", new Error("Invalid subscriptions - invalid Retain as Published"));
                return false;
            }
            var rh = subs[i].rh || 0;
            if (typeof rh !== "number" || rh > 2) {
                stream.emit("error", new Error("Invalid subscriptions - invalid Retain Handling"));
                return false;
            }
        }
        length += $b6f19c9a0a044808$require$Buffer.byteLength(itopic) + 2 + 1;
    }
    else {
        stream.emit("error", new Error("Invalid subscriptions"));
        return false;
    }
    // Generate header
    $b6f19c9a0a044808$var$debug("subscribe: writing to stream: %o", $dsnGd.SUBSCRIBE_HEADER);
    stream.write($dsnGd.SUBSCRIBE_HEADER[1][dup ? 1 : 0][0]);
    // Generate length
    $b6f19c9a0a044808$var$writeVarByteInt(stream, length);
    // Generate message ID
    $b6f19c9a0a044808$var$writeNumber(stream, id);
    // properies mqtt 5
    if (propertiesData !== null) propertiesData.write();
    var result = true;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        // Generate subs
        for(var _iterator = subs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var sub = _step.value;
            var jtopic = sub.topic;
            var jqos = sub.qos;
            var jnl = +sub.nl;
            var jrap = +sub.rap;
            var jrh = sub.rh;
            var joptions = void 0;
            // Write topic string
            $b6f19c9a0a044808$var$writeString(stream, jtopic);
            // options process
            joptions = $dsnGd.SUBSCRIBE_OPTIONS_QOS[jqos];
            if (version === 5) {
                joptions |= jnl ? $dsnGd.SUBSCRIBE_OPTIONS_NL : 0;
                joptions |= jrap ? $dsnGd.SUBSCRIBE_OPTIONS_RAP : 0;
                joptions |= jrh ? $dsnGd.SUBSCRIBE_OPTIONS_RH[jrh] : 0;
            }
            // Write options
            result = stream.write($b6f19c9a0a044808$require$Buffer.from([
                joptions
            ]));
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    return result;
}
function $b6f19c9a0a044808$var$suback(packet, stream, opts) {
    var version = opts ? opts.protocolVersion : 4;
    var settings = packet || {};
    var id = settings.messageId;
    var granted = settings.granted;
    var properties = settings.properties;
    var length = 0;
    // Check message ID
    if (typeof id !== "number") {
        stream.emit("error", new Error("Invalid messageId"));
        return false;
    } else length += 2;
    // Check granted qos vector
    if (typeof granted === "object" && granted.length) for(var i = 0; i < granted.length; i += 1){
        if (typeof granted[i] !== "number") {
            stream.emit("error", new Error("Invalid qos vector"));
            return false;
        }
        length += 1;
    }
    else {
        stream.emit("error", new Error("Invalid qos vector"));
        return false;
    }
    // properies mqtt 5
    var propertiesData = null;
    if (version === 5) {
        propertiesData = $b6f19c9a0a044808$var$getPropertiesByMaximumPacketSize(stream, properties, opts, length);
        if (!propertiesData) return false;
        length += propertiesData.length;
    }
    // header
    stream.write($dsnGd.SUBACK_HEADER);
    // Length
    $b6f19c9a0a044808$var$writeVarByteInt(stream, length);
    // Message ID
    $b6f19c9a0a044808$var$writeNumber(stream, id);
    // properies mqtt 5
    if (propertiesData !== null) propertiesData.write();
    return stream.write($b6f19c9a0a044808$require$Buffer.from(granted));
}
function $b6f19c9a0a044808$var$unsubscribe(packet, stream, opts) {
    var version = opts ? opts.protocolVersion : 4;
    var settings = packet || {};
    var id = settings.messageId;
    var dup = settings.dup ? $dsnGd.DUP_MASK : 0;
    var unsubs = settings.unsubscriptions;
    var properties = settings.properties;
    var length = 0;
    // Check message ID
    if (typeof id !== "number") {
        stream.emit("error", new Error("Invalid messageId"));
        return false;
    } else length += 2;
    // Check unsubs
    if (typeof unsubs === "object" && unsubs.length) for(var i = 0; i < unsubs.length; i += 1){
        if (typeof unsubs[i] !== "string") {
            stream.emit("error", new Error("Invalid unsubscriptions"));
            return false;
        }
        length += $b6f19c9a0a044808$require$Buffer.byteLength(unsubs[i]) + 2;
    }
    else {
        stream.emit("error", new Error("Invalid unsubscriptions"));
        return false;
    }
    // properies mqtt 5
    var propertiesData = null;
    if (version === 5) {
        propertiesData = $b6f19c9a0a044808$var$getProperties(stream, properties);
        if (!propertiesData) return false;
        length += propertiesData.length;
    }
    // Header
    stream.write($dsnGd.UNSUBSCRIBE_HEADER[1][dup ? 1 : 0][0]);
    // Length
    $b6f19c9a0a044808$var$writeVarByteInt(stream, length);
    // Message ID
    $b6f19c9a0a044808$var$writeNumber(stream, id);
    // properies mqtt 5
    if (propertiesData !== null) propertiesData.write();
    // Unsubs
    var result = true;
    for(var j = 0; j < unsubs.length; j++)result = $b6f19c9a0a044808$var$writeString(stream, unsubs[j]);
    return result;
}
function $b6f19c9a0a044808$var$unsuback(packet, stream, opts) {
    var version = opts ? opts.protocolVersion : 4;
    var settings = packet || {};
    var id = settings.messageId;
    var dup = settings.dup ? $dsnGd.DUP_MASK : 0;
    var granted = settings.granted;
    var properties = settings.properties;
    var type = settings.cmd;
    var qos = 0;
    var length = 2;
    // Check message ID
    if (typeof id !== "number") {
        stream.emit("error", new Error("Invalid messageId"));
        return false;
    }
    // Check granted
    if (version === 5) {
        if (typeof granted === "object" && granted.length) for(var i = 0; i < granted.length; i += 1){
            if (typeof granted[i] !== "number") {
                stream.emit("error", new Error("Invalid qos vector"));
                return false;
            }
            length += 1;
        }
        else {
            stream.emit("error", new Error("Invalid qos vector"));
            return false;
        }
    }
    // properies mqtt 5
    var propertiesData = null;
    if (version === 5) {
        propertiesData = $b6f19c9a0a044808$var$getPropertiesByMaximumPacketSize(stream, properties, opts, length);
        if (!propertiesData) return false;
        length += propertiesData.length;
    }
    // Header
    stream.write($dsnGd.ACKS[type][qos][dup][0]);
    // Length
    $b6f19c9a0a044808$var$writeVarByteInt(stream, length);
    // Message ID
    $b6f19c9a0a044808$var$writeNumber(stream, id);
    // properies mqtt 5
    if (propertiesData !== null) propertiesData.write();
    // payload
    if (version === 5) stream.write($b6f19c9a0a044808$require$Buffer.from(granted));
    return true;
}
function $b6f19c9a0a044808$var$emptyPacket(packet, stream, opts) {
    return stream.write($dsnGd.EMPTY[packet.cmd]);
}
function $b6f19c9a0a044808$var$disconnect(packet, stream, opts) {
    var version = opts ? opts.protocolVersion : 4;
    var settings = packet || {};
    var reasonCode = settings.reasonCode;
    var properties = settings.properties;
    var length = version === 5 ? 1 : 0;
    // properies mqtt 5
    var propertiesData = null;
    if (version === 5) {
        propertiesData = $b6f19c9a0a044808$var$getPropertiesByMaximumPacketSize(stream, properties, opts, length);
        if (!propertiesData) return false;
        length += propertiesData.length;
    }
    // Header
    stream.write($b6f19c9a0a044808$require$Buffer.from([
        $dsnGd.codes.disconnect << 4
    ]));
    // Length
    $b6f19c9a0a044808$var$writeVarByteInt(stream, length);
    // reason code in header
    if (version === 5) stream.write($b6f19c9a0a044808$require$Buffer.from([
        reasonCode
    ]));
    // properies mqtt 5
    if (propertiesData !== null) propertiesData.write();
    return true;
}
function $b6f19c9a0a044808$var$auth(packet, stream, opts) {
    var version = opts ? opts.protocolVersion : 4;
    var settings = packet || {};
    var reasonCode = settings.reasonCode;
    var properties = settings.properties;
    var length = version === 5 ? 1 : 0;
    if (version !== 5) stream.emit("error", new Error("Invalid mqtt version for auth packet"));
    // properies mqtt 5
    var propertiesData = $b6f19c9a0a044808$var$getPropertiesByMaximumPacketSize(stream, properties, opts, length);
    if (!propertiesData) return false;
    length += propertiesData.length;
    // Header
    stream.write($b6f19c9a0a044808$require$Buffer.from([
        $dsnGd.codes.auth << 4
    ]));
    // Length
    $b6f19c9a0a044808$var$writeVarByteInt(stream, length);
    // reason code in header
    stream.write($b6f19c9a0a044808$require$Buffer.from([
        reasonCode
    ]));
    // properies mqtt 5
    if (propertiesData !== null) propertiesData.write();
    return true;
}
/**
 * writeVarByteInt - write an MQTT style variable byte integer to the buffer
 *
 * @param <Buffer> buffer - destination
 * @param <Number> pos - offset
 * @param <Number> length - length (>0)
 * @returns <Number> number of bytes written
 *
 * @api private
 */ var $b6f19c9a0a044808$var$varByteIntCache = {};
function $b6f19c9a0a044808$var$writeVarByteInt(stream, num) {
    if (num > $dsnGd.VARBYTEINT_MAX) {
        stream.emit("error", new Error("Invalid variable byte integer: ".concat(num)));
        return false;
    }
    var buffer = $b6f19c9a0a044808$var$varByteIntCache[num];
    if (!buffer) {
        buffer = $b6f19c9a0a044808$var$genBufVariableByteInt(num);
        if (num < 16384) $b6f19c9a0a044808$var$varByteIntCache[num] = buffer;
    }
    $b6f19c9a0a044808$var$debug("writeVarByteInt: writing to stream: %o", buffer);
    return stream.write(buffer);
}
/**
 * writeString - write a utf8 string to the buffer
 *
 * @param <Buffer> buffer - destination
 * @param <Number> pos - offset
 * @param <String> string - string to write
 * @return <Number> number of bytes written
 *
 * @api private
 */ function $b6f19c9a0a044808$var$writeString(stream, string) {
    var strlen = $b6f19c9a0a044808$require$Buffer.byteLength(string);
    $b6f19c9a0a044808$var$writeNumber(stream, strlen);
    $b6f19c9a0a044808$var$debug("writeString: %s", string);
    return stream.write(string, "utf8");
}
/**
 * writeStringPair - write a utf8 string pairs to the buffer
 *
 * @param <Buffer> buffer - destination
 * @param <String> name - string name to write
 * @param <String> value - string value to write
 * @return <Number> number of bytes written
 *
 * @api private
 */ function $b6f19c9a0a044808$var$writeStringPair(stream, name, value) {
    $b6f19c9a0a044808$var$writeString(stream, name);
    $b6f19c9a0a044808$var$writeString(stream, value);
}
/**
 * writeNumber - write a two byte number to the buffer
 *
 * @param <Buffer> buffer - destination
 * @param <Number> pos - offset
 * @param <String> number - number to write
 * @return <Number> number of bytes written
 *
 * @api private
 */ function $b6f19c9a0a044808$var$writeNumberCached(stream, number) {
    $b6f19c9a0a044808$var$debug("writeNumberCached: number: %d", number);
    $b6f19c9a0a044808$var$debug("writeNumberCached: %o", $b6f19c9a0a044808$var$numCache[number]);
    return stream.write($b6f19c9a0a044808$var$numCache[number]);
}
function $b6f19c9a0a044808$var$writeNumberGenerated(stream, number) {
    var generatedNumber = $b6f19c9a0a044808$var$generateNumber(number);
    $b6f19c9a0a044808$var$debug("writeNumberGenerated: %o", generatedNumber);
    return stream.write(generatedNumber);
}
function $b6f19c9a0a044808$var$write4ByteNumber(stream, number) {
    var generated4ByteBuffer = $b6f19c9a0a044808$var$generate4ByteBuffer(number);
    $b6f19c9a0a044808$var$debug("write4ByteNumber: %o", generated4ByteBuffer);
    return stream.write(generated4ByteBuffer);
}
/**
 * writeStringOrBuffer - write a String or Buffer with the its length prefix
 *
 * @param <Buffer> buffer - destination
 * @param <Number> pos - offset
 * @param <String> toWrite - String or Buffer
 * @return <Number> number of bytes written
 */ function $b6f19c9a0a044808$var$writeStringOrBuffer(stream, toWrite) {
    if (typeof toWrite === "string") $b6f19c9a0a044808$var$writeString(stream, toWrite);
    else if (toWrite) {
        $b6f19c9a0a044808$var$writeNumber(stream, toWrite.length);
        stream.write(toWrite);
    } else $b6f19c9a0a044808$var$writeNumber(stream, 0);
}
function $b6f19c9a0a044808$var$getProperties(stream, properties) {
    var getLengthProperty = function getLengthProperty(name, value) {
        var type = $dsnGd.propertiesTypes[name];
        var length = 0;
        switch(type){
            case "byte":
                if (typeof value !== "boolean") {
                    stream.emit("error", new Error("Invalid ".concat(name, ": ").concat(value)));
                    return false;
                }
                length += 2;
                break;
            case "int8":
                if (typeof value !== "number" || value < 0 || value > 0xff) {
                    stream.emit("error", new Error("Invalid ".concat(name, ": ").concat(value)));
                    return false;
                }
                length += 2;
                break;
            case "binary":
                if (value && value === null) {
                    stream.emit("error", new Error("Invalid ".concat(name, ": ").concat(value)));
                    return false;
                }
                length += 1 + $b6f19c9a0a044808$require$Buffer.byteLength(value) + 2;
                break;
            case "int16":
                if (typeof value !== "number" || value < 0 || value > 0xffff) {
                    stream.emit("error", new Error("Invalid ".concat(name, ": ").concat(value)));
                    return false;
                }
                length += 3;
                break;
            case "int32":
                if (typeof value !== "number" || value < 0 || value > 0xffffffff) {
                    stream.emit("error", new Error("Invalid ".concat(name, ": ").concat(value)));
                    return false;
                }
                length += 5;
                break;
            case "var":
                // var byte integer is max 24 bits packed in 32 bits
                if (typeof value !== "number" || value < 0 || value > 0x0fffffff) {
                    stream.emit("error", new Error("Invalid ".concat(name, ": ").concat(value)));
                    return false;
                }
                length += 1 + $b6f19c9a0a044808$require$Buffer.byteLength($b6f19c9a0a044808$var$genBufVariableByteInt(value));
                break;
            case "string":
                if (typeof value !== "string") {
                    stream.emit("error", new Error("Invalid ".concat(name, ": ").concat(value)));
                    return false;
                }
                length += 3 + $b6f19c9a0a044808$require$Buffer.byteLength(value.toString());
                break;
            case "pair":
                if (typeof value !== "object") {
                    stream.emit("error", new Error("Invalid ".concat(name, ": ").concat(value)));
                    return false;
                }
                length += Object.getOwnPropertyNames(value).reduce(function(result, name) {
                    var currentValue = value[name];
                    if (Array.isArray(currentValue)) result += currentValue.reduce(function(currentLength, value) {
                        currentLength += 3 + $b6f19c9a0a044808$require$Buffer.byteLength(name.toString()) + 2 + $b6f19c9a0a044808$require$Buffer.byteLength(value.toString());
                        return currentLength;
                    }, 0);
                    else result += 3 + $b6f19c9a0a044808$require$Buffer.byteLength(name.toString()) + 2 + $b6f19c9a0a044808$require$Buffer.byteLength(value[name].toString());
                    return result;
                }, 0);
                break;
            default:
                stream.emit("error", new Error("Invalid property ".concat(name, ": ").concat(value)));
                return false;
        }
        return length;
    };
    /* connect properties */ if (typeof properties !== "object" || properties.length != null) return {
        length: 1,
        write: function() {
            $b6f19c9a0a044808$var$writeProperties(stream, {}, 0);
        }
    };
    var propertiesLength = 0;
    if (properties) for(var propName in properties){
        var propLength = 0;
        var propValueLength = 0;
        var propValue = properties[propName];
        if (Array.isArray(propValue)) for(var valueIndex = 0; valueIndex < propValue.length; valueIndex++){
            propValueLength = getLengthProperty(propName, propValue[valueIndex]);
            if (!propValueLength) return false;
            propLength += propValueLength;
        }
        else {
            propValueLength = getLengthProperty(propName, propValue);
            if (!propValueLength) return false;
            propLength = propValueLength;
        }
        if (!propLength) return false;
        propertiesLength += propLength;
    }
    var propertiesLengthLength = $b6f19c9a0a044808$require$Buffer.byteLength($b6f19c9a0a044808$var$genBufVariableByteInt(propertiesLength));
    return {
        length: propertiesLengthLength + propertiesLength,
        write: function() {
            $b6f19c9a0a044808$var$writeProperties(stream, properties, propertiesLength);
        }
    };
}
function $b6f19c9a0a044808$var$getPropertiesByMaximumPacketSize(stream, properties, opts, length) {
    var mayEmptyProps = [
        "reasonString",
        "userProperties"
    ];
    var maximumPacketSize = opts && opts.properties && opts.properties.maximumPacketSize ? opts.properties.maximumPacketSize : 0;
    var propertiesData = $b6f19c9a0a044808$var$getProperties(stream, properties);
    if (maximumPacketSize) while(length + propertiesData.length > maximumPacketSize){
        var currentMayEmptyProp = mayEmptyProps.shift();
        if (currentMayEmptyProp && properties[currentMayEmptyProp]) {
            delete properties[currentMayEmptyProp];
            propertiesData = $b6f19c9a0a044808$var$getProperties(stream, properties);
        } else return false;
    }
    return propertiesData;
}
function $b6f19c9a0a044808$var$writeProperty(stream, propName, value) {
    var type = $dsnGd.propertiesTypes[propName];
    switch(type){
        case "byte":
            stream.write($b6f19c9a0a044808$require$Buffer.from([
                $dsnGd.properties[propName]
            ]));
            stream.write($b6f19c9a0a044808$require$Buffer.from([
                +value
            ]));
            break;
        case "int8":
            stream.write($b6f19c9a0a044808$require$Buffer.from([
                $dsnGd.properties[propName]
            ]));
            stream.write($b6f19c9a0a044808$require$Buffer.from([
                value
            ]));
            break;
        case "binary":
            stream.write($b6f19c9a0a044808$require$Buffer.from([
                $dsnGd.properties[propName]
            ]));
            $b6f19c9a0a044808$var$writeStringOrBuffer(stream, value);
            break;
        case "int16":
            stream.write($b6f19c9a0a044808$require$Buffer.from([
                $dsnGd.properties[propName]
            ]));
            $b6f19c9a0a044808$var$writeNumber(stream, value);
            break;
        case "int32":
            stream.write($b6f19c9a0a044808$require$Buffer.from([
                $dsnGd.properties[propName]
            ]));
            $b6f19c9a0a044808$var$write4ByteNumber(stream, value);
            break;
        case "var":
            stream.write($b6f19c9a0a044808$require$Buffer.from([
                $dsnGd.properties[propName]
            ]));
            $b6f19c9a0a044808$var$writeVarByteInt(stream, value);
            break;
        case "string":
            stream.write($b6f19c9a0a044808$require$Buffer.from([
                $dsnGd.properties[propName]
            ]));
            $b6f19c9a0a044808$var$writeString(stream, value);
            break;
        case "pair":
            Object.getOwnPropertyNames(value).forEach(function(name) {
                var currentValue = value[name];
                if (Array.isArray(currentValue)) currentValue.forEach(function(value) {
                    stream.write($b6f19c9a0a044808$require$Buffer.from([
                        $dsnGd.properties[propName]
                    ]));
                    $b6f19c9a0a044808$var$writeStringPair(stream, name.toString(), value.toString());
                });
                else {
                    stream.write($b6f19c9a0a044808$require$Buffer.from([
                        $dsnGd.properties[propName]
                    ]));
                    $b6f19c9a0a044808$var$writeStringPair(stream, name.toString(), currentValue.toString());
                }
            });
            break;
        default:
            stream.emit("error", new Error("Invalid property ".concat(propName, " value: ").concat(value)));
            return false;
    }
}
function $b6f19c9a0a044808$var$writeProperties(stream, properties, propertiesLength) {
    /* write properties to stream */ $b6f19c9a0a044808$var$writeVarByteInt(stream, propertiesLength);
    for(var propName in properties)if (Object.prototype.hasOwnProperty.call(properties, propName) && properties[propName] !== null) {
        var value = properties[propName];
        if (Array.isArray(value)) for(var valueIndex = 0; valueIndex < value.length; valueIndex++)$b6f19c9a0a044808$var$writeProperty(stream, propName, value[valueIndex]);
        else $b6f19c9a0a044808$var$writeProperty(stream, propName, value);
    }
}
function $b6f19c9a0a044808$var$byteLength(bufOrString) {
    if (!bufOrString) return 0;
    else if (bufOrString instanceof $b6f19c9a0a044808$require$Buffer) return bufOrString.length;
    else return $b6f19c9a0a044808$require$Buffer.byteLength(bufOrString);
}
function $b6f19c9a0a044808$var$isStringOrBuffer(field) {
    return typeof field === "string" || field instanceof $b6f19c9a0a044808$require$Buffer;
}
module.exports = $b6f19c9a0a044808$var$generate;

});
parcelRequire.register("heu3x", function(module, exports) {

var $kgUAE = parcelRequire("kgUAE");
var $c8bb0efccc2f573c$require$Buffer = $kgUAE.Buffer;
var $c8bb0efccc2f573c$var$max = 65536;
var $c8bb0efccc2f573c$var$cache = {};
// in node 6 Buffer.subarray returns a Uint8Array instead of a Buffer
// later versions return a Buffer
// alternative is Buffer.slice but that creates a new buffer
// creating new buffers takes time
// SubOk is only false on node < 8
var $c8bb0efccc2f573c$var$SubOk = $c8bb0efccc2f573c$require$Buffer.isBuffer($c8bb0efccc2f573c$require$Buffer.from([
    1,
    2
]).subarray(0, 1));
function $c8bb0efccc2f573c$var$generateBuffer(i) {
    var buffer = $c8bb0efccc2f573c$require$Buffer.allocUnsafe(2);
    buffer.writeUInt8(i >> 8, 0);
    buffer.writeUInt8(i & 0x00FF, 1);
    return buffer;
}
function $c8bb0efccc2f573c$var$generateCache() {
    for(var i = 0; i < $c8bb0efccc2f573c$var$max; i++)$c8bb0efccc2f573c$var$cache[i] = $c8bb0efccc2f573c$var$generateBuffer(i);
}
function $c8bb0efccc2f573c$var$genBufVariableByteInt(num) {
    var maxLength = 4 // max 4 bytes
    ;
    var digit = 0;
    var pos = 0;
    var buffer = $c8bb0efccc2f573c$require$Buffer.allocUnsafe(maxLength);
    do {
        digit = num % 128 | 0;
        num = num / 128 | 0;
        if (num > 0) digit = digit | 0x80;
        buffer.writeUInt8(digit, pos++);
    }while (num > 0 && pos < maxLength);
    if (num > 0) pos = 0;
    return $c8bb0efccc2f573c$var$SubOk ? buffer.subarray(0, pos) : buffer.slice(0, pos);
}
function $c8bb0efccc2f573c$var$generate4ByteBuffer(num) {
    var buffer = $c8bb0efccc2f573c$require$Buffer.allocUnsafe(4);
    buffer.writeUInt32BE(num, 0);
    return buffer;
}
module.exports = {
    cache: $c8bb0efccc2f573c$var$cache,
    generateCache: $c8bb0efccc2f573c$var$generateCache,
    generateNumber: $c8bb0efccc2f573c$var$generateBuffer,
    genBufVariableByteInt: $c8bb0efccc2f573c$var$genBufVariableByteInt,
    generate4ByteBuffer: $c8bb0efccc2f573c$var$generate4ByteBuffer
};

});

parcelRequire.register("5ZUJF", function(module, exports) {

var $lFBFq = parcelRequire("lFBFq");
"use strict";
if (typeof $lFBFq === "undefined" || !$lFBFq.version || $lFBFq.version.indexOf("v0.") === 0 || $lFBFq.version.indexOf("v1.") === 0 && $lFBFq.version.indexOf("v1.8.") !== 0) module.exports = {
    nextTick: $45dea8bf7974be12$var$nextTick
};
else module.exports = $lFBFq;
function $45dea8bf7974be12$var$nextTick(fn, arg1, arg2, arg3) {
    if (typeof fn !== "function") throw new TypeError('"callback" argument must be a function');
    var len = arguments.length;
    var args, i;
    switch(len){
        case 0:
        case 1:
            return $lFBFq.nextTick(fn);
        case 2:
            return $lFBFq.nextTick(function afterTickOne() {
                fn.call(null, arg1);
            });
        case 3:
            return $lFBFq.nextTick(function afterTickTwo() {
                fn.call(null, arg1, arg2);
            });
        case 4:
            return $lFBFq.nextTick(function afterTickThree() {
                fn.call(null, arg1, arg2, arg3);
            });
        default:
            args = new Array(len - 1);
            i = 0;
            while(i < args.length)args[i++] = arguments[i];
            return $lFBFq.nextTick(function afterTick() {
                fn.apply(null, args);
            });
    }
}

});



parcelRequire.register("hnDbx", function(module, exports) {

var $kgUAE = parcelRequire("kgUAE");
var $ca72fb0360ba677d$require$Buffer = $kgUAE.Buffer;
"use strict";
module.exports = $ca72fb0360ba677d$var$rfdc;
function $ca72fb0360ba677d$var$copyBuffer(cur) {
    if (cur instanceof $ca72fb0360ba677d$require$Buffer) return $ca72fb0360ba677d$require$Buffer.from(cur);
    return new cur.constructor(cur.buffer.slice(), cur.byteOffset, cur.length);
}
function $ca72fb0360ba677d$var$rfdc(opts) {
    var cloneArray = function cloneArray(a, fn) {
        var keys = Object.keys(a);
        var a2 = new Array(keys.length);
        for(var i = 0; i < keys.length; i++){
            var k = keys[i];
            var cur = a[k];
            if (typeof cur !== "object" || cur === null) a2[k] = cur;
            else if (cur instanceof Date) a2[k] = new Date(cur);
            else if (ArrayBuffer.isView(cur)) a2[k] = $ca72fb0360ba677d$var$copyBuffer(cur);
            else a2[k] = fn(cur);
        }
        return a2;
    };
    opts = opts || {};
    if (opts.circles) return $ca72fb0360ba677d$var$rfdcCircles(opts);
    return opts.proto ? cloneProto : clone;
    function clone(o) {
        if (typeof o !== "object" || o === null) return o;
        if (o instanceof Date) return new Date(o);
        if (Array.isArray(o)) return cloneArray(o, clone);
        if (o instanceof Map) return new Map(cloneArray(Array.from(o), clone));
        if (o instanceof Set) return new Set(cloneArray(Array.from(o), clone));
        var o2 = {};
        for(var k in o){
            if (Object.hasOwnProperty.call(o, k) === false) continue;
            var cur = o[k];
            if (typeof cur !== "object" || cur === null) o2[k] = cur;
            else if (cur instanceof Date) o2[k] = new Date(cur);
            else if (cur instanceof Map) o2[k] = new Map(cloneArray(Array.from(cur), clone));
            else if (cur instanceof Set) o2[k] = new Set(cloneArray(Array.from(cur), clone));
            else if (ArrayBuffer.isView(cur)) o2[k] = $ca72fb0360ba677d$var$copyBuffer(cur);
            else o2[k] = clone(cur);
        }
        return o2;
    }
    function cloneProto(o) {
        if (typeof o !== "object" || o === null) return o;
        if (o instanceof Date) return new Date(o);
        if (Array.isArray(o)) return cloneArray(o, cloneProto);
        if (o instanceof Map) return new Map(cloneArray(Array.from(o), cloneProto));
        if (o instanceof Set) return new Set(cloneArray(Array.from(o), cloneProto));
        var o2 = {};
        for(var k in o){
            var cur = o[k];
            if (typeof cur !== "object" || cur === null) o2[k] = cur;
            else if (cur instanceof Date) o2[k] = new Date(cur);
            else if (cur instanceof Map) o2[k] = new Map(cloneArray(Array.from(cur), cloneProto));
            else if (cur instanceof Set) o2[k] = new Set(cloneArray(Array.from(cur), cloneProto));
            else if (ArrayBuffer.isView(cur)) o2[k] = $ca72fb0360ba677d$var$copyBuffer(cur);
            else o2[k] = cloneProto(cur);
        }
        return o2;
    }
}
function $ca72fb0360ba677d$var$rfdcCircles(opts) {
    var cloneArray = function cloneArray(a, fn) {
        var keys = Object.keys(a);
        var a2 = new Array(keys.length);
        for(var i = 0; i < keys.length; i++){
            var k = keys[i];
            var cur = a[k];
            if (typeof cur !== "object" || cur === null) a2[k] = cur;
            else if (cur instanceof Date) a2[k] = new Date(cur);
            else if (ArrayBuffer.isView(cur)) a2[k] = $ca72fb0360ba677d$var$copyBuffer(cur);
            else {
                var index = refs.indexOf(cur);
                if (index !== -1) a2[k] = refsNew[index];
                else a2[k] = fn(cur);
            }
        }
        return a2;
    };
    var refs = [];
    var refsNew = [];
    return opts.proto ? cloneProto : clone;
    function clone(o) {
        if (typeof o !== "object" || o === null) return o;
        if (o instanceof Date) return new Date(o);
        if (Array.isArray(o)) return cloneArray(o, clone);
        if (o instanceof Map) return new Map(cloneArray(Array.from(o), clone));
        if (o instanceof Set) return new Set(cloneArray(Array.from(o), clone));
        var o2 = {};
        refs.push(o);
        refsNew.push(o2);
        for(var k in o){
            if (Object.hasOwnProperty.call(o, k) === false) continue;
            var cur = o[k];
            if (typeof cur !== "object" || cur === null) o2[k] = cur;
            else if (cur instanceof Date) o2[k] = new Date(cur);
            else if (cur instanceof Map) o2[k] = new Map(cloneArray(Array.from(cur), clone));
            else if (cur instanceof Set) o2[k] = new Set(cloneArray(Array.from(cur), clone));
            else if (ArrayBuffer.isView(cur)) o2[k] = $ca72fb0360ba677d$var$copyBuffer(cur);
            else {
                var i = refs.indexOf(cur);
                if (i !== -1) o2[k] = refsNew[i];
                else o2[k] = clone(cur);
            }
        }
        refs.pop();
        refsNew.pop();
        return o2;
    }
    function cloneProto(o) {
        if (typeof o !== "object" || o === null) return o;
        if (o instanceof Date) return new Date(o);
        if (Array.isArray(o)) return cloneArray(o, cloneProto);
        if (o instanceof Map) return new Map(cloneArray(Array.from(o), cloneProto));
        if (o instanceof Set) return new Set(cloneArray(Array.from(o), cloneProto));
        var o2 = {};
        refs.push(o);
        refsNew.push(o2);
        for(var k in o){
            var cur = o[k];
            if (typeof cur !== "object" || cur === null) o2[k] = cur;
            else if (cur instanceof Date) o2[k] = new Date(cur);
            else if (cur instanceof Map) o2[k] = new Map(cloneArray(Array.from(cur), cloneProto));
            else if (cur instanceof Set) o2[k] = new Set(cloneArray(Array.from(cur), cloneProto));
            else if (ArrayBuffer.isView(cur)) o2[k] = $ca72fb0360ba677d$var$copyBuffer(cur);
            else {
                var i = refs.indexOf(cur);
                if (i !== -1) o2[k] = refsNew[i];
                else o2[k] = cloneProto(cur);
            }
        }
        refs.pop();
        refsNew.pop();
        return o2;
    }
}

});

parcelRequire.register("k1FD7", function(module, exports) {
(function(root) {
    var error = /*--------------------------------------------------------------------------*/ /**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */ function error(type) {
        throw new RangeError(errors[type]);
    };
    var map = /**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */ function map(array, fn) {
        var length = array.length;
        var result = [];
        while(length--)result[length] = fn(array[length]);
        return result;
    };
    var mapDomain = /**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */ function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
            // In email addresses, only the domain name should be punycoded. Leave
            // the local part (i.e. everything up to `@`) intact.
            result = parts[0] + "@";
            string = parts[1];
        }
        // Avoid `split(regex)` for IE8 compatibility. See #17.
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
    };
    var ucs2decode = /**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */ function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while(counter < length){
            value = string.charCodeAt(counter++);
            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // high surrogate, and there is a next character
                extra = string.charCodeAt(counter++);
                if ((extra & 0xFC00) == 0xDC00) output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                else {
                    // unmatched surrogate; only append this code unit, in case the next
                    // code unit is the high surrogate of a surrogate pair
                    output.push(value);
                    counter--;
                }
            } else output.push(value);
        }
        return output;
    };
    var ucs2encode = /**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */ function ucs2encode(array) {
        return map(array, function(value) {
            var output = "";
            if (value > 0xFFFF) {
                value -= 0x10000;
                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                value = 0xDC00 | value & 0x3FF;
            }
            output += stringFromCharCode(value);
            return output;
        }).join("");
    };
    var basicToDigit = /**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */ function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) return codePoint - 22;
        if (codePoint - 65 < 26) return codePoint - 65;
        if (codePoint - 97 < 26) return codePoint - 97;
        return base;
    };
    var digitToBasic = /**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */ function digitToBasic(digit, flag) {
        //  0..25 map to ASCII a..z or A..Z
        // 26..35 map to ASCII 0..9
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    };
    var adapt = /**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */ function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for(; delta > baseMinusTMin * tMax >> 1; k += base)delta = floor(delta / baseMinusTMin);
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    };
    var decode = /**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */ function decode(input) {
        // Don't use UCS-2
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, /** Cached calculation results */ baseMinusT;
        // Handle the basic code points: let `basic` be the number of input code
        // points before the last delimiter, or `0` if there is none, then copy
        // the first basic code points to the output.
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) basic = 0;
        for(j = 0; j < basic; ++j){
            // if it's not a basic code point
            if (input.charCodeAt(j) >= 0x80) error("not-basic");
            output.push(input.charCodeAt(j));
        }
        // Main decoding loop: start just after the last delimiter if any basic code
        // points were copied; start at the beginning otherwise.
        for(index = basic > 0 ? basic + 1 : 0; index < inputLength;){
            // `index` is the index of the next character to be consumed.
            // Decode a generalized variable-length integer into `delta`,
            // which gets added to `i`. The overflow checking is easier
            // if we increase `i` as we go, then subtract off its starting
            // value at the end to obtain `delta`.
            for(oldi = i, w = 1, k = base;; k += base){
                if (index >= inputLength) error("invalid-input");
                digit = basicToDigit(input.charCodeAt(index++));
                if (digit >= base || digit > floor((maxInt - i) / w)) error("overflow");
                i += digit * w;
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (digit < t) break;
                baseMinusT = base - t;
                if (w > floor(maxInt / baseMinusT)) error("overflow");
                w *= baseMinusT;
            }
            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            // `i` was supposed to wrap around from `out` to `0`,
            // incrementing `n` each time, so we'll fix that now:
            if (floor(i / out) > maxInt - n) error("overflow");
            n += floor(i / out);
            i %= out;
            // Insert `n` at position `i` of the output
            output.splice(i++, 0, n);
        }
        return ucs2encode(output);
    };
    var encode = /**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */ function encode(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], /** `inputLength` will hold the number of code points in `input`. */ inputLength, /** Cached calculation results */ handledCPCountPlusOne, baseMinusT, qMinusT;
        // Convert the input in UCS-2 to Unicode
        input = ucs2decode(input);
        // Cache the length
        inputLength = input.length;
        // Initialize the state
        n = initialN;
        delta = 0;
        bias = initialBias;
        // Handle the basic code points
        for(j = 0; j < inputLength; ++j){
            currentValue = input[j];
            if (currentValue < 0x80) output.push(stringFromCharCode(currentValue));
        }
        handledCPCount = basicLength = output.length;
        // `handledCPCount` is the number of code points that have been handled;
        // `basicLength` is the number of basic code points.
        // Finish the basic string - if it is not empty - with a delimiter
        if (basicLength) output.push(delimiter);
        // Main encoding loop:
        while(handledCPCount < inputLength){
            // All non-basic code points < n have been handled already. Find the next
            // larger one:
            for(m = maxInt, j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue >= n && currentValue < m) m = currentValue;
            }
            // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
            // but guard against overflow
            handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) error("overflow");
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            for(j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue < n && ++delta > maxInt) error("overflow");
                if (currentValue == n) {
                    // Represent delta as a generalized variable-length integer
                    for(q = delta, k = base;; k += base){
                        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                        if (q < t) break;
                        qMinusT = q - t;
                        baseMinusT = base - t;
                        output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                        q = floor(qMinusT / baseMinusT);
                    }
                    output.push(stringFromCharCode(digitToBasic(q, 0)));
                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                    delta = 0;
                    ++handledCPCount;
                }
            }
            ++delta;
            ++n;
        }
        return output.join("");
    };
    var toUnicode = /**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */ function toUnicode(input) {
        return mapDomain(input, function(string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
    };
    var toASCII = /**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */ function toASCII(input) {
        return mapDomain(input, function(string) {
            return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
    };
    /** Detect free variables */ var freeExports = exports && !exports.nodeType && exports;
    var freeModule = module && !module.nodeType && module;
    var freeGlobal = typeof $parcel$global == "object" && $parcel$global;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) root = freeGlobal;
    /**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */ var punycode, /** Highest positive signed 32-bit float value */ maxInt = 2147483647, /** Bootstring parameters */ base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", /** Regular expressions */ regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, /** Error messages */ errors = {
        overflow: "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
    }, /** Convenience shortcuts */ baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, /** Temporary variable */ key;
    /*--------------------------------------------------------------------------*/ /** Define the public API */ punycode = {
        /**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */ version: "1.4.1",
        /**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */ ucs2: {
            decode: ucs2decode,
            encode: ucs2encode
        },
        decode: decode,
        encode: encode,
        toASCII: toASCII,
        toUnicode: toUnicode
    };
    /** Expose `punycode` */ // Some AMD build optimizers, like r.js, check for specific condition patterns
    // like the following:
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) define("punycode", function() {
        return punycode;
    });
    else if (freeExports && freeModule) {
        if (module.exports == freeExports) // in Node.js, io.js, or RingoJS v0.8.0+
        freeModule.exports = punycode;
        else // in Narwhal or RingoJS v0.7.0-
        for(key in punycode)punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
    } else // in Rhino or a web browser
    root.punycode = punycode;
})(this);

});

parcelRequire.register("fVwRj", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function $b985aaf832b06a98$var$hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
module.exports = function(qs, sep, eq, options) {
    sep = sep || "&";
    eq = eq || "=";
    var obj = {};
    if (typeof qs !== "string" || qs.length === 0) return obj;
    var regexp = /\+/g;
    qs = qs.split(sep);
    var maxKeys = 1000;
    if (options && typeof options.maxKeys === "number") maxKeys = options.maxKeys;
    var len = qs.length;
    // maxKeys <= 0 means that we should not limit keys count
    if (maxKeys > 0 && len > maxKeys) len = maxKeys;
    for(var i = 0; i < len; ++i){
        var x = qs[i].replace(regexp, "%20"), idx = x.indexOf(eq), kstr, vstr, k, v;
        if (idx >= 0) {
            kstr = x.substr(0, idx);
            vstr = x.substr(idx + 1);
        } else {
            kstr = x;
            vstr = "";
        }
        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);
        if (!$b985aaf832b06a98$var$hasOwnProperty(obj, k)) obj[k] = v;
        else if ($b985aaf832b06a98$var$isArray(obj[k])) obj[k].push(v);
        else obj[k] = [
            obj[k],
            v
        ];
    }
    return obj;
};
var $b985aaf832b06a98$var$isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === "[object Array]";
};

});

parcelRequire.register("hxsuF", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var $lT21Y = parcelRequire("lT21Y");
"use strict";
var $cc4b9efbf5ed736a$var$stringifyPrimitive = function stringifyPrimitive(v) {
    switch(typeof v === "undefined" ? "undefined" : (0, $lT21Y.default)(v)){
        case "string":
            return v;
        case "boolean":
            return v ? "true" : "false";
        case "number":
            return isFinite(v) ? v : "";
        default:
            return "";
    }
};
module.exports = function(obj, sep, eq, name) {
    sep = sep || "&";
    eq = eq || "=";
    if (obj === null) obj = undefined;
    if (typeof obj === "object") return $cc4b9efbf5ed736a$var$map($cc4b9efbf5ed736a$var$objectKeys(obj), function(k) {
        var ks = encodeURIComponent($cc4b9efbf5ed736a$var$stringifyPrimitive(k)) + eq;
        if ($cc4b9efbf5ed736a$var$isArray(obj[k])) return $cc4b9efbf5ed736a$var$map(obj[k], function(v) {
            return ks + encodeURIComponent($cc4b9efbf5ed736a$var$stringifyPrimitive(v));
        }).join(sep);
        else return ks + encodeURIComponent($cc4b9efbf5ed736a$var$stringifyPrimitive(obj[k]));
    }).join(sep);
    if (!name) return "";
    return encodeURIComponent($cc4b9efbf5ed736a$var$stringifyPrimitive(name)) + eq + encodeURIComponent($cc4b9efbf5ed736a$var$stringifyPrimitive(obj));
};
var $cc4b9efbf5ed736a$var$isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === "[object Array]";
};
function $cc4b9efbf5ed736a$var$map(xs, f) {
    if (xs.map) return xs.map(f);
    var res = [];
    for(var i = 0; i < xs.length; i++)res.push(f(xs[i], i));
    return res;
}
var $cc4b9efbf5ed736a$var$objectKeys = Object.keys || function(obj) {
    var res = [];
    for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
    return res;
};

});

parcelRequire.register("9Qvrn", function(module, exports) {
"use strict";

var $l9xBz = parcelRequire("l9xBz");

var $72b15bd22d807804$var$debug = (parcelRequire("8woo2"))("mqttjs:tcp");
/*
  variables port and host can be removed since
  you have all required information in opts object
*/ function $72b15bd22d807804$var$streamBuilder(client, opts) {
    opts.port = opts.port || 1883;
    opts.hostname = opts.hostname || opts.host || "localhost";
    var port = opts.port;
    var host = opts.hostname;
    $72b15bd22d807804$var$debug("port %d and host %s", port, host);
    return $l9xBz.createConnection(port, host);
}
module.exports = $72b15bd22d807804$var$streamBuilder;

});

parcelRequire.register("dkhD1", function(module, exports) {
"use strict";

var $l9xBz = parcelRequire("l9xBz");

var $l9xBz = parcelRequire("l9xBz");

var $9b3ad14263b62951$var$debug = (parcelRequire("8woo2"))("mqttjs:tls");
function $9b3ad14263b62951$var$buildBuilder(mqttClient, opts) {
    var handleTLSerrors = function handleTLSerrors(err) {
        // How can I get verify this error is a tls error?
        if (opts.rejectUnauthorized) mqttClient.emit("error", err);
        // close this connection to match the behaviour of net
        // otherwise all we get is an error from the connection
        // and close event doesn't fire. This is a work around
        // to enable the reconnect code to work the same as with
        // net.createConnection
        connection.end();
    };
    opts.port = opts.port || 8883;
    opts.host = opts.hostname || opts.host || "localhost";
    if ($l9xBz.isIP(opts.host) === 0) opts.servername = opts.host;
    opts.rejectUnauthorized = opts.rejectUnauthorized !== false;
    delete opts.path;
    $9b3ad14263b62951$var$debug("port %d host %s rejectUnauthorized %b", opts.port, opts.host, opts.rejectUnauthorized);
    var connection = $l9xBz.connect(opts);
    /* eslint no-use-before-define: [2, "nofunc"] */ connection.on("secureConnect", function() {
        if (opts.rejectUnauthorized && !connection.authorized) connection.emit("error", new Error("TLS not authorized"));
        else connection.removeListener("error", handleTLSerrors);
    });
    connection.on("error", handleTLSerrors);
    return connection;
}
module.exports = $9b3ad14263b62951$var$buildBuilder;

});

parcelRequire.register("3YR1k", function(module, exports) {
"use strict";

var $kgUAE = parcelRequire("kgUAE");
var $2e601a6cd2c4dcd1$require$Buffer = $kgUAE.Buffer;

var $2M7q0 = parcelRequire("2M7q0");
var $2e601a6cd2c4dcd1$require$Transform = $2M7q0.Transform;

var $illDe = parcelRequire("illDe");
/* global wx */ var $2e601a6cd2c4dcd1$var$socketTask, $2e601a6cd2c4dcd1$var$proxy, $2e601a6cd2c4dcd1$var$stream;
function $2e601a6cd2c4dcd1$var$buildProxy() {
    var proxy = new $2e601a6cd2c4dcd1$require$Transform();
    proxy._write = function(chunk, encoding, next) {
        $2e601a6cd2c4dcd1$var$socketTask.send({
            data: chunk.buffer,
            success: function success() {
                next();
            },
            fail: function fail(errMsg) {
                next(new Error(errMsg));
            }
        });
    };
    proxy._flush = function socketEnd(done) {
        $2e601a6cd2c4dcd1$var$socketTask.close({
            success: function success() {
                done();
            }
        });
    };
    return proxy;
}
function $2e601a6cd2c4dcd1$var$setDefaultOpts(opts) {
    if (!opts.hostname) opts.hostname = "localhost";
    if (!opts.path) opts.path = "/";
    if (!opts.wsOptions) opts.wsOptions = {};
}
function $2e601a6cd2c4dcd1$var$buildUrl(opts, client) {
    var protocol = opts.protocol === "wxs" ? "wss" : "ws";
    var url = protocol + "://" + opts.hostname + opts.path;
    if (opts.port && opts.port !== 80 && opts.port !== 443) url = protocol + "://" + opts.hostname + ":" + opts.port + opts.path;
    if (typeof opts.transformWsUrl === "function") url = opts.transformWsUrl(url, opts, client);
    return url;
}
function $2e601a6cd2c4dcd1$var$bindEventHandler() {
    $2e601a6cd2c4dcd1$var$socketTask.onOpen(function() {
        $2e601a6cd2c4dcd1$var$stream.setReadable($2e601a6cd2c4dcd1$var$proxy);
        $2e601a6cd2c4dcd1$var$stream.setWritable($2e601a6cd2c4dcd1$var$proxy);
        $2e601a6cd2c4dcd1$var$stream.emit("connect");
    });
    $2e601a6cd2c4dcd1$var$socketTask.onMessage(function(res) {
        var data = res.data;
        if (data instanceof ArrayBuffer) data = $2e601a6cd2c4dcd1$require$Buffer.from(data);
        else data = $2e601a6cd2c4dcd1$require$Buffer.from(data, "utf8");
        $2e601a6cd2c4dcd1$var$proxy.push(data);
    });
    $2e601a6cd2c4dcd1$var$socketTask.onClose(function() {
        $2e601a6cd2c4dcd1$var$stream.end();
        $2e601a6cd2c4dcd1$var$stream.destroy();
    });
    $2e601a6cd2c4dcd1$var$socketTask.onError(function(res) {
        $2e601a6cd2c4dcd1$var$stream.destroy(new Error(res.errMsg));
    });
}
function $2e601a6cd2c4dcd1$var$buildStream(client, opts) {
    opts.hostname = opts.hostname || opts.host;
    if (!opts.hostname) throw new Error("Could not determine host. Specify host manually.");
    var websocketSubProtocol = opts.protocolId === "MQIsdp" && opts.protocolVersion === 3 ? "mqttv3.1" : "mqtt";
    $2e601a6cd2c4dcd1$var$setDefaultOpts(opts);
    var url = $2e601a6cd2c4dcd1$var$buildUrl(opts, client);
    $2e601a6cd2c4dcd1$var$socketTask = wx.connectSocket({
        url: url,
        protocols: [
            websocketSubProtocol
        ]
    });
    $2e601a6cd2c4dcd1$var$proxy = $2e601a6cd2c4dcd1$var$buildProxy();
    $2e601a6cd2c4dcd1$var$stream = $illDe.obj();
    $2e601a6cd2c4dcd1$var$stream._destroy = function(err, cb) {
        $2e601a6cd2c4dcd1$var$socketTask.close({
            success: function success() {
                cb && cb(err);
            }
        });
    };
    var destroyRef = $2e601a6cd2c4dcd1$var$stream.destroy;
    $2e601a6cd2c4dcd1$var$stream.destroy = (function() {
        $2e601a6cd2c4dcd1$var$stream.destroy = destroyRef;
        var self = this;
        setTimeout(function() {
            $2e601a6cd2c4dcd1$var$socketTask.close({
                fail: function fail() {
                    self._destroy(new Error());
                }
            });
        }, 0);
    }).bind($2e601a6cd2c4dcd1$var$stream);
    $2e601a6cd2c4dcd1$var$bindEventHandler();
    return $2e601a6cd2c4dcd1$var$stream;
}
module.exports = $2e601a6cd2c4dcd1$var$buildStream;

});
parcelRequire.register("illDe", function(module, exports) {

var $lFBFq = parcelRequire("lFBFq");

var $kgUAE = parcelRequire("kgUAE");
var $d5aaf7c56f9c4024$require$Buffer = $kgUAE.Buffer;

var $dnkNt = parcelRequire("dnkNt");

var $1WeeM = parcelRequire("1WeeM");

var $ScPjF = parcelRequire("ScPjF");

var $7MsAH = parcelRequire("7MsAH");
var $d5aaf7c56f9c4024$var$SIGNAL_FLUSH = $d5aaf7c56f9c4024$require$Buffer.from && $d5aaf7c56f9c4024$require$Buffer.from !== Uint8Array.from ? $d5aaf7c56f9c4024$require$Buffer.from([
    0
]) : new $d5aaf7c56f9c4024$require$Buffer([
    0
]);
var $d5aaf7c56f9c4024$var$onuncork = function onuncork(self, fn) {
    if (self._corked) self.once("uncork", fn);
    else fn();
};
var $d5aaf7c56f9c4024$var$autoDestroy = function autoDestroy(self, err) {
    if (self._autoDestroy) self.destroy(err);
};
var $d5aaf7c56f9c4024$var$destroyer = function destroyer(self, end) {
    return function(err) {
        if (err) $d5aaf7c56f9c4024$var$autoDestroy(self, err.message === "premature close" ? null : err);
        else if (end && !self._ended) self.end();
    };
};
var $d5aaf7c56f9c4024$var$end = function end(ws, fn) {
    if (!ws) return fn();
    if (ws._writableState && ws._writableState.finished) return fn();
    if (ws._writableState) return ws.end(fn);
    ws.end();
    fn();
};
var $d5aaf7c56f9c4024$var$noop = function noop() {};
var $d5aaf7c56f9c4024$var$toStreams2 = function toStreams2(rs) {
    return new $dnkNt.Readable({
        objectMode: true,
        highWaterMark: 16
    }).wrap(rs);
};
var $d5aaf7c56f9c4024$var$Duplexify = function Duplexify1(writable, readable, opts) {
    if (!(this instanceof $d5aaf7c56f9c4024$var$Duplexify)) return new $d5aaf7c56f9c4024$var$Duplexify(writable, readable, opts);
    $dnkNt.Duplex.call(this, opts);
    this._writable = null;
    this._readable = null;
    this._readable2 = null;
    this._autoDestroy = !opts || opts.autoDestroy !== false;
    this._forwardDestroy = !opts || opts.destroy !== false;
    this._forwardEnd = !opts || opts.end !== false;
    this._corked = 1 // start corked
    ;
    this._ondrain = null;
    this._drained = false;
    this._forwarding = false;
    this._unwrite = null;
    this._unread = null;
    this._ended = false;
    this.destroyed = false;
    if (writable) this.setWritable(writable);
    if (readable) this.setReadable(readable);
};
$ScPjF($d5aaf7c56f9c4024$var$Duplexify, $dnkNt.Duplex);
$d5aaf7c56f9c4024$var$Duplexify.obj = function(writable, readable, opts) {
    if (!opts) opts = {};
    opts.objectMode = true;
    opts.highWaterMark = 16;
    return new $d5aaf7c56f9c4024$var$Duplexify(writable, readable, opts);
};
$d5aaf7c56f9c4024$var$Duplexify.prototype.cork = function() {
    if (++this._corked === 1) this.emit("cork");
};
$d5aaf7c56f9c4024$var$Duplexify.prototype.uncork = function() {
    if (this._corked && --this._corked === 0) this.emit("uncork");
};
$d5aaf7c56f9c4024$var$Duplexify.prototype.setWritable = function(writable) {
    if (this._unwrite) this._unwrite();
    if (this.destroyed) {
        if (writable && writable.destroy) writable.destroy();
        return;
    }
    if (writable === null || writable === false) {
        this.end();
        return;
    }
    var self = this;
    var unend = $1WeeM(writable, {
        writable: true,
        readable: false
    }, $d5aaf7c56f9c4024$var$destroyer(this, this._forwardEnd));
    var ondrain = function ondrain() {
        var ondrain = self._ondrain;
        self._ondrain = null;
        if (ondrain) ondrain();
    };
    var clear = function clear() {
        self._writable.removeListener("drain", ondrain);
        unend();
    };
    if (this._unwrite) $lFBFq.nextTick(ondrain) // force a drain on stream reset to avoid livelocks
    ;
    this._writable = writable;
    this._writable.on("drain", ondrain);
    this._unwrite = clear;
    this.uncork() // always uncork setWritable
    ;
};
$d5aaf7c56f9c4024$var$Duplexify.prototype.setReadable = function(readable) {
    if (this._unread) this._unread();
    if (this.destroyed) {
        if (readable && readable.destroy) readable.destroy();
        return;
    }
    if (readable === null || readable === false) {
        this.push(null);
        this.resume();
        return;
    }
    var self = this;
    var unend = $1WeeM(readable, {
        writable: false,
        readable: true
    }, $d5aaf7c56f9c4024$var$destroyer(this));
    var onreadable = function onreadable() {
        self._forward();
    };
    var onend = function onend() {
        self.push(null);
    };
    var clear = function clear() {
        self._readable2.removeListener("readable", onreadable);
        self._readable2.removeListener("end", onend);
        unend();
    };
    this._drained = true;
    this._readable = readable;
    this._readable2 = readable._readableState ? readable : $d5aaf7c56f9c4024$var$toStreams2(readable);
    this._readable2.on("readable", onreadable);
    this._readable2.on("end", onend);
    this._unread = clear;
    this._forward();
};
$d5aaf7c56f9c4024$var$Duplexify.prototype._read = function() {
    this._drained = true;
    this._forward();
};
$d5aaf7c56f9c4024$var$Duplexify.prototype._forward = function() {
    if (this._forwarding || !this._readable2 || !this._drained) return;
    this._forwarding = true;
    var data;
    while(this._drained && (data = $7MsAH(this._readable2)) !== null){
        if (this.destroyed) continue;
        this._drained = this.push(data);
    }
    this._forwarding = false;
};
$d5aaf7c56f9c4024$var$Duplexify.prototype.destroy = function(err, cb) {
    if (!cb) cb = $d5aaf7c56f9c4024$var$noop;
    if (this.destroyed) return cb(null);
    this.destroyed = true;
    var self = this;
    $lFBFq.nextTick(function() {
        self._destroy(err);
        cb(null);
    });
};
$d5aaf7c56f9c4024$var$Duplexify.prototype._destroy = function(err) {
    if (err) {
        var ondrain = this._ondrain;
        this._ondrain = null;
        if (ondrain) ondrain(err);
        else this.emit("error", err);
    }
    if (this._forwardDestroy) {
        if (this._readable && this._readable.destroy) this._readable.destroy();
        if (this._writable && this._writable.destroy) this._writable.destroy();
    }
    this.emit("close");
};
$d5aaf7c56f9c4024$var$Duplexify.prototype._write = function(data, enc, cb) {
    if (this.destroyed) return;
    if (this._corked) return $d5aaf7c56f9c4024$var$onuncork(this, this._write.bind(this, data, enc, cb));
    if (data === $d5aaf7c56f9c4024$var$SIGNAL_FLUSH) return this._finish(cb);
    if (!this._writable) return cb();
    if (this._writable.write(data) === false) this._ondrain = cb;
    else if (!this.destroyed) cb();
};
$d5aaf7c56f9c4024$var$Duplexify.prototype._finish = function(cb) {
    var self = this;
    this.emit("preend");
    $d5aaf7c56f9c4024$var$onuncork(this, function() {
        $d5aaf7c56f9c4024$var$end(self._forwardEnd && self._writable, function() {
            // haxx to not emit prefinish twice
            if (self._writableState.prefinished === false) self._writableState.prefinished = true;
            self.emit("prefinish");
            $d5aaf7c56f9c4024$var$onuncork(self, cb);
        });
    });
};
$d5aaf7c56f9c4024$var$Duplexify.prototype.end = function(data, enc, cb) {
    if (typeof data === "function") return this.end(null, null, data);
    if (typeof enc === "function") return this.end(data, null, enc);
    this._ended = true;
    if (data) this.write(data);
    if (!this._writableState.ending && !this._writableState.destroyed) this.write($d5aaf7c56f9c4024$var$SIGNAL_FLUSH);
    return $dnkNt.Writable.prototype.end.call(this, cb);
};
module.exports = $d5aaf7c56f9c4024$var$Duplexify;

});
parcelRequire.register("dnkNt", function(module, exports) {

exports = module.exports = (parcelRequire("9mnWx"));
exports.Stream = exports;
exports.Readable = exports;

exports.Writable = (parcelRequire("7ebDF"));

exports.Duplex = (parcelRequire("ldWGk"));

exports.Transform = (parcelRequire("6Y9Kj"));

exports.PassThrough = (parcelRequire("bO99v"));

exports.finished = (parcelRequire("8Z288"));

exports.pipeline = (parcelRequire("iyVsL"));

});
parcelRequire.register("9mnWx", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var $lFBFq = parcelRequire("lFBFq");
"use strict";
module.exports = $6d08bdba560aa45c$var$Readable;
/*<replacement>*/ var $6d08bdba560aa45c$var$Duplex;
/*</replacement>*/ $6d08bdba560aa45c$var$Readable.ReadableState = $6d08bdba560aa45c$var$ReadableState;

var $eJwY4 = parcelRequire("eJwY4");
var $6d08bdba560aa45c$require$EE = $eJwY4.EventEmitter;
var $6d08bdba560aa45c$var$EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};

var $98pzj = parcelRequire("98pzj");

var $kgUAE = parcelRequire("kgUAE");
var $6d08bdba560aa45c$require$Buffer = $kgUAE.Buffer;
var $6d08bdba560aa45c$var$OurUint8Array = (typeof $parcel$global !== "undefined" ? $parcel$global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function $6d08bdba560aa45c$var$_uint8ArrayToBuffer(chunk) {
    return $6d08bdba560aa45c$require$Buffer.from(chunk);
}
function $6d08bdba560aa45c$var$_isUint8Array(obj) {
    return $6d08bdba560aa45c$require$Buffer.isBuffer(obj) || obj instanceof $6d08bdba560aa45c$var$OurUint8Array;
}

var $l9xBz = parcelRequire("l9xBz");
var $6d08bdba560aa45c$var$debug;
if ($l9xBz && $l9xBz.debuglog) $6d08bdba560aa45c$var$debug = $l9xBz.debuglog("stream");
else $6d08bdba560aa45c$var$debug = function debug() {};

var $4mveB = parcelRequire("4mveB");

var $clRNX = parcelRequire("clRNX");

var $83Kao = parcelRequire("83Kao");
var $6d08bdba560aa45c$var$getHighWaterMark = $83Kao.getHighWaterMark;

var $liRvY = parcelRequire("liRvY");
var $6d08bdba560aa45c$require$_require$codes = $liRvY.codes;
var $6d08bdba560aa45c$var$ERR_INVALID_ARG_TYPE = $6d08bdba560aa45c$require$_require$codes.ERR_INVALID_ARG_TYPE, $6d08bdba560aa45c$var$ERR_STREAM_PUSH_AFTER_EOF = $6d08bdba560aa45c$require$_require$codes.ERR_STREAM_PUSH_AFTER_EOF, $6d08bdba560aa45c$var$ERR_METHOD_NOT_IMPLEMENTED = $6d08bdba560aa45c$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $6d08bdba560aa45c$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT = $6d08bdba560aa45c$require$_require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
// Lazy loaded to improve the startup performance.
var $6d08bdba560aa45c$var$StringDecoder;
var $6d08bdba560aa45c$var$createReadableStreamAsyncIterator;
var $6d08bdba560aa45c$var$from;

(parcelRequire("ScPjF"))($6d08bdba560aa45c$var$Readable, $98pzj);
var $6d08bdba560aa45c$var$errorOrDestroy = $clRNX.errorOrDestroy;
var $6d08bdba560aa45c$var$kProxyEvents = [
    "error",
    "close",
    "destroy",
    "pause",
    "resume"
];
function $6d08bdba560aa45c$var$prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}


function $6d08bdba560aa45c$var$ReadableState(options, stream, isDuplex) {
    $6d08bdba560aa45c$var$Duplex = $6d08bdba560aa45c$var$Duplex || (parcelRequire("ldWGk"));
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $6d08bdba560aa45c$var$Duplex;
    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = $6d08bdba560aa45c$var$getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new $4mveB();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true;
    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy;
    // has it been destroyed
    this.destroyed = false;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;
    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!$6d08bdba560aa45c$var$StringDecoder) $6d08bdba560aa45c$var$StringDecoder = (parcelRequire("i1uXD")).StringDecoder;
        this.decoder = new $6d08bdba560aa45c$var$StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}

function $6d08bdba560aa45c$var$Readable(options) {
    $6d08bdba560aa45c$var$Duplex = $6d08bdba560aa45c$var$Duplex || (parcelRequire("ldWGk"));
    if (!(this instanceof $6d08bdba560aa45c$var$Readable)) return new $6d08bdba560aa45c$var$Readable(options);
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $6d08bdba560aa45c$var$Duplex;
    this._readableState = new $6d08bdba560aa45c$var$ReadableState(options, this, isDuplex);
    // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === "function") this._read = options.read;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
    }
    $98pzj.call(this);
}
Object.defineProperty($6d08bdba560aa45c$var$Readable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
$6d08bdba560aa45c$var$Readable.prototype.destroy = $clRNX.destroy;
$6d08bdba560aa45c$var$Readable.prototype._undestroy = $clRNX.undestroy;
$6d08bdba560aa45c$var$Readable.prototype._destroy = function(err, cb) {
    cb(err);
};
// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
$6d08bdba560aa45c$var$Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = $6d08bdba560aa45c$require$Buffer.from(chunk, encoding);
                encoding = "";
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return $6d08bdba560aa45c$var$readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};
// Unshift should *always* be something directly out of read()
$6d08bdba560aa45c$var$Readable.prototype.unshift = function(chunk) {
    return $6d08bdba560aa45c$var$readableAddChunk(this, chunk, null, true, false);
};
function $6d08bdba560aa45c$var$readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    $6d08bdba560aa45c$var$debug("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        $6d08bdba560aa45c$var$onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = $6d08bdba560aa45c$var$chunkInvalid(state, chunk);
        if (er) $6d08bdba560aa45c$var$errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== $6d08bdba560aa45c$require$Buffer.prototype) chunk = $6d08bdba560aa45c$var$_uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) $6d08bdba560aa45c$var$errorOrDestroy(stream, new $6d08bdba560aa45c$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else $6d08bdba560aa45c$var$addChunk(stream, state, chunk, true);
            } else if (state.ended) $6d08bdba560aa45c$var$errorOrDestroy(stream, new $6d08bdba560aa45c$var$ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) $6d08bdba560aa45c$var$addChunk(stream, state, chunk, false);
                    else $6d08bdba560aa45c$var$maybeReadMore(stream, state);
                } else $6d08bdba560aa45c$var$addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            $6d08bdba560aa45c$var$maybeReadMore(stream, state);
        }
    }
    // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function $6d08bdba560aa45c$var$addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit("data", chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) $6d08bdba560aa45c$var$emitReadable(stream);
    }
    $6d08bdba560aa45c$var$maybeReadMore(stream, state);
}
function $6d08bdba560aa45c$var$chunkInvalid(state, chunk) {
    var er;
    if (!$6d08bdba560aa45c$var$_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new $6d08bdba560aa45c$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer",
        "Uint8Array"
    ], chunk);
    return er;
}
$6d08bdba560aa45c$var$Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
};

// backwards compatibility.
$6d08bdba560aa45c$var$Readable.prototype.setEncoding = function(enc) {
    if (!$6d08bdba560aa45c$var$StringDecoder) $6d08bdba560aa45c$var$StringDecoder = (parcelRequire("i1uXD")).StringDecoder;
    var decoder = new $6d08bdba560aa45c$var$StringDecoder(enc);
    this._readableState.decoder = decoder;
    // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding;
    // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = "";
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "") this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
};
// Don't raise the hwm > 1GB
var $6d08bdba560aa45c$var$MAX_HWM = 0x40000000;
function $6d08bdba560aa45c$var$computeNewHighWaterMark(n) {
    if (n >= $6d08bdba560aa45c$var$MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = $6d08bdba560aa45c$var$MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
}
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $6d08bdba560aa45c$var$howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = $6d08bdba560aa45c$var$computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
}
// you can override either this method, or the async _read(n) below.
$6d08bdba560aa45c$var$Readable.prototype.read = function(n) {
    $6d08bdba560aa45c$var$debug("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false;
    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        $6d08bdba560aa45c$var$debug("read: emitReadable", state.length, state.ended);
        if (state.length === 0 && state.ended) $6d08bdba560aa45c$var$endReadable(this);
        else $6d08bdba560aa45c$var$emitReadable(this);
        return null;
    }
    n = $6d08bdba560aa45c$var$howMuchToRead(n, state);
    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) $6d08bdba560aa45c$var$endReadable(this);
        return null;
    }
    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    $6d08bdba560aa45c$var$debug("need readable", doRead);
    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        $6d08bdba560aa45c$var$debug("length less than watermark", doRead);
    }
    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        $6d08bdba560aa45c$var$debug("reading or ended", doRead);
    } else if (doRead) {
        $6d08bdba560aa45c$var$debug("do read");
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = $6d08bdba560aa45c$var$howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = $6d08bdba560aa45c$var$fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;
        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) $6d08bdba560aa45c$var$endReadable(this);
    }
    if (ret !== null) this.emit("data", ret);
    return ret;
};
function $6d08bdba560aa45c$var$onEofChunk(stream, state) {
    $6d08bdba560aa45c$var$debug("onEofChunk");
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    $6d08bdba560aa45c$var$emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            $6d08bdba560aa45c$var$emitReadable_(stream);
        }
    }
}
// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function $6d08bdba560aa45c$var$emitReadable(stream) {
    var state = stream._readableState;
    $6d08bdba560aa45c$var$debug("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        $6d08bdba560aa45c$var$debug("emitReadable", state.flowing);
        state.emittedReadable = true;
        $lFBFq.nextTick($6d08bdba560aa45c$var$emitReadable_, stream);
    }
}
function $6d08bdba560aa45c$var$emitReadable_(stream) {
    var state = stream._readableState;
    $6d08bdba560aa45c$var$debug("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit("readable");
        state.emittedReadable = false;
    }
    // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    $6d08bdba560aa45c$var$flow(stream);
}
// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function $6d08bdba560aa45c$var$maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        $lFBFq.nextTick($6d08bdba560aa45c$var$maybeReadMore_, stream, state);
    }
}
function $6d08bdba560aa45c$var$maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        $6d08bdba560aa45c$var$debug("maybeReadMore read 0");
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
}
// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
$6d08bdba560aa45c$var$Readable.prototype._read = function(n) {
    $6d08bdba560aa45c$var$errorOrDestroy(this, new $6d08bdba560aa45c$var$ERR_METHOD_NOT_IMPLEMENTED("_read()"));
};
$6d08bdba560aa45c$var$Readable.prototype.pipe = function(dest, pipeOpts) {
    var onunpipe = function onunpipe(readable, unpipeInfo) {
        $6d08bdba560aa45c$var$debug("onunpipe");
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    };
    var onend = function onend() {
        $6d08bdba560aa45c$var$debug("onend");
        dest.end();
    };
    var cleanup = function cleanup() {
        $6d08bdba560aa45c$var$debug("cleanup");
        // cleanup event handlers once the pipe is broken
        dest.removeListener("close", onclose);
        dest.removeListener("finish", onfinish);
        dest.removeListener("drain", ondrain);
        dest.removeListener("error", onerror);
        dest.removeListener("unpipe", onunpipe);
        src.removeListener("end", onend);
        src.removeListener("end", unpipe);
        src.removeListener("data", ondata);
        cleanedUp = true;
        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    };
    var ondata = function ondata(chunk) {
        $6d08bdba560aa45c$var$debug("ondata");
        var ret = dest.write(chunk);
        $6d08bdba560aa45c$var$debug("dest.write", ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && $6d08bdba560aa45c$var$indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                $6d08bdba560aa45c$var$debug("false write response, pause", state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    };
    var onclose = // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener("finish", onfinish);
        unpipe();
    };
    var onfinish = function onfinish() {
        $6d08bdba560aa45c$var$debug("onfinish");
        dest.removeListener("close", onclose);
        unpipe();
    };
    var unpipe = function unpipe() {
        $6d08bdba560aa45c$var$debug("unpipe");
        src.unpipe(dest);
    };
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    $6d08bdba560aa45c$var$debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== $lFBFq.stdout && dest !== $lFBFq.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) $lFBFq.nextTick(endFn);
    else src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = $6d08bdba560aa45c$var$pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    src.on("data", ondata);
    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        $6d08bdba560aa45c$var$debug("onerror", er);
        unpipe();
        dest.removeListener("error", onerror);
        if ($6d08bdba560aa45c$var$EElistenerCount(dest, "error") === 0) $6d08bdba560aa45c$var$errorOrDestroy(dest, er);
    }
    // Make sure our error handler is attached before userland ones.
    $6d08bdba560aa45c$var$prependListener(dest, "error", onerror);
    dest.once("close", onclose);
    dest.once("finish", onfinish);
    // tell the dest that it's being piped to
    dest.emit("pipe", src);
    // start the flow if it hasn't been started already.
    if (!state.flowing) {
        $6d08bdba560aa45c$var$debug("pipe resume");
        src.resume();
    }
    return dest;
};
function $6d08bdba560aa45c$var$pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        $6d08bdba560aa45c$var$debug("pipeOnDrain", state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && $6d08bdba560aa45c$var$EElistenerCount(src, "data")) {
            state.flowing = true;
            $6d08bdba560aa45c$var$flow(src);
        }
    };
}
$6d08bdba560aa45c$var$Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    };
    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;
    // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit("unpipe", this, unpipeInfo);
        return this;
    }
    // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
            hasUnpiped: false
        });
        return this;
    }
    // try to find the right one.
    var index = $6d08bdba560aa45c$var$indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
};
// set up data events if they are asked for
// Ensure readable listeners eventually get something
$6d08bdba560aa45c$var$Readable.prototype.on = function(ev, fn) {
    var res = $98pzj.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount("readable") > 0;
        // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === "readable") {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            $6d08bdba560aa45c$var$debug("on readable", state.length, state.reading);
            if (state.length) $6d08bdba560aa45c$var$emitReadable(this);
            else if (!state.reading) $lFBFq.nextTick($6d08bdba560aa45c$var$nReadingNextTick, this);
        }
    }
    return res;
};
$6d08bdba560aa45c$var$Readable.prototype.addListener = $6d08bdba560aa45c$var$Readable.prototype.on;
$6d08bdba560aa45c$var$Readable.prototype.removeListener = function(ev, fn) {
    var res = $98pzj.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $lFBFq.nextTick($6d08bdba560aa45c$var$updateReadableListening, this);
    return res;
};
$6d08bdba560aa45c$var$Readable.prototype.removeAllListeners = function(ev) {
    var res = $98pzj.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $lFBFq.nextTick($6d08bdba560aa45c$var$updateReadableListening, this);
    return res;
};
function $6d08bdba560aa45c$var$updateReadableListening(self1) {
    var state = self1._readableState;
    state.readableListening = self1.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;
    else if (self1.listenerCount("data") > 0) self1.resume();
}
function $6d08bdba560aa45c$var$nReadingNextTick(self1) {
    $6d08bdba560aa45c$var$debug("readable nexttick read 0");
    self1.read(0);
}
// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
$6d08bdba560aa45c$var$Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        $6d08bdba560aa45c$var$debug("resume");
        // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        $6d08bdba560aa45c$var$resume(this, state);
    }
    state.paused = false;
    return this;
};
function $6d08bdba560aa45c$var$resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        $lFBFq.nextTick($6d08bdba560aa45c$var$resume_, stream, state);
    }
}
function $6d08bdba560aa45c$var$resume_(stream, state) {
    $6d08bdba560aa45c$var$debug("resume", state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit("resume");
    $6d08bdba560aa45c$var$flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
$6d08bdba560aa45c$var$Readable.prototype.pause = function() {
    $6d08bdba560aa45c$var$debug("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        $6d08bdba560aa45c$var$debug("pause");
        this._readableState.flowing = false;
        this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
};
function $6d08bdba560aa45c$var$flow(stream) {
    var state = stream._readableState;
    $6d08bdba560aa45c$var$debug("flow", state.flowing);
    while(state.flowing && stream.read() !== null);
}
// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
$6d08bdba560aa45c$var$Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
        $6d08bdba560aa45c$var$debug("wrapped end");
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on("data", function(chunk) {
        $6d08bdba560aa45c$var$debug("wrapped data");
        if (state.decoder) chunk = state.decoder.write(chunk);
        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    });
    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
    // proxy certain important events.
    for(var n = 0; n < $6d08bdba560aa45c$var$kProxyEvents.length; n++)stream.on($6d08bdba560aa45c$var$kProxyEvents[n], this.emit.bind(this, $6d08bdba560aa45c$var$kProxyEvents[n]));
    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        $6d08bdba560aa45c$var$debug("wrapped _read", n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};

if (typeof Symbol === "function") $6d08bdba560aa45c$var$Readable.prototype[Symbol.asyncIterator] = function() {
    if ($6d08bdba560aa45c$var$createReadableStreamAsyncIterator === undefined) $6d08bdba560aa45c$var$createReadableStreamAsyncIterator = (parcelRequire("fZfex"));
    return $6d08bdba560aa45c$var$createReadableStreamAsyncIterator(this);
};
Object.defineProperty($6d08bdba560aa45c$var$Readable.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty($6d08bdba560aa45c$var$Readable.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty($6d08bdba560aa45c$var$Readable.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
});
// exposed for testing purposes only.
$6d08bdba560aa45c$var$Readable._fromList = $6d08bdba560aa45c$var$fromList;
Object.defineProperty($6d08bdba560aa45c$var$Readable.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
});
// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $6d08bdba560aa45c$var$fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join("");
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function $6d08bdba560aa45c$var$endReadable(stream) {
    var state = stream._readableState;
    $6d08bdba560aa45c$var$debug("endReadable", state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        $lFBFq.nextTick($6d08bdba560aa45c$var$endReadableNT, state, stream);
    }
}
function $6d08bdba560aa45c$var$endReadableNT(state, stream) {
    $6d08bdba560aa45c$var$debug("endReadableNT", state.endEmitted, state.length);
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit("end");
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}

if (typeof Symbol === "function") $6d08bdba560aa45c$var$Readable.from = function(iterable, opts) {
    if ($6d08bdba560aa45c$var$from === undefined) $6d08bdba560aa45c$var$from = (parcelRequire("c1OpD"));
    return $6d08bdba560aa45c$var$from($6d08bdba560aa45c$var$Readable, iterable, opts);
};
function $6d08bdba560aa45c$var$indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

});
parcelRequire.register("98pzj", function(module, exports) {

module.exports = (parcelRequire("eJwY4")).EventEmitter;

});

parcelRequire.register("4mveB", function(module, exports) {

var $lT21Y = parcelRequire("lT21Y");
"use strict";
function $32d17201eeffeefc$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function $32d17201eeffeefc$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? $32d17201eeffeefc$var$ownKeys(Object(source), !0).forEach(function(key) {
            $32d17201eeffeefc$var$_defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : $32d17201eeffeefc$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function $32d17201eeffeefc$var$_defineProperty(obj, key, value) {
    key = $32d17201eeffeefc$var$_toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $32d17201eeffeefc$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $32d17201eeffeefc$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, $32d17201eeffeefc$var$_toPropertyKey(descriptor.key), descriptor);
    }
}
function $32d17201eeffeefc$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $32d17201eeffeefc$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $32d17201eeffeefc$var$_defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function $32d17201eeffeefc$var$_toPropertyKey(arg) {
    var key = $32d17201eeffeefc$var$_toPrimitive(arg, "string");
    return (typeof key === "undefined" ? "undefined" : (0, $lT21Y.default)(key)) === "symbol" ? key : String(key);
}
function $32d17201eeffeefc$var$_toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

var $kgUAE = parcelRequire("kgUAE");
var $32d17201eeffeefc$var$Buffer = $kgUAE.Buffer;

var $l9xBz = parcelRequire("l9xBz");
var $32d17201eeffeefc$var$inspect = $l9xBz.inspect;
var $32d17201eeffeefc$var$custom = $32d17201eeffeefc$var$inspect && $32d17201eeffeefc$var$inspect.custom || "inspect";
function $32d17201eeffeefc$var$copyBuffer(src, target, offset) {
    $32d17201eeffeefc$var$Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        $32d17201eeffeefc$var$_classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    $32d17201eeffeefc$var$_createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return $32d17201eeffeefc$var$Buffer.alloc(0);
                var ret = $32d17201eeffeefc$var$Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    $32d17201eeffeefc$var$copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            }
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            }
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = $32d17201eeffeefc$var$Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: $32d17201eeffeefc$var$custom,
            value: function value(_, options) {
                return $32d17201eeffeefc$var$inspect(this, $32d17201eeffeefc$var$_objectSpread($32d17201eeffeefc$var$_objectSpread({}, options), {}, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

});

parcelRequire.register("clRNX", function(module, exports) {

var $lFBFq = parcelRequire("lFBFq");
"use strict";
// undocumented cb() API, needed for core, not for public API
function $8fe12eb65d9e3d5a$var$destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) $lFBFq.nextTick($8fe12eb65d9e3d5a$var$emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                $lFBFq.nextTick($8fe12eb65d9e3d5a$var$emitErrorNT, this, err);
            }
        }
        return this;
    }
    // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
    // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) $lFBFq.nextTick($8fe12eb65d9e3d5a$var$emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                $lFBFq.nextTick($8fe12eb65d9e3d5a$var$emitErrorAndCloseNT, _this, err);
            } else $lFBFq.nextTick($8fe12eb65d9e3d5a$var$emitCloseNT, _this);
        } else if (cb) {
            $lFBFq.nextTick($8fe12eb65d9e3d5a$var$emitCloseNT, _this);
            cb(err);
        } else $lFBFq.nextTick($8fe12eb65d9e3d5a$var$emitCloseNT, _this);
    });
    return this;
}
function $8fe12eb65d9e3d5a$var$emitErrorAndCloseNT(self, err) {
    $8fe12eb65d9e3d5a$var$emitErrorNT(self, err);
    $8fe12eb65d9e3d5a$var$emitCloseNT(self);
}
function $8fe12eb65d9e3d5a$var$emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit("close");
}
function $8fe12eb65d9e3d5a$var$undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function $8fe12eb65d9e3d5a$var$emitErrorNT(self, err) {
    self.emit("error", err);
}
function $8fe12eb65d9e3d5a$var$errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit("error", err);
}
module.exports = {
    destroy: $8fe12eb65d9e3d5a$var$destroy,
    undestroy: $8fe12eb65d9e3d5a$var$undestroy,
    errorOrDestroy: $8fe12eb65d9e3d5a$var$errorOrDestroy
};

});

parcelRequire.register("83Kao", function(module, exports) {
"use strict";

var $liRvY = parcelRequire("liRvY");
var $5de26a49d06935e4$var$ERR_INVALID_OPT_VALUE = $liRvY.codes.ERR_INVALID_OPT_VALUE;
function $5de26a49d06935e4$var$highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function $5de26a49d06935e4$var$getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = $5de26a49d06935e4$var$highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new $5de26a49d06935e4$var$ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    }
    // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: $5de26a49d06935e4$var$getHighWaterMark
};

});
parcelRequire.register("liRvY", function(module, exports) {

$parcel$export(module.exports, "codes", function () { return $f824ca4db8cc590e$export$e45cb6485273080e; }, function (v) { return $f824ca4db8cc590e$export$e45cb6485273080e = v; });

var $lT21Y = parcelRequire("lT21Y");
var $f824ca4db8cc590e$export$e45cb6485273080e;
"use strict";
function $f824ca4db8cc590e$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var $f824ca4db8cc590e$var$codes = {};
function $f824ca4db8cc590e$var$createErrorType(code, message, Base) {
    var getMessage = function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") return message;
        else return message(arg1, arg2, arg3);
    };
    if (!Base) Base = Error;
    var NodeError = /*#__PURE__*/ function(_Base) {
        var NodeError = function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        };
        $f824ca4db8cc590e$var$_inheritsLoose(NodeError, _Base);
        return NodeError;
    }(Base);
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    $f824ca4db8cc590e$var$codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function $f824ca4db8cc590e$var$oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function $f824ca4db8cc590e$var$startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $f824ca4db8cc590e$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function $f824ca4db8cc590e$var$includes(str, search, start) {
    if (typeof start !== "number") start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
$f824ca4db8cc590e$var$createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
$f824ca4db8cc590e$var$createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === "string" && $f824ca4db8cc590e$var$startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
    } else determiner = "must be";
    var msg;
    if ($f824ca4db8cc590e$var$endsWith(name, " argument")) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat($f824ca4db8cc590e$var$oneOf(expected, "type"));
    else {
        var type = $f824ca4db8cc590e$var$includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat($f824ca4db8cc590e$var$oneOf(expected, "type"));
    }
    msg += ". Received type ".concat(typeof actual === "undefined" ? "undefined" : (0, $lT21Y.default)(actual));
    return msg;
}, TypeError);
$f824ca4db8cc590e$var$createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
$f824ca4db8cc590e$var$createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
});
$f824ca4db8cc590e$var$createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
$f824ca4db8cc590e$var$createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
});
$f824ca4db8cc590e$var$createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
$f824ca4db8cc590e$var$createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
$f824ca4db8cc590e$var$createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
$f824ca4db8cc590e$var$createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
$f824ca4db8cc590e$var$createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
    return "Unknown encoding: " + arg;
}, TypeError);
$f824ca4db8cc590e$var$createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
$f824ca4db8cc590e$export$e45cb6485273080e = $f824ca4db8cc590e$var$codes;

});


parcelRequire.register("ldWGk", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

var $lFBFq = parcelRequire("lFBFq");
"use strict";
/*<replacement>*/ var $f73854d6f87a6358$var$objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = $f73854d6f87a6358$var$Duplex;

var $9mnWx = parcelRequire("9mnWx");

var $7ebDF = parcelRequire("7ebDF");

(parcelRequire("ScPjF"))($f73854d6f87a6358$var$Duplex, $9mnWx);
// Allow the keys array to be GC'ed.
var $f73854d6f87a6358$var$keys = $f73854d6f87a6358$var$objectKeys($7ebDF.prototype);
for(var $f73854d6f87a6358$var$v = 0; $f73854d6f87a6358$var$v < $f73854d6f87a6358$var$keys.length; $f73854d6f87a6358$var$v++){
    var $f73854d6f87a6358$var$method = $f73854d6f87a6358$var$keys[$f73854d6f87a6358$var$v];
    if (!$f73854d6f87a6358$var$Duplex.prototype[$f73854d6f87a6358$var$method]) $f73854d6f87a6358$var$Duplex.prototype[$f73854d6f87a6358$var$method] = $7ebDF.prototype[$f73854d6f87a6358$var$method];
}
function $f73854d6f87a6358$var$Duplex(options) {
    if (!(this instanceof $f73854d6f87a6358$var$Duplex)) return new $f73854d6f87a6358$var$Duplex(options);
    $9mnWx.call(this, options);
    $7ebDF.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", $f73854d6f87a6358$var$onend);
        }
    }
}
Object.defineProperty($f73854d6f87a6358$var$Duplex.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty($f73854d6f87a6358$var$Duplex.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty($f73854d6f87a6358$var$Duplex.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
// the no-half-open enforcer
function $f73854d6f87a6358$var$onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return;
    // no more data can be written.
    // But allow more writes to happen in this tick.
    $lFBFq.nextTick($f73854d6f87a6358$var$onEndNT, this);
}
function $f73854d6f87a6358$var$onEndNT(self) {
    self.end();
}
Object.defineProperty($f73854d6f87a6358$var$Duplex.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

});
parcelRequire.register("7ebDF", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

var $lFBFq = parcelRequire("lFBFq");
"use strict";
module.exports = $5432de69e89b622c$var$Writable;
/* <replacement> */ function $5432de69e89b622c$var$WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
}
// It seems a linked list but it is not
// there will be only 2 of these for each stream
function $5432de69e89b622c$var$CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        $5432de69e89b622c$var$onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var $5432de69e89b622c$var$Duplex;
/*</replacement>*/ $5432de69e89b622c$var$Writable.WritableState = $5432de69e89b622c$var$WritableState;

/*<replacement>*/ var $5432de69e89b622c$var$internalUtil = {
    deprecate: (parcelRequire("2p2sk"))
};

var $98pzj = parcelRequire("98pzj");

var $kgUAE = parcelRequire("kgUAE");
var $5432de69e89b622c$require$Buffer = $kgUAE.Buffer;
var $5432de69e89b622c$var$OurUint8Array = (typeof $parcel$global !== "undefined" ? $parcel$global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
function $5432de69e89b622c$var$_uint8ArrayToBuffer(chunk) {
    return $5432de69e89b622c$require$Buffer.from(chunk);
}
function $5432de69e89b622c$var$_isUint8Array(obj) {
    return $5432de69e89b622c$require$Buffer.isBuffer(obj) || obj instanceof $5432de69e89b622c$var$OurUint8Array;
}

var $clRNX = parcelRequire("clRNX");

var $83Kao = parcelRequire("83Kao");
var $5432de69e89b622c$var$getHighWaterMark = $83Kao.getHighWaterMark;

var $liRvY = parcelRequire("liRvY");
var $5432de69e89b622c$require$_require$codes = $liRvY.codes;
var $5432de69e89b622c$var$ERR_INVALID_ARG_TYPE = $5432de69e89b622c$require$_require$codes.ERR_INVALID_ARG_TYPE, $5432de69e89b622c$var$ERR_METHOD_NOT_IMPLEMENTED = $5432de69e89b622c$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $5432de69e89b622c$var$ERR_MULTIPLE_CALLBACK = $5432de69e89b622c$require$_require$codes.ERR_MULTIPLE_CALLBACK, $5432de69e89b622c$var$ERR_STREAM_CANNOT_PIPE = $5432de69e89b622c$require$_require$codes.ERR_STREAM_CANNOT_PIPE, $5432de69e89b622c$var$ERR_STREAM_DESTROYED = $5432de69e89b622c$require$_require$codes.ERR_STREAM_DESTROYED, $5432de69e89b622c$var$ERR_STREAM_NULL_VALUES = $5432de69e89b622c$require$_require$codes.ERR_STREAM_NULL_VALUES, $5432de69e89b622c$var$ERR_STREAM_WRITE_AFTER_END = $5432de69e89b622c$require$_require$codes.ERR_STREAM_WRITE_AFTER_END, $5432de69e89b622c$var$ERR_UNKNOWN_ENCODING = $5432de69e89b622c$require$_require$codes.ERR_UNKNOWN_ENCODING;
var $5432de69e89b622c$var$errorOrDestroy = $clRNX.errorOrDestroy;

(parcelRequire("ScPjF"))($5432de69e89b622c$var$Writable, $98pzj);
function $5432de69e89b622c$var$nop() {}

function $5432de69e89b622c$var$WritableState(options, stream, isDuplex) {
    $5432de69e89b622c$var$Duplex = $5432de69e89b622c$var$Duplex || (parcelRequire("ldWGk"));
    options = options || {};
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== "boolean") isDuplex = stream instanceof $5432de69e89b622c$var$Duplex;
    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = $5432de69e89b622c$var$getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
    // if _final has been called
    this.finalCalled = false;
    // drain event flag.
    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;
    // has it been destroyed
    this.destroyed = false;
    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || "utf8";
    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;
    // a flag to see when we're in the middle of a write.
    this.writing = false;
    // when true all writes will be buffered until .uncork() call
    this.corked = 0;
    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;
    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;
    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        $5432de69e89b622c$var$onwrite(stream, er);
    };
    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;
    // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;
    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;
    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy;
    // count buffered requests
    this.bufferedRequestCount = 0;
    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new $5432de69e89b622c$var$CorkedRequest(this);
}
$5432de69e89b622c$var$WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty($5432de69e89b622c$var$WritableState.prototype, "buffer", {
            get: $5432de69e89b622c$var$internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
        });
    } catch (_) {}
})();
// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var $5432de69e89b622c$var$realHasInstance;
if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    $5432de69e89b622c$var$realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty($5432de69e89b622c$var$Writable, Symbol.hasInstance, {
        value: function value(object) {
            if ($5432de69e89b622c$var$realHasInstance.call(this, object)) return true;
            if (this !== $5432de69e89b622c$var$Writable) return false;
            return object && object._writableState instanceof $5432de69e89b622c$var$WritableState;
        }
    });
} else $5432de69e89b622c$var$realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};

function $5432de69e89b622c$var$Writable(options) {
    $5432de69e89b622c$var$Duplex = $5432de69e89b622c$var$Duplex || (parcelRequire("ldWGk"));
    // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $5432de69e89b622c$var$Duplex;
    if (!isDuplex && !$5432de69e89b622c$var$realHasInstance.call($5432de69e89b622c$var$Writable, this)) return new $5432de69e89b622c$var$Writable(options);
    this._writableState = new $5432de69e89b622c$var$WritableState(options, this, isDuplex);
    // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === "function") this._write = options.write;
        if (typeof options.writev === "function") this._writev = options.writev;
        if (typeof options.destroy === "function") this._destroy = options.destroy;
        if (typeof options["final"] === "function") this._final = options["final"];
    }
    $98pzj.call(this);
}
// Otherwise people can pipe Writable streams, which is just wrong.
$5432de69e89b622c$var$Writable.prototype.pipe = function() {
    $5432de69e89b622c$var$errorOrDestroy(this, new $5432de69e89b622c$var$ERR_STREAM_CANNOT_PIPE());
};
function $5432de69e89b622c$var$writeAfterEnd(stream, cb) {
    var er = new $5432de69e89b622c$var$ERR_STREAM_WRITE_AFTER_END();
    // TODO: defer error events consistently everywhere, not just the cb
    $5432de69e89b622c$var$errorOrDestroy(stream, er);
    $lFBFq.nextTick(cb, er);
}
// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function $5432de69e89b622c$var$validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new $5432de69e89b622c$var$ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== "string" && !state.objectMode) er = new $5432de69e89b622c$var$ERR_INVALID_ARG_TYPE("chunk", [
        "string",
        "Buffer"
    ], chunk);
    if (er) {
        $5432de69e89b622c$var$errorOrDestroy(stream, er);
        $lFBFq.nextTick(cb, er);
        return false;
    }
    return true;
}
$5432de69e89b622c$var$Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && $5432de69e89b622c$var$_isUint8Array(chunk);
    if (isBuf && !$5432de69e89b622c$require$Buffer.isBuffer(chunk)) chunk = $5432de69e89b622c$var$_uint8ArrayToBuffer(chunk);
    if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = "buffer";
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== "function") cb = $5432de69e89b622c$var$nop;
    if (state.ending) $5432de69e89b622c$var$writeAfterEnd(this, cb);
    else if (isBuf || $5432de69e89b622c$var$validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = $5432de69e89b622c$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
$5432de69e89b622c$var$Writable.prototype.cork = function() {
    this._writableState.corked++;
};
$5432de69e89b622c$var$Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $5432de69e89b622c$var$clearBuffer(this, state);
    }
};
$5432de69e89b622c$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === "string") encoding = encoding.toLowerCase();
    if (!([
        "hex",
        "utf8",
        "utf-8",
        "ascii",
        "binary",
        "base64",
        "ucs2",
        "ucs-2",
        "utf16le",
        "utf-16le",
        "raw"
    ].indexOf((encoding + "").toLowerCase()) > -1)) throw new $5432de69e89b622c$var$ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty($5432de69e89b622c$var$Writable.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function $5432de69e89b622c$var$decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = $5432de69e89b622c$require$Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty($5432de69e89b622c$var$Writable.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function $5432de69e89b622c$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = $5432de69e89b622c$var$decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else $5432de69e89b622c$var$doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function $5432de69e89b622c$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new $5432de69e89b622c$var$ERR_STREAM_DESTROYED("write"));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function $5432de69e89b622c$var$onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        $lFBFq.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        $lFBFq.nextTick($5432de69e89b622c$var$finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        $5432de69e89b622c$var$errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        $5432de69e89b622c$var$errorOrDestroy(stream, er);
        // this can emit finish, but finish must
        // always follow error
        $5432de69e89b622c$var$finishMaybe(stream, state);
    }
}
function $5432de69e89b622c$var$onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function $5432de69e89b622c$var$onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function") throw new $5432de69e89b622c$var$ERR_MULTIPLE_CALLBACK();
    $5432de69e89b622c$var$onwriteStateUpdate(state);
    if (er) $5432de69e89b622c$var$onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = $5432de69e89b622c$var$needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) $5432de69e89b622c$var$clearBuffer(stream, state);
        if (sync) $lFBFq.nextTick($5432de69e89b622c$var$afterWrite, stream, state, finished, cb);
        else $5432de69e89b622c$var$afterWrite(stream, state, finished, cb);
    }
}
function $5432de69e89b622c$var$afterWrite(stream, state, finished, cb) {
    if (!finished) $5432de69e89b622c$var$onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    $5432de69e89b622c$var$finishMaybe(stream, state);
}
// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function $5432de69e89b622c$var$onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit("drain");
    }
}
// if there's something in the buffer waiting, then process it
function $5432de69e89b622c$var$clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        $5432de69e89b622c$var$doWrite(stream, state, true, state.length, buffer, "", holder.finish);
        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new $5432de69e89b622c$var$CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            $5432de69e89b622c$var$doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
$5432de69e89b622c$var$Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new $5432de69e89b622c$var$ERR_METHOD_NOT_IMPLEMENTED("_write()"));
};
$5432de69e89b622c$var$Writable.prototype._writev = null;
$5432de69e89b622c$var$Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === "function") {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
    // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    }
    // ignore unnecessary end() calls.
    if (!state.ending) $5432de69e89b622c$var$endWritable(this, state, cb);
    return this;
};
Object.defineProperty($5432de69e89b622c$var$Writable.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function $5432de69e89b622c$var$needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function $5432de69e89b622c$var$callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) $5432de69e89b622c$var$errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit("prefinish");
        $5432de69e89b622c$var$finishMaybe(stream, state);
    });
}
function $5432de69e89b622c$var$prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            $lFBFq.nextTick($5432de69e89b622c$var$callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit("prefinish");
        }
    }
}
function $5432de69e89b622c$var$finishMaybe(stream, state) {
    var need = $5432de69e89b622c$var$needFinish(state);
    if (need) {
        $5432de69e89b622c$var$prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function $5432de69e89b622c$var$endWritable(stream, state, cb) {
    state.ending = true;
    $5432de69e89b622c$var$finishMaybe(stream, state);
    if (cb) {
        if (state.finished) $lFBFq.nextTick(cb);
        else stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
}
function $5432de69e89b622c$var$onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    }
    // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty($5432de69e89b622c$var$Writable.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
$5432de69e89b622c$var$Writable.prototype.destroy = $clRNX.destroy;
$5432de69e89b622c$var$Writable.prototype._undestroy = $clRNX.undestroy;
$5432de69e89b622c$var$Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

});


parcelRequire.register("fZfex", function(module, exports) {

var $lT21Y = parcelRequire("lT21Y");

var $lFBFq = parcelRequire("lFBFq");
"use strict";
var $ba385e95e0209157$var$_Object$setPrototypeO;
function $ba385e95e0209157$var$_defineProperty(obj, key, value) {
    key = $ba385e95e0209157$var$_toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $ba385e95e0209157$var$_toPropertyKey(arg) {
    var key = $ba385e95e0209157$var$_toPrimitive(arg, "string");
    return (typeof key === "undefined" ? "undefined" : (0, $lT21Y.default)(key)) === "symbol" ? key : String(key);
}
function $ba385e95e0209157$var$_toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}

var $8Z288 = parcelRequire("8Z288");
var $ba385e95e0209157$var$kLastResolve = Symbol("lastResolve");
var $ba385e95e0209157$var$kLastReject = Symbol("lastReject");
var $ba385e95e0209157$var$kError = Symbol("error");
var $ba385e95e0209157$var$kEnded = Symbol("ended");
var $ba385e95e0209157$var$kLastPromise = Symbol("lastPromise");
var $ba385e95e0209157$var$kHandlePromise = Symbol("handlePromise");
var $ba385e95e0209157$var$kStream = Symbol("stream");
function $ba385e95e0209157$var$createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function $ba385e95e0209157$var$readAndResolve(iter) {
    var resolve = iter[$ba385e95e0209157$var$kLastResolve];
    if (resolve !== null) {
        var data = iter[$ba385e95e0209157$var$kStream].read();
        // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[$ba385e95e0209157$var$kLastPromise] = null;
            iter[$ba385e95e0209157$var$kLastResolve] = null;
            iter[$ba385e95e0209157$var$kLastReject] = null;
            resolve($ba385e95e0209157$var$createIterResult(data, false));
        }
    }
}
function $ba385e95e0209157$var$onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    $lFBFq.nextTick($ba385e95e0209157$var$readAndResolve, iter);
}
function $ba385e95e0209157$var$wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[$ba385e95e0209157$var$kEnded]) {
                resolve($ba385e95e0209157$var$createIterResult(undefined, true));
                return;
            }
            iter[$ba385e95e0209157$var$kHandlePromise](resolve, reject);
        }, reject);
    };
}
var $ba385e95e0209157$var$AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var $ba385e95e0209157$var$ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(($ba385e95e0209157$var$_Object$setPrototypeO = {
    get stream () {
        return this[$ba385e95e0209157$var$kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[$ba385e95e0209157$var$kError];
        if (error !== null) return Promise.reject(error);
        if (this[$ba385e95e0209157$var$kEnded]) return Promise.resolve($ba385e95e0209157$var$createIterResult(undefined, true));
        if (this[$ba385e95e0209157$var$kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            $lFBFq.nextTick(function() {
                if (_this[$ba385e95e0209157$var$kError]) reject(_this[$ba385e95e0209157$var$kError]);
                else resolve($ba385e95e0209157$var$createIterResult(undefined, true));
            });
        });
        // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[$ba385e95e0209157$var$kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise($ba385e95e0209157$var$wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[$ba385e95e0209157$var$kStream].read();
            if (data !== null) return Promise.resolve($ba385e95e0209157$var$createIterResult(data, false));
            promise = new Promise(this[$ba385e95e0209157$var$kHandlePromise]);
        }
        this[$ba385e95e0209157$var$kLastPromise] = promise;
        return promise;
    }
}, $ba385e95e0209157$var$_defineProperty($ba385e95e0209157$var$_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), $ba385e95e0209157$var$_defineProperty($ba385e95e0209157$var$_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[$ba385e95e0209157$var$kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve($ba385e95e0209157$var$createIterResult(undefined, true));
        });
    });
}), $ba385e95e0209157$var$_Object$setPrototypeO), $ba385e95e0209157$var$AsyncIteratorPrototype);
var $ba385e95e0209157$var$createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create($ba385e95e0209157$var$ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, $ba385e95e0209157$var$_defineProperty(_Object$create, $ba385e95e0209157$var$kStream, {
        value: stream,
        writable: true
    }), $ba385e95e0209157$var$_defineProperty(_Object$create, $ba385e95e0209157$var$kLastResolve, {
        value: null,
        writable: true
    }), $ba385e95e0209157$var$_defineProperty(_Object$create, $ba385e95e0209157$var$kLastReject, {
        value: null,
        writable: true
    }), $ba385e95e0209157$var$_defineProperty(_Object$create, $ba385e95e0209157$var$kError, {
        value: null,
        writable: true
    }), $ba385e95e0209157$var$_defineProperty(_Object$create, $ba385e95e0209157$var$kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), $ba385e95e0209157$var$_defineProperty(_Object$create, $ba385e95e0209157$var$kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[$ba385e95e0209157$var$kStream].read();
            if (data) {
                iterator[$ba385e95e0209157$var$kLastPromise] = null;
                iterator[$ba385e95e0209157$var$kLastResolve] = null;
                iterator[$ba385e95e0209157$var$kLastReject] = null;
                resolve($ba385e95e0209157$var$createIterResult(data, false));
            } else {
                iterator[$ba385e95e0209157$var$kLastResolve] = resolve;
                iterator[$ba385e95e0209157$var$kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[$ba385e95e0209157$var$kLastPromise] = null;
    $8Z288(stream, function(err) {
        if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[$ba385e95e0209157$var$kLastReject];
            // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[$ba385e95e0209157$var$kLastPromise] = null;
                iterator[$ba385e95e0209157$var$kLastResolve] = null;
                iterator[$ba385e95e0209157$var$kLastReject] = null;
                reject(err);
            }
            iterator[$ba385e95e0209157$var$kError] = err;
            return;
        }
        var resolve = iterator[$ba385e95e0209157$var$kLastResolve];
        if (resolve !== null) {
            iterator[$ba385e95e0209157$var$kLastPromise] = null;
            iterator[$ba385e95e0209157$var$kLastResolve] = null;
            iterator[$ba385e95e0209157$var$kLastReject] = null;
            resolve($ba385e95e0209157$var$createIterResult(undefined, true));
        }
        iterator[$ba385e95e0209157$var$kEnded] = true;
    });
    stream.on("readable", $ba385e95e0209157$var$onReadable.bind(null, iterator));
    return iterator;
};
module.exports = $ba385e95e0209157$var$createReadableStreamAsyncIterator;

});
parcelRequire.register("8Z288", function(module, exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";

var $liRvY = parcelRequire("liRvY");
var $68a5ac42875be0db$var$ERR_STREAM_PREMATURE_CLOSE = $liRvY.codes.ERR_STREAM_PREMATURE_CLOSE;
function $68a5ac42875be0db$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function $68a5ac42875be0db$var$noop() {}
function $68a5ac42875be0db$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}
function $68a5ac42875be0db$var$eos(stream, opts, callback) {
    if (typeof opts === "function") return $68a5ac42875be0db$var$eos(stream, null, opts);
    if (!opts) opts = {};
    callback = $68a5ac42875be0db$var$once(callback || $68a5ac42875be0db$var$noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new $68a5ac42875be0db$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new $68a5ac42875be0db$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if ($68a5ac42875be0db$var$isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
}
module.exports = $68a5ac42875be0db$var$eos;

});


parcelRequire.register("c1OpD", function(module, exports) {
module.exports = function() {
    throw new Error("Readable.from is not available in the browser");
};

});


parcelRequire.register("6Y9Kj", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
"use strict";
module.exports = $512fe80486729629$var$Transform;

var $liRvY = parcelRequire("liRvY");
var $512fe80486729629$require$_require$codes = $liRvY.codes;
var $512fe80486729629$var$ERR_METHOD_NOT_IMPLEMENTED = $512fe80486729629$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $512fe80486729629$var$ERR_MULTIPLE_CALLBACK = $512fe80486729629$require$_require$codes.ERR_MULTIPLE_CALLBACK, $512fe80486729629$var$ERR_TRANSFORM_ALREADY_TRANSFORMING = $512fe80486729629$require$_require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, $512fe80486729629$var$ERR_TRANSFORM_WITH_LENGTH_0 = $512fe80486729629$require$_require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var $ldWGk = parcelRequire("ldWGk");

(parcelRequire("ScPjF"))($512fe80486729629$var$Transform, $ldWGk);
function $512fe80486729629$var$afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit("error", new $512fe80486729629$var$ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function $512fe80486729629$var$Transform(options) {
    if (!(this instanceof $512fe80486729629$var$Transform)) return new $512fe80486729629$var$Transform(options);
    $ldWGk.call(this, options);
    this._transformState = {
        afterTransform: $512fe80486729629$var$afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    };
    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;
    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === "function") this._transform = options.transform;
        if (typeof options.flush === "function") this._flush = options.flush;
    }
    // When the writable side finishes, then flush out anything remaining.
    this.on("prefinish", $512fe80486729629$var$prefinish);
}
function $512fe80486729629$var$prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
        $512fe80486729629$var$done(_this, er, data);
    });
    else $512fe80486729629$var$done(this, null, null);
}
$512fe80486729629$var$Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return $ldWGk.prototype.push.call(this, chunk, encoding);
};
// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
$512fe80486729629$var$Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new $512fe80486729629$var$ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
};
$512fe80486729629$var$Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
};
// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
$512fe80486729629$var$Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
$512fe80486729629$var$Transform.prototype._destroy = function(err, cb) {
    $ldWGk.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function $512fe80486729629$var$done(stream, er, data) {
    if (er) return stream.emit("error", er);
    if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);
    // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new $512fe80486729629$var$ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new $512fe80486729629$var$ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

});

parcelRequire.register("bO99v", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
"use strict";
module.exports = $898b76ae22d4137f$var$PassThrough;

var $6Y9Kj = parcelRequire("6Y9Kj");

(parcelRequire("ScPjF"))($898b76ae22d4137f$var$PassThrough, $6Y9Kj);
function $898b76ae22d4137f$var$PassThrough(options) {
    if (!(this instanceof $898b76ae22d4137f$var$PassThrough)) return new $898b76ae22d4137f$var$PassThrough(options);
    $6Y9Kj.call(this, options);
}
$898b76ae22d4137f$var$PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

});

parcelRequire.register("iyVsL", function(module, exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
"use strict";
var $d837f9e9216fe978$var$eos;
function $d837f9e9216fe978$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}

var $liRvY = parcelRequire("liRvY");
var $d837f9e9216fe978$require$_require$codes = $liRvY.codes;
var $d837f9e9216fe978$var$ERR_MISSING_ARGS = $d837f9e9216fe978$require$_require$codes.ERR_MISSING_ARGS, $d837f9e9216fe978$var$ERR_STREAM_DESTROYED = $d837f9e9216fe978$require$_require$codes.ERR_STREAM_DESTROYED;
function $d837f9e9216fe978$var$noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function $d837f9e9216fe978$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
}

function $d837f9e9216fe978$var$destroyer(stream, reading, writing, callback) {
    callback = $d837f9e9216fe978$var$once(callback);
    var closed = false;
    stream.on("close", function() {
        closed = true;
    });
    if ($d837f9e9216fe978$var$eos === undefined) $d837f9e9216fe978$var$eos = (parcelRequire("8Z288"));
    $d837f9e9216fe978$var$eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true;
        // request.destroy just do .end - .abort is what we want
        if ($d837f9e9216fe978$var$isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === "function") return stream.destroy();
        callback(err || new $d837f9e9216fe978$var$ERR_STREAM_DESTROYED("pipe"));
    };
}
function $d837f9e9216fe978$var$call(fn) {
    fn();
}
function $d837f9e9216fe978$var$pipe(from, to) {
    return from.pipe(to);
}
function $d837f9e9216fe978$var$popCallback(streams) {
    if (!streams.length) return $d837f9e9216fe978$var$noop;
    if (typeof streams[streams.length - 1] !== "function") return $d837f9e9216fe978$var$noop;
    return streams.pop();
}
function $d837f9e9216fe978$var$pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = $d837f9e9216fe978$var$popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new $d837f9e9216fe978$var$ERR_MISSING_ARGS("streams");
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return $d837f9e9216fe978$var$destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach($d837f9e9216fe978$var$call);
            if (reading) return;
            destroys.forEach($d837f9e9216fe978$var$call);
            callback(error);
        });
    });
    return streams.reduce($d837f9e9216fe978$var$pipe);
}
module.exports = $d837f9e9216fe978$var$pipeline;

});


parcelRequire.register("1WeeM", function(module, exports) {

var $lFBFq = parcelRequire("lFBFq");

var $4iqiA = parcelRequire("4iqiA");
var $16964076b31093af$var$noop = function noop() {};
var $16964076b31093af$var$isRequest = function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
};
var $16964076b31093af$var$isChildProcess = function isChildProcess(stream) {
    return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3;
};
var $16964076b31093af$var$eos = function eos1(stream, opts, callback) {
    if (typeof opts === "function") return $16964076b31093af$var$eos(stream, null, opts);
    if (!opts) opts = {};
    callback = $4iqiA(callback || $16964076b31093af$var$noop);
    var ws = stream._writableState;
    var rs = stream._readableState;
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var cancelled = false;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var onfinish = function onfinish() {
        writable = false;
        if (!readable) callback.call(stream);
    };
    var onend = function onend() {
        readable = false;
        if (!writable) callback.call(stream);
    };
    var onexit = function onexit(exitCode) {
        callback.call(stream, exitCode ? new Error("exited with error code: " + exitCode) : null);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        $lFBFq.nextTick(onclosenexttick);
    };
    var onclosenexttick = function onclosenexttick() {
        if (cancelled) return;
        if (readable && !(rs && rs.ended && !rs.destroyed)) return callback.call(stream, new Error("premature close"));
        if (writable && !(ws && ws.ended && !ws.destroyed)) return callback.call(stream, new Error("premature close"));
    };
    var onrequest = function onrequest() {
        stream.req.on("finish", onfinish);
    };
    if ($16964076b31093af$var$isRequest(stream)) {
        stream.on("complete", onfinish);
        stream.on("abort", onclose);
        if (stream.req) onrequest();
        else stream.on("request", onrequest);
    } else if (writable && !ws) {
        stream.on("end", onlegacyfinish);
        stream.on("close", onlegacyfinish);
    }
    if ($16964076b31093af$var$isChildProcess(stream)) stream.on("exit", onexit);
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false) stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
        cancelled = true;
        stream.removeListener("complete", onfinish);
        stream.removeListener("abort", onclose);
        stream.removeListener("request", onrequest);
        if (stream.req) stream.req.removeListener("finish", onfinish);
        stream.removeListener("end", onlegacyfinish);
        stream.removeListener("close", onlegacyfinish);
        stream.removeListener("finish", onfinish);
        stream.removeListener("exit", onexit);
        stream.removeListener("end", onend);
        stream.removeListener("error", onerror);
        stream.removeListener("close", onclose);
    };
};
module.exports = $16964076b31093af$var$eos;

});
parcelRequire.register("4iqiA", function(module, exports) {

var $8Tv50 = parcelRequire("8Tv50");
module.exports = $8Tv50($320d3e4545d2070f$var$once);
module.exports.strict = $8Tv50($320d3e4545d2070f$var$onceStrict);
$320d3e4545d2070f$var$once.proto = $320d3e4545d2070f$var$once(function() {
    Object.defineProperty(Function.prototype, "once", {
        value: function value() {
            return $320d3e4545d2070f$var$once(this);
        },
        configurable: true
    });
    Object.defineProperty(Function.prototype, "onceStrict", {
        value: function value() {
            return $320d3e4545d2070f$var$onceStrict(this);
        },
        configurable: true
    });
});
function $320d3e4545d2070f$var$once(fn) {
    var f = function f1() {
        if (f.called) return f.value;
        f.called = true;
        return f.value = fn.apply(this, arguments);
    };
    f.called = false;
    return f;
}
function $320d3e4545d2070f$var$onceStrict(fn) {
    var f = function f1() {
        if (f.called) throw new Error(f.onceError);
        f.called = true;
        return f.value = fn.apply(this, arguments);
    };
    var name = fn.name || "Function wrapped with `once`";
    f.onceError = name + " shouldn't be called more than once";
    f.called = false;
    return f;
}

});
parcelRequire.register("8Tv50", function(module, exports) {
// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = $679b919004024be0$var$wrappy;
function $679b919004024be0$var$wrappy(fn, cb) {
    var wrapper = function wrapper() {
        var args = new Array(arguments.length);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i];
        var ret = fn.apply(this, args);
        var _$cb = args[args.length - 1];
        if (typeof ret === "function" && ret !== _$cb) Object.keys(_$cb).forEach(function(k) {
            ret[k] = _$cb[k];
        });
        return ret;
    };
    if (fn && cb) return $679b919004024be0$var$wrappy(fn)(cb);
    if (typeof fn !== "function") throw new TypeError("need wrapper function");
    Object.keys(fn).forEach(function(k) {
        wrapper[k] = fn[k];
    });
    return wrapper;
}

});



parcelRequire.register("7MsAH", function(module, exports) {
module.exports = $5aa331ad2e0a893c$var$shift;
function $5aa331ad2e0a893c$var$shift(stream) {
    var rs = stream._readableState;
    if (!rs) return null;
    return rs.objectMode || typeof stream._duplexState === "number" ? stream.read() : stream.read($5aa331ad2e0a893c$var$getStateLength(rs));
}
function $5aa331ad2e0a893c$var$getStateLength(state) {
    if (state.buffer.length) {
        // Since node 6.3.0 state.buffer is a BufferList not an array
        if (state.buffer.head) return state.buffer.head.data.length;
        return state.buffer[0].length;
    }
    return state.length;
}

});



parcelRequire.register("74izN", function(module, exports) {
"use strict";

var $kgUAE = parcelRequire("kgUAE");
var $525750fa67ec2fa3$require$Buffer = $kgUAE.Buffer;

var $2M7q0 = parcelRequire("2M7q0");
var $525750fa67ec2fa3$require$Transform = $2M7q0.Transform;

var $illDe = parcelRequire("illDe");
/* global FileReader */ var $525750fa67ec2fa3$var$my;
var $525750fa67ec2fa3$var$proxy;
var $525750fa67ec2fa3$var$stream;
var $525750fa67ec2fa3$var$isInitialized = false;
function $525750fa67ec2fa3$var$buildProxy() {
    var proxy = new $525750fa67ec2fa3$require$Transform();
    proxy._write = function(chunk, encoding, next) {
        $525750fa67ec2fa3$var$my.sendSocketMessage({
            data: chunk.buffer,
            success: function success() {
                next();
            },
            fail: function fail() {
                next(new Error());
            }
        });
    };
    proxy._flush = function socketEnd(done) {
        $525750fa67ec2fa3$var$my.closeSocket({
            success: function success() {
                done();
            }
        });
    };
    return proxy;
}
function $525750fa67ec2fa3$var$setDefaultOpts(opts) {
    if (!opts.hostname) opts.hostname = "localhost";
    if (!opts.path) opts.path = "/";
    if (!opts.wsOptions) opts.wsOptions = {};
}
function $525750fa67ec2fa3$var$buildUrl(opts, client) {
    var protocol = opts.protocol === "alis" ? "wss" : "ws";
    var url = protocol + "://" + opts.hostname + opts.path;
    if (opts.port && opts.port !== 80 && opts.port !== 443) url = protocol + "://" + opts.hostname + ":" + opts.port + opts.path;
    if (typeof opts.transformWsUrl === "function") url = opts.transformWsUrl(url, opts, client);
    return url;
}
function $525750fa67ec2fa3$var$bindEventHandler() {
    if ($525750fa67ec2fa3$var$isInitialized) return;
    $525750fa67ec2fa3$var$isInitialized = true;
    $525750fa67ec2fa3$var$my.onSocketOpen(function() {
        $525750fa67ec2fa3$var$stream.setReadable($525750fa67ec2fa3$var$proxy);
        $525750fa67ec2fa3$var$stream.setWritable($525750fa67ec2fa3$var$proxy);
        $525750fa67ec2fa3$var$stream.emit("connect");
    });
    $525750fa67ec2fa3$var$my.onSocketMessage(function(res) {
        if (typeof res.data === "string") {
            var buffer = $525750fa67ec2fa3$require$Buffer.from(res.data, "base64");
            $525750fa67ec2fa3$var$proxy.push(buffer);
        } else {
            var reader = new FileReader();
            reader.addEventListener("load", function() {
                var data = reader.result;
                if (data instanceof ArrayBuffer) data = $525750fa67ec2fa3$require$Buffer.from(data);
                else data = $525750fa67ec2fa3$require$Buffer.from(data, "utf8");
                $525750fa67ec2fa3$var$proxy.push(data);
            });
            reader.readAsArrayBuffer(res.data);
        }
    });
    $525750fa67ec2fa3$var$my.onSocketClose(function() {
        $525750fa67ec2fa3$var$stream.end();
        $525750fa67ec2fa3$var$stream.destroy();
    });
    $525750fa67ec2fa3$var$my.onSocketError(function(res) {
        $525750fa67ec2fa3$var$stream.destroy(res);
    });
}
function $525750fa67ec2fa3$var$buildStream(client, opts) {
    opts.hostname = opts.hostname || opts.host;
    if (!opts.hostname) throw new Error("Could not determine host. Specify host manually.");
    var websocketSubProtocol = opts.protocolId === "MQIsdp" && opts.protocolVersion === 3 ? "mqttv3.1" : "mqtt";
    $525750fa67ec2fa3$var$setDefaultOpts(opts);
    var url = $525750fa67ec2fa3$var$buildUrl(opts, client);
    $525750fa67ec2fa3$var$my = opts.my;
    $525750fa67ec2fa3$var$my.connectSocket({
        url: url,
        protocols: websocketSubProtocol
    });
    $525750fa67ec2fa3$var$proxy = $525750fa67ec2fa3$var$buildProxy();
    $525750fa67ec2fa3$var$stream = $illDe.obj();
    $525750fa67ec2fa3$var$bindEventHandler();
    return $525750fa67ec2fa3$var$stream;
}
module.exports = $525750fa67ec2fa3$var$buildStream;

});

parcelRequire.register("j6FXg", function(module, exports) {

var $lFBFq = parcelRequire("lFBFq");
"use strict";

var $kgUAE = parcelRequire("kgUAE");
var $de8f1f3780154620$require$Buffer = $kgUAE.Buffer;

var $fvzI7 = parcelRequire("fvzI7");

var $de8f1f3780154620$var$debug = (parcelRequire("8woo2"))("mqttjs:ws");

var $illDe = parcelRequire("illDe");

var $2M7q0 = parcelRequire("2M7q0");
var $de8f1f3780154620$require$Transform = $2M7q0.Transform;
var $de8f1f3780154620$var$WSS_OPTIONS = [
    "rejectUnauthorized",
    "ca",
    "cert",
    "key",
    "pfx",
    "passphrase"
];
// eslint-disable-next-line camelcase
var $de8f1f3780154620$var$IS_BROWSER = typeof $lFBFq !== "undefined" && $lFBFq.title === "browser" || typeof __webpack_require__ === "function";
function $de8f1f3780154620$var$buildUrl(opts, client) {
    var url = opts.protocol + "://" + opts.hostname + ":" + opts.port + opts.path;
    if (typeof opts.transformWsUrl === "function") url = opts.transformWsUrl(url, opts, client);
    return url;
}
function $de8f1f3780154620$var$setDefaultOpts(opts) {
    var options = opts;
    if (!opts.hostname) options.hostname = "localhost";
    if (!opts.port) {
        if (opts.protocol === "wss") options.port = 443;
        else options.port = 80;
    }
    if (!opts.path) options.path = "/";
    if (!opts.wsOptions) options.wsOptions = {};
    if (!$de8f1f3780154620$var$IS_BROWSER && opts.protocol === "wss") // Add cert/key/ca etc options
    $de8f1f3780154620$var$WSS_OPTIONS.forEach(function(prop) {
        if (Object.prototype.hasOwnProperty.call(opts, prop) && !Object.prototype.hasOwnProperty.call(opts.wsOptions, prop)) options.wsOptions[prop] = opts[prop];
    });
    return options;
}
function $de8f1f3780154620$var$setDefaultBrowserOpts(opts) {
    var options = $de8f1f3780154620$var$setDefaultOpts(opts);
    if (!options.hostname) options.hostname = options.host;
    if (!options.hostname) {
        // Throwing an error in a Web Worker if no `hostname` is given, because we
        // can not determine the `hostname` automatically.  If connecting to
        // localhost, please supply the `hostname` as an argument.
        if (typeof document === "undefined") throw new Error("Could not determine host. Specify host manually.");
        var parsed = new URL(document.URL);
        options.hostname = parsed.hostname;
        if (!options.port) options.port = parsed.port;
    }
    // objectMode should be defined for logic
    if (options.objectMode === undefined) options.objectMode = !(options.binary === true || options.binary === undefined);
    return options;
}
function $de8f1f3780154620$var$createWebSocket(client, url, opts) {
    $de8f1f3780154620$var$debug("createWebSocket");
    $de8f1f3780154620$var$debug("protocol: " + opts.protocolId + " " + opts.protocolVersion);
    var websocketSubProtocol = opts.protocolId === "MQIsdp" && opts.protocolVersion === 3 ? "mqttv3.1" : "mqtt";
    $de8f1f3780154620$var$debug("creating new Websocket for url: " + url + " and protocol: " + websocketSubProtocol);
    var socket = new $fvzI7(url, [
        websocketSubProtocol
    ], opts.wsOptions);
    return socket;
}
function $de8f1f3780154620$var$createBrowserWebSocket(client, opts) {
    var websocketSubProtocol = opts.protocolId === "MQIsdp" && opts.protocolVersion === 3 ? "mqttv3.1" : "mqtt";
    var url = $de8f1f3780154620$var$buildUrl(opts, client);
    /* global WebSocket */ var socket = new WebSocket(url, [
        websocketSubProtocol
    ]);
    socket.binaryType = "arraybuffer";
    return socket;
}
function $de8f1f3780154620$var$streamBuilder(client, opts) {
    $de8f1f3780154620$var$debug("streamBuilder");
    var options = $de8f1f3780154620$var$setDefaultOpts(opts);
    var url = $de8f1f3780154620$var$buildUrl(options, client);
    var socket = $de8f1f3780154620$var$createWebSocket(client, url, options);
    var webSocketStream = $fvzI7.createWebSocketStream(socket, options.wsOptions);
    webSocketStream.url = url;
    socket.on("close", function() {
        webSocketStream.destroy();
    });
    return webSocketStream;
}
function $de8f1f3780154620$var$browserStreamBuilder(client, opts) {
    var buildProxy = // methods for browserStreamBuilder
    function buildProxy(options, socketWrite, socketEnd) {
        var proxy = new $de8f1f3780154620$require$Transform({
            objectModeMode: options.objectMode
        });
        proxy._write = socketWrite;
        proxy._flush = socketEnd;
        return proxy;
    };
    var onopen = function onopen() {
        stream.setReadable(proxy);
        stream.setWritable(proxy);
        stream.emit("connect");
    };
    var onclose = function onclose() {
        stream.end();
        stream.destroy();
    };
    var onerror = function onerror(err) {
        stream.destroy(err);
    };
    var onmessage = function onmessage(event) {
        var data = event.data;
        if (data instanceof ArrayBuffer) data = $de8f1f3780154620$require$Buffer.from(data);
        else data = $de8f1f3780154620$require$Buffer.from(data, "utf8");
        proxy.push(data);
    };
    var writev = // this is to be enabled only if objectMode is false
    function writev(chunks, cb) {
        var buffers = new Array(chunks.length);
        for(var i = 0; i < chunks.length; i++)if (typeof chunks[i].chunk === "string") buffers[i] = $de8f1f3780154620$require$Buffer.from(chunks[i], "utf8");
        else buffers[i] = chunks[i].chunk;
        this._write($de8f1f3780154620$require$Buffer.concat(buffers), "binary", cb);
    };
    var socketEndBrowser = function socketEndBrowser(done) {
        socket.close();
        done();
    };
    $de8f1f3780154620$var$debug("browserStreamBuilder");
    var stream;
    var options = $de8f1f3780154620$var$setDefaultBrowserOpts(opts);
    // sets the maximum socket buffer size before throttling
    var bufferSize = options.browserBufferSize || 524288;
    var bufferTimeout = opts.browserBufferTimeout || 1000;
    var coerceToBuffer = !opts.objectMode;
    var socket = $de8f1f3780154620$var$createBrowserWebSocket(client, opts);
    var proxy = buildProxy(opts, socketWriteBrowser, socketEndBrowser);
    if (!opts.objectMode) proxy._writev = writev;
    proxy.on("close", function() {
        socket.close();
    });
    var eventListenerSupport = typeof socket.addEventListener !== "undefined";
    // was already open when passed in
    if (socket.readyState === socket.OPEN) stream = proxy;
    else {
        stream = stream = $illDe(undefined, undefined, opts);
        if (!opts.objectMode) stream._writev = writev;
        if (eventListenerSupport) socket.addEventListener("open", onopen);
        else socket.onopen = onopen;
    }
    stream.socket = socket;
    if (eventListenerSupport) {
        socket.addEventListener("close", onclose);
        socket.addEventListener("error", onerror);
        socket.addEventListener("message", onmessage);
    } else {
        socket.onclose = onclose;
        socket.onerror = onerror;
        socket.onmessage = onmessage;
    }
    function socketWriteBrowser(chunk, enc, next) {
        if (socket.bufferedAmount > bufferSize) // throttle data until buffered amount is reduced.
        setTimeout(socketWriteBrowser, bufferTimeout, chunk, enc, next);
        if (coerceToBuffer && typeof chunk === "string") chunk = $de8f1f3780154620$require$Buffer.from(chunk, "utf8");
        try {
            socket.send(chunk);
        } catch (err) {
            return next(err);
        }
        next();
    }
    // end methods for browserStreamBuilder
    return stream;
}
if ($de8f1f3780154620$var$IS_BROWSER) module.exports = $de8f1f3780154620$var$browserStreamBuilder;
else module.exports = $de8f1f3780154620$var$streamBuilder;

});
parcelRequire.register("fvzI7", function(module, exports) {
"use strict";
module.exports = function() {
    throw new Error("ws does not work in the browser. Browser clients must use the native WebSocket object");
};

});


var $7dc43ad2ffa25036$exports = {};

$parcel$export($7dc43ad2ffa25036$exports, "util", function () { return $7dc43ad2ffa25036$export$7debb50ef11d5e0b; }, function (v) { return $7dc43ad2ffa25036$export$7debb50ef11d5e0b = v; });
$parcel$export($7dc43ad2ffa25036$exports, "concatArrayBuffers", function () { return $7dc43ad2ffa25036$export$52c89ebcdc4f53f2; }, function (v) { return $7dc43ad2ffa25036$export$52c89ebcdc4f53f2 = v; });

var $d92bh = parcelRequire("d92bh");

var $883e7 = parcelRequire("883e7");
function $44635a22a5de2b4c$export$2e2bcd8739ae039(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}



var $lT21Y = parcelRequire("lT21Y");
var $ead48d121739fa4c$var$$e8379818650e2442$export$93654d4f2d6cd524 = /*#__PURE__*/ function() {
    "use strict";
    function $e8379818650e2442$export$93654d4f2d6cd524() {
        (0, $d92bh.default)(this, $e8379818650e2442$export$93654d4f2d6cd524);
        (0, $44635a22a5de2b4c$export$2e2bcd8739ae039)(this, "encoder", new TextEncoder());
        this._pieces = [];
        this._parts = [];
    }
    (0, $883e7.default)($e8379818650e2442$export$93654d4f2d6cd524, [
        {
            key: "append_buffer",
            value: function append_buffer(data) {
                this.flush();
                this._parts.push(data);
            }
        },
        {
            key: "append",
            value: function append(data) {
                this._pieces.push(data);
            }
        },
        {
            key: "flush",
            value: function flush() {
                if (this._pieces.length > 0) {
                    var buf = new Uint8Array(this._pieces);
                    this._parts.push(buf);
                    this._pieces = [];
                }
            }
        },
        {
            key: "toArrayBuffer",
            value: function toArrayBuffer() {
                var buffer = [];
                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
                try {
                    for(var _iterator = this._parts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var part = _step.value;
                        buffer.push(part);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                            _iterator["return"]();
                        }
                    } finally{
                        if (_didIteratorError) {
                            throw _iteratorError;
                        }
                    }
                }
                return $ead48d121739fa4c$var$$e8379818650e2442$var$concatArrayBuffers(buffer).buffer;
            }
        }
    ]);
    return $e8379818650e2442$export$93654d4f2d6cd524;
}();
function $ead48d121739fa4c$var$$e8379818650e2442$var$concatArrayBuffers(bufs) {
    var size = 0;
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = bufs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var buf = _step.value;
            size += buf.byteLength;
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    var result = new Uint8Array(size);
    var offset = 0;
    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;
    try {
        for(var _iterator1 = bufs[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){
            var buf1 = _step1.value;
            var view = new Uint8Array(buf1.buffer, buf1.byteOffset, buf1.byteLength);
            result.set(view, offset);
            offset += buf1.byteLength;
        }
    } catch (err) {
        _didIteratorError1 = true;
        _iteratorError1 = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion1 && _iterator1["return"] != null) {
                _iterator1["return"]();
            }
        } finally{
            if (_didIteratorError1) {
                throw _iteratorError1;
            }
        }
    }
    return result;
}
function $ead48d121739fa4c$export$417857010dc9287f(data) {
    var unpacker = new $ead48d121739fa4c$var$$0cfd7828ad59115f$var$Unpacker(data);
    return unpacker.unpack();
}
function $ead48d121739fa4c$export$2a703dbb0cb35339(data) {
    var packer = new $ead48d121739fa4c$export$b9ec4b114aa40074();
    packer.pack(data);
    return packer.getBuffer();
}
var $ead48d121739fa4c$var$$0cfd7828ad59115f$var$Unpacker = /*#__PURE__*/ function() {
    "use strict";
    function $0cfd7828ad59115f$var$Unpacker(data) {
        (0, $d92bh.default)(this, $0cfd7828ad59115f$var$Unpacker);
        this.index = 0;
        this.dataBuffer = data;
        this.dataView = new Uint8Array(this.dataBuffer);
        this.length = this.dataBuffer.byteLength;
    }
    (0, $883e7.default)($0cfd7828ad59115f$var$Unpacker, [
        {
            key: "unpack",
            value: function unpack() {
                var type = this.unpack_uint8();
                if (type < 0x80) return type;
                else if ((type ^ 0xe0) < 0x20) return (type ^ 0xe0) - 0x20;
                var size;
                if ((size = type ^ 0xa0) <= 0x0f) return this.unpack_raw(size);
                else if ((size = type ^ 0xb0) <= 0x0f) return this.unpack_string(size);
                else if ((size = type ^ 0x90) <= 0x0f) return this.unpack_array(size);
                else if ((size = type ^ 0x80) <= 0x0f) return this.unpack_map(size);
                switch(type){
                    case 0xc0:
                        return null;
                    case 0xc1:
                        return undefined;
                    case 0xc2:
                        return false;
                    case 0xc3:
                        return true;
                    case 0xca:
                        return this.unpack_float();
                    case 0xcb:
                        return this.unpack_double();
                    case 0xcc:
                        return this.unpack_uint8();
                    case 0xcd:
                        return this.unpack_uint16();
                    case 0xce:
                        return this.unpack_uint32();
                    case 0xcf:
                        return this.unpack_uint64();
                    case 0xd0:
                        return this.unpack_int8();
                    case 0xd1:
                        return this.unpack_int16();
                    case 0xd2:
                        return this.unpack_int32();
                    case 0xd3:
                        return this.unpack_int64();
                    case 0xd4:
                        return undefined;
                    case 0xd5:
                        return undefined;
                    case 0xd6:
                        return undefined;
                    case 0xd7:
                        return undefined;
                    case 0xd8:
                        size = this.unpack_uint16();
                        return this.unpack_string(size);
                    case 0xd9:
                        size = this.unpack_uint32();
                        return this.unpack_string(size);
                    case 0xda:
                        size = this.unpack_uint16();
                        return this.unpack_raw(size);
                    case 0xdb:
                        size = this.unpack_uint32();
                        return this.unpack_raw(size);
                    case 0xdc:
                        size = this.unpack_uint16();
                        return this.unpack_array(size);
                    case 0xdd:
                        size = this.unpack_uint32();
                        return this.unpack_array(size);
                    case 0xde:
                        size = this.unpack_uint16();
                        return this.unpack_map(size);
                    case 0xdf:
                        size = this.unpack_uint32();
                        return this.unpack_map(size);
                }
            }
        },
        {
            key: "unpack_uint8",
            value: function unpack_uint8() {
                var _byte = this.dataView[this.index] & 0xff;
                this.index++;
                return _byte;
            }
        },
        {
            key: "unpack_uint16",
            value: function unpack_uint16() {
                var bytes = this.read(2);
                var uint16 = (bytes[0] & 0xff) * 256 + (bytes[1] & 0xff);
                this.index += 2;
                return uint16;
            }
        },
        {
            key: "unpack_uint32",
            value: function unpack_uint32() {
                var bytes = this.read(4);
                var uint32 = ((bytes[0] * 256 + bytes[1]) * 256 + bytes[2]) * 256 + bytes[3];
                this.index += 4;
                return uint32;
            }
        },
        {
            key: "unpack_uint64",
            value: function unpack_uint64() {
                var bytes = this.read(8);
                var uint64 = ((((((bytes[0] * 256 + bytes[1]) * 256 + bytes[2]) * 256 + bytes[3]) * 256 + bytes[4]) * 256 + bytes[5]) * 256 + bytes[6]) * 256 + bytes[7];
                this.index += 8;
                return uint64;
            }
        },
        {
            key: "unpack_int8",
            value: function unpack_int8() {
                var uint8 = this.unpack_uint8();
                return uint8 < 0x80 ? uint8 : uint8 - 256;
            }
        },
        {
            key: "unpack_int16",
            value: function unpack_int16() {
                var uint16 = this.unpack_uint16();
                return uint16 < 0x8000 ? uint16 : uint16 - 65536;
            }
        },
        {
            key: "unpack_int32",
            value: function unpack_int32() {
                var uint32 = this.unpack_uint32();
                return uint32 < Math.pow(2, 31) ? uint32 : uint32 - Math.pow(2, 32);
            }
        },
        {
            key: "unpack_int64",
            value: function unpack_int64() {
                var uint64 = this.unpack_uint64();
                return uint64 < Math.pow(2, 63) ? uint64 : uint64 - Math.pow(2, 64);
            }
        },
        {
            key: "unpack_raw",
            value: function unpack_raw(size) {
                if (this.length < this.index + size) throw new Error("BinaryPackFailure: index is out of range ".concat(this.index, " ").concat(size, " ").concat(this.length));
                var buf = this.dataBuffer.slice(this.index, this.index + size);
                this.index += size;
                return buf;
            }
        },
        {
            key: "unpack_string",
            value: function unpack_string(size) {
                var bytes = this.read(size);
                var i = 0;
                var str = "";
                var c;
                var code;
                while(i < size){
                    c = bytes[i];
                    // The length of a UTF-8 sequence is specified in the first byte:
                    // 0xxxxxxx means length 1,
                    // 110xxxxx means length 2,
                    // 1110xxxx means length 3,
                    // 11110xxx means length 4.
                    // 10xxxxxx is for non-initial bytes.
                    if (c < 0xa0) {
                        // One-byte sequence: bits 0xxxxxxx
                        code = c;
                        i++;
                    } else if ((c ^ 0xc0) < 0x20) {
                        // Two-byte sequence: bits 110xxxxx 10xxxxxx
                        code = (c & 0x1f) << 6 | bytes[i + 1] & 0x3f;
                        i += 2;
                    } else if ((c ^ 0xe0) < 0x10) {
                        // Three-byte sequence: bits 1110xxxx 10xxxxxx 10xxxxxx
                        code = (c & 0x0f) << 12 | (bytes[i + 1] & 0x3f) << 6 | bytes[i + 2] & 0x3f;
                        i += 3;
                    } else {
                        // Four-byte sequence: bits 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
                        code = (c & 0x07) << 18 | (bytes[i + 1] & 0x3f) << 12 | (bytes[i + 2] & 0x3f) << 6 | bytes[i + 3] & 0x3f;
                        i += 4;
                    }
                    str += String.fromCodePoint(code);
                }
                this.index += size;
                return str;
            }
        },
        {
            key: "unpack_array",
            value: function unpack_array(size) {
                var objects = new Array(size);
                for(var i = 0; i < size; i++)objects[i] = this.unpack();
                return objects;
            }
        },
        {
            key: "unpack_map",
            value: function unpack_map(size) {
                var map = {};
                for(var i = 0; i < size; i++){
                    var key = this.unpack();
                    map[key] = this.unpack();
                }
                return map;
            }
        },
        {
            key: "unpack_float",
            value: function unpack_float() {
                var uint32 = this.unpack_uint32();
                var sign = uint32 >> 31;
                var exp = (uint32 >> 23 & 0xff) - 127;
                var fraction = uint32 & 0x7fffff | 0x800000;
                return (sign === 0 ? 1 : -1) * fraction * Math.pow(2, exp - 23);
            }
        },
        {
            key: "unpack_double",
            value: function unpack_double() {
                var h32 = this.unpack_uint32();
                var l32 = this.unpack_uint32();
                var sign = h32 >> 31;
                var exp = (h32 >> 20 & 0x7ff) - 1023;
                var hfrac = h32 & 0xfffff | 0x100000;
                var frac = hfrac * Math.pow(2, exp - 20) + l32 * Math.pow(2, exp - 52);
                return (sign === 0 ? 1 : -1) * frac;
            }
        },
        {
            key: "read",
            value: function read(length) {
                var j = this.index;
                if (j + length <= this.length) return this.dataView.subarray(j, j + length);
                else throw new Error("BinaryPackFailure: read index out of range");
            }
        }
    ]);
    return $0cfd7828ad59115f$var$Unpacker;
}();
var $ead48d121739fa4c$export$b9ec4b114aa40074 = /*#__PURE__*/ function() {
    "use strict";
    function $0cfd7828ad59115f$export$b9ec4b114aa40074() {
        (0, $d92bh.default)(this, $0cfd7828ad59115f$export$b9ec4b114aa40074);
        (0, $44635a22a5de2b4c$export$2e2bcd8739ae039)(this, "_bufferBuilder", new $ead48d121739fa4c$var$$e8379818650e2442$export$93654d4f2d6cd524());
        (0, $44635a22a5de2b4c$export$2e2bcd8739ae039)(this, "_textEncoder", new TextEncoder());
    }
    (0, $883e7.default)($0cfd7828ad59115f$export$b9ec4b114aa40074, [
        {
            key: "getBuffer",
            value: function getBuffer() {
                return this._bufferBuilder.toArrayBuffer();
            }
        },
        {
            key: "pack",
            value: function pack(value) {
                if (typeof value === "string") this.pack_string(value);
                else if (typeof value === "number") {
                    if (Math.floor(value) === value) this.pack_integer(value);
                    else this.pack_double(value);
                } else if (typeof value === "boolean") {
                    if (value === true) this._bufferBuilder.append(0xc3);
                    else if (value === false) this._bufferBuilder.append(0xc2);
                } else if (value === undefined) this._bufferBuilder.append(0xc0);
                else if (typeof value === "object") {
                    if (value === null) this._bufferBuilder.append(0xc0);
                    else {
                        var constructor = value.constructor;
                        if (value instanceof Array) this.pack_array(value);
                        else if (value instanceof ArrayBuffer) this.pack_bin(new Uint8Array(value));
                        else if ("BYTES_PER_ELEMENT" in value) {
                            var v = value;
                            this.pack_bin(new Uint8Array(v.buffer, v.byteOffset, v.byteLength));
                        } else if (value instanceof Date) this.pack_string(value.toString());
                        else if (constructor == Object || constructor.toString().startsWith("class")) this.pack_object(value);
                        else throw new Error('Type "'.concat(constructor.toString(), '" not yet supported'));
                    }
                } else throw new Error('Type "'.concat(typeof value === "undefined" ? "undefined" : (0, $lT21Y.default)(value), '" not yet supported'));
                this._bufferBuilder.flush();
            }
        },
        {
            key: "pack_bin",
            value: function pack_bin(blob) {
                var length = blob.length;
                if (length <= 0x0f) this.pack_uint8(0xa0 + length);
                else if (length <= 0xffff) {
                    this._bufferBuilder.append(0xda);
                    this.pack_uint16(length);
                } else if (length <= 0xffffffff) {
                    this._bufferBuilder.append(0xdb);
                    this.pack_uint32(length);
                } else throw new Error("Invalid length");
                this._bufferBuilder.append_buffer(blob);
            }
        },
        {
            key: "pack_string",
            value: function pack_string(str) {
                var encoded = this._textEncoder.encode(str);
                var length = encoded.length;
                if (length <= 0x0f) this.pack_uint8(0xb0 + length);
                else if (length <= 0xffff) {
                    this._bufferBuilder.append(0xd8);
                    this.pack_uint16(length);
                } else if (length <= 0xffffffff) {
                    this._bufferBuilder.append(0xd9);
                    this.pack_uint32(length);
                } else throw new Error("Invalid length");
                this._bufferBuilder.append_buffer(encoded);
            }
        },
        {
            key: "pack_array",
            value: function pack_array(ary) {
                var length = ary.length;
                if (length <= 0x0f) this.pack_uint8(0x90 + length);
                else if (length <= 0xffff) {
                    this._bufferBuilder.append(0xdc);
                    this.pack_uint16(length);
                } else if (length <= 0xffffffff) {
                    this._bufferBuilder.append(0xdd);
                    this.pack_uint32(length);
                } else throw new Error("Invalid length");
                for(var i = 0; i < length; i++)this.pack(ary[i]);
            }
        },
        {
            key: "pack_integer",
            value: function pack_integer(num) {
                if (num >= -32 && num <= 0x7f) this._bufferBuilder.append(num & 0xff);
                else if (num >= 0x00 && num <= 0xff) {
                    this._bufferBuilder.append(0xcc);
                    this.pack_uint8(num);
                } else if (num >= -128 && num <= 0x7f) {
                    this._bufferBuilder.append(0xd0);
                    this.pack_int8(num);
                } else if (num >= 0x0000 && num <= 0xffff) {
                    this._bufferBuilder.append(0xcd);
                    this.pack_uint16(num);
                } else if (num >= -32768 && num <= 0x7fff) {
                    this._bufferBuilder.append(0xd1);
                    this.pack_int16(num);
                } else if (num >= 0x00000000 && num <= 0xffffffff) {
                    this._bufferBuilder.append(0xce);
                    this.pack_uint32(num);
                } else if (num >= -2147483648 && num <= 0x7fffffff) {
                    this._bufferBuilder.append(0xd2);
                    this.pack_int32(num);
                } else if (num >= -9223372036854776000 && num <= 0x7fffffffffffffff) {
                    this._bufferBuilder.append(0xd3);
                    this.pack_int64(num);
                } else if (num >= 0x0000000000000000 && num <= 0xffffffffffffffff) {
                    this._bufferBuilder.append(0xcf);
                    this.pack_uint64(num);
                } else throw new Error("Invalid integer");
            }
        },
        {
            key: "pack_double",
            value: function pack_double(num) {
                var sign = 0;
                if (num < 0) {
                    sign = 1;
                    num = -num;
                }
                var exp = Math.floor(Math.log(num) / Math.LN2);
                var frac0 = num / Math.pow(2, exp) - 1;
                var frac1 = Math.floor(frac0 * Math.pow(2, 52));
                var b32 = Math.pow(2, 32);
                var h32 = sign << 31 | exp + 1023 << 20 | frac1 / b32 & 0x0fffff;
                var l32 = frac1 % b32;
                this._bufferBuilder.append(0xcb);
                this.pack_int32(h32);
                this.pack_int32(l32);
            }
        },
        {
            key: "pack_object",
            value: function pack_object(obj) {
                var keys = Object.keys(obj);
                var length = keys.length;
                if (length <= 0x0f) this.pack_uint8(0x80 + length);
                else if (length <= 0xffff) {
                    this._bufferBuilder.append(0xde);
                    this.pack_uint16(length);
                } else if (length <= 0xffffffff) {
                    this._bufferBuilder.append(0xdf);
                    this.pack_uint32(length);
                } else throw new Error("Invalid length");
                for(var prop in obj)if (obj.hasOwnProperty(prop)) {
                    this.pack(prop);
                    this.pack(obj[prop]);
                }
            }
        },
        {
            key: "pack_uint8",
            value: function pack_uint8(num) {
                this._bufferBuilder.append(num);
            }
        },
        {
            key: "pack_uint16",
            value: function pack_uint16(num) {
                this._bufferBuilder.append(num >> 8);
                this._bufferBuilder.append(num & 0xff);
            }
        },
        {
            key: "pack_uint32",
            value: function pack_uint32(num) {
                var n = num & 0xffffffff;
                this._bufferBuilder.append((n & 0xff000000) >>> 24);
                this._bufferBuilder.append((n & 0x00ff0000) >>> 16);
                this._bufferBuilder.append((n & 0x0000ff00) >>> 8);
                this._bufferBuilder.append(n & 0x000000ff);
            }
        },
        {
            key: "pack_uint64",
            value: function pack_uint64(num) {
                var high = num / Math.pow(2, 32);
                var low = num % Math.pow(2, 32);
                this._bufferBuilder.append((high & 0xff000000) >>> 24);
                this._bufferBuilder.append((high & 0x00ff0000) >>> 16);
                this._bufferBuilder.append((high & 0x0000ff00) >>> 8);
                this._bufferBuilder.append(high & 0x000000ff);
                this._bufferBuilder.append((low & 0xff000000) >>> 24);
                this._bufferBuilder.append((low & 0x00ff0000) >>> 16);
                this._bufferBuilder.append((low & 0x0000ff00) >>> 8);
                this._bufferBuilder.append(low & 0x000000ff);
            }
        },
        {
            key: "pack_int8",
            value: function pack_int8(num) {
                this._bufferBuilder.append(num & 0xff);
            }
        },
        {
            key: "pack_int16",
            value: function pack_int16(num) {
                this._bufferBuilder.append((num & 0xff00) >> 8);
                this._bufferBuilder.append(num & 0xff);
            }
        },
        {
            key: "pack_int32",
            value: function pack_int32(num) {
                this._bufferBuilder.append(num >>> 24 & 0xff);
                this._bufferBuilder.append((num & 0x00ff0000) >>> 16);
                this._bufferBuilder.append((num & 0x0000ff00) >>> 8);
                this._bufferBuilder.append(num & 0x000000ff);
            }
        },
        {
            key: "pack_int64",
            value: function pack_int64(num) {
                var high = Math.floor(num / Math.pow(2, 32));
                var low = num % Math.pow(2, 32);
                this._bufferBuilder.append((high & 0xff000000) >>> 24);
                this._bufferBuilder.append((high & 0x00ff0000) >>> 16);
                this._bufferBuilder.append((high & 0x0000ff00) >>> 8);
                this._bufferBuilder.append(high & 0x000000ff);
                this._bufferBuilder.append((low & 0xff000000) >>> 24);
                this._bufferBuilder.append((low & 0x00ff0000) >>> 16);
                this._bufferBuilder.append((low & 0x0000ff00) >>> 8);
                this._bufferBuilder.append(low & 0x000000ff);
            }
        }
    ]);
    return $0cfd7828ad59115f$export$b9ec4b114aa40074;
}();


/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */ /* eslint-env node */ /*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */ /*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */ /* eslint-env node */ 

var $lT21Y = parcelRequire("lT21Y");
"use strict";
var $993722e8c7a9e5a7$var$logDisabled_ = true;
var $993722e8c7a9e5a7$var$deprecationWarnings_ = true;
function $993722e8c7a9e5a7$export$e3c02be309be1f23(uastring, expr, pos) {
    var match = uastring.match(expr);
    return match && match.length >= pos && parseInt(match[pos], 10);
}
function $993722e8c7a9e5a7$export$1f48841962b828b1(window1, eventNameToWrap, wrapper) {
    if (!window1.RTCPeerConnection) return;
    var proto = window1.RTCPeerConnection.prototype;
    var nativeAddEventListener = proto.addEventListener;
    proto.addEventListener = function(nativeEventName, cb) {
        if (nativeEventName !== eventNameToWrap) return nativeAddEventListener.apply(this, arguments);
        var wrappedCallback = function(e) {
            var modifiedEvent = wrapper(e);
            if (modifiedEvent) {
                if (cb.handleEvent) cb.handleEvent(modifiedEvent);
                else cb(modifiedEvent);
            }
        };
        this._eventMap = this._eventMap || {};
        if (!this._eventMap[eventNameToWrap]) this._eventMap[eventNameToWrap] = new Map();
        this._eventMap[eventNameToWrap].set(cb, wrappedCallback);
        return nativeAddEventListener.apply(this, [
            nativeEventName,
            wrappedCallback
        ]);
    };
    var nativeRemoveEventListener = proto.removeEventListener;
    proto.removeEventListener = function(nativeEventName, cb) {
        if (nativeEventName !== eventNameToWrap || !this._eventMap || !this._eventMap[eventNameToWrap]) return nativeRemoveEventListener.apply(this, arguments);
        if (!this._eventMap[eventNameToWrap].has(cb)) return nativeRemoveEventListener.apply(this, arguments);
        var unwrappedCb = this._eventMap[eventNameToWrap].get(cb);
        this._eventMap[eventNameToWrap]["delete"](cb);
        if (this._eventMap[eventNameToWrap].size === 0) delete this._eventMap[eventNameToWrap];
        if (Object.keys(this._eventMap).length === 0) delete this._eventMap;
        return nativeRemoveEventListener.apply(this, [
            nativeEventName,
            unwrappedCb
        ]);
    };
    Object.defineProperty(proto, "on" + eventNameToWrap, {
        get: function() {
            return this["_on" + eventNameToWrap];
        },
        set: function(cb) {
            if (this["_on" + eventNameToWrap]) {
                this.removeEventListener(eventNameToWrap, this["_on" + eventNameToWrap]);
                delete this["_on" + eventNameToWrap];
            }
            if (cb) this.addEventListener(eventNameToWrap, this["_on" + eventNameToWrap] = cb);
        },
        enumerable: true,
        configurable: true
    });
}
function $993722e8c7a9e5a7$export$afbfee8cc06fd3e4(bool) {
    if (typeof bool !== "boolean") return new Error("Argument type: " + (typeof bool === "undefined" ? "undefined" : (0, $lT21Y.default)(bool)) + ". Please use a boolean.");
    $993722e8c7a9e5a7$var$logDisabled_ = bool;
    return bool ? "adapter.js logging disabled" : "adapter.js logging enabled";
}
function $993722e8c7a9e5a7$export$51516be4b019e41e(bool) {
    if (typeof bool !== "boolean") return new Error("Argument type: " + (typeof bool === "undefined" ? "undefined" : (0, $lT21Y.default)(bool)) + ". Please use a boolean.");
    $993722e8c7a9e5a7$var$deprecationWarnings_ = !bool;
    return "adapter.js deprecation warnings " + (bool ? "disabled" : "enabled");
}
function $993722e8c7a9e5a7$export$bef1f36f5486a6a3() {
    if (typeof window === "object") {
        if ($993722e8c7a9e5a7$var$logDisabled_) return;
        if (typeof console !== "undefined" && typeof console.log === "function") console.log.apply(console, arguments);
    }
}
function $993722e8c7a9e5a7$export$cdd73fc4100a6ef4(oldMethod, newMethod) {
    if (!$993722e8c7a9e5a7$var$deprecationWarnings_) return;
    console.warn(oldMethod + " is deprecated, please use " + newMethod + " instead.");
}
function $993722e8c7a9e5a7$export$2d31490a0c05f094(window1) {
    // Returned result object.
    var result = {
        browser: null,
        version: null
    };
    // Fail early if it's not a browser
    if (typeof window1 === "undefined" || !window1.navigator) {
        result.browser = "Not a browser.";
        return result;
    }
    var navigator = window1.navigator;
    if (navigator.mozGetUserMedia) {
        result.browser = "firefox";
        result.version = $993722e8c7a9e5a7$export$e3c02be309be1f23(navigator.userAgent, /Firefox\/(\d+)\./, 1);
    } else if (navigator.webkitGetUserMedia || window1.isSecureContext === false && window1.webkitRTCPeerConnection) {
        // Chrome, Chromium, Webview, Opera.
        // Version matches Chrome/WebRTC version.
        // Chrome 74 removed webkitGetUserMedia on http as well so we need the
        // more complicated fallback to webkitRTCPeerConnection.
        result.browser = "chrome";
        result.version = $993722e8c7a9e5a7$export$e3c02be309be1f23(navigator.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
    } else if (window1.RTCPeerConnection && navigator.userAgent.match(/AppleWebKit\/(\d+)\./)) {
        result.browser = "safari";
        result.version = $993722e8c7a9e5a7$export$e3c02be309be1f23(navigator.userAgent, /AppleWebKit\/(\d+)\./, 1);
        result.supportsUnifiedPlan = window1.RTCRtpTransceiver && "currentDirection" in window1.RTCRtpTransceiver.prototype;
    } else {
        result.browser = "Not a supported browser.";
        return result;
    }
    return result;
}
/**
 * Checks if something is an object.
 *
 * @param {*} val The something you want to check.
 * @return true if val is an object, false otherwise.
 */ function $993722e8c7a9e5a7$var$isObject(val) {
    return Object.prototype.toString.call(val) === "[object Object]";
}
function $993722e8c7a9e5a7$export$15384eac40dc88c8(data) {
    if (!$993722e8c7a9e5a7$var$isObject(data)) return data;
    return Object.keys(data).reduce(function(accumulator, key) {
        var isObj = $993722e8c7a9e5a7$var$isObject(data[key]);
        var value = isObj ? $993722e8c7a9e5a7$export$15384eac40dc88c8(data[key]) : data[key];
        var isEmptyObject = isObj && !Object.keys(value).length;
        if (value === undefined || isEmptyObject) return accumulator;
        return Object.assign(accumulator, (0, $44635a22a5de2b4c$export$2e2bcd8739ae039)({}, key, value));
    }, {});
}
function $993722e8c7a9e5a7$export$571b373e75babb58(stats, base, resultSet) {
    if (!base || resultSet.has(base.id)) return;
    resultSet.set(base.id, base);
    Object.keys(base).forEach(function(name) {
        if (name.endsWith("Id")) $993722e8c7a9e5a7$export$571b373e75babb58(stats, stats.get(base[name]), resultSet);
        else if (name.endsWith("Ids")) base[name].forEach(function(id) {
            $993722e8c7a9e5a7$export$571b373e75babb58(stats, stats.get(id), resultSet);
        });
    });
}
function $993722e8c7a9e5a7$export$93439ffc3f787d51(result, track, outbound) {
    var streamStatsType = outbound ? "outbound-rtp" : "inbound-rtp";
    var filteredResult = new Map();
    if (track === null) return filteredResult;
    var trackStats = [];
    result.forEach(function(value) {
        if (value.type === "track" && value.trackIdentifier === track.id) trackStats.push(value);
    });
    trackStats.forEach(function(trackStat) {
        result.forEach(function(stats) {
            if (stats.type === streamStatsType && stats.trackId === trackStat.id) $993722e8c7a9e5a7$export$571b373e75babb58(result, stats, filteredResult);
        });
    });
    return filteredResult;
}


var $ef7fa8125ed93bad$exports = {};

$parcel$export($ef7fa8125ed93bad$exports, "shimMediaStream", function () { return $ef7fa8125ed93bad$export$33ee24e7a300bcd1; });
$parcel$export($ef7fa8125ed93bad$exports, "shimOnTrack", function () { return $ef7fa8125ed93bad$export$f358708f68ab068; });
$parcel$export($ef7fa8125ed93bad$exports, "shimGetSendersWithDtmf", function () { return $ef7fa8125ed93bad$export$a41a030a2842f5d6; });
$parcel$export($ef7fa8125ed93bad$exports, "shimGetStats", function () { return $ef7fa8125ed93bad$export$90608323826f0b17; });
$parcel$export($ef7fa8125ed93bad$exports, "shimSenderReceiverGetStats", function () { return $ef7fa8125ed93bad$export$f2f0f2338114eb4b; });
$parcel$export($ef7fa8125ed93bad$exports, "shimAddTrackRemoveTrackWithNative", function () { return $ef7fa8125ed93bad$export$30e3cdd46f8d5100; });
$parcel$export($ef7fa8125ed93bad$exports, "shimAddTrackRemoveTrack", function () { return $ef7fa8125ed93bad$export$9588259fcf4ebc91; });
$parcel$export($ef7fa8125ed93bad$exports, "shimPeerConnection", function () { return $ef7fa8125ed93bad$export$852a08dda9a55ea7; });
$parcel$export($ef7fa8125ed93bad$exports, "fixNegotiationNeeded", function () { return $ef7fa8125ed93bad$export$341293bbeaae37cb; });
$parcel$export($ef7fa8125ed93bad$exports, "shimGetUserMedia", function () { return $20aedc9b1b297154$export$1ed4910f4d37dc5e; });
$parcel$export($ef7fa8125ed93bad$exports, "shimGetDisplayMedia", function () { return $010acafe3c691bc6$export$97270b87351d9c04; });
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */ /* eslint-env node */ 
function $df58919c2014a615$export$2e2bcd8739ae039(arr) {
    if (Array.isArray(arr)) return arr;
}



var $lNiV5 = parcelRequire("lNiV5");
function $41e2efd74a2a9a85$export$2e2bcd8739ae039() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}



var $4XqZQ = parcelRequire("4XqZQ");
function $c235cd4828fc39e0$export$2e2bcd8739ae039(arr, i) {
    return (0, $df58919c2014a615$export$2e2bcd8739ae039)(arr) || (0, $lNiV5.default)(arr, i) || (0, $4XqZQ.default)(arr, i) || (0, $41e2efd74a2a9a85$export$2e2bcd8739ae039)();
}



/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */ /* eslint-env node */ 
"use strict";
var $20aedc9b1b297154$var$logging = $993722e8c7a9e5a7$export$bef1f36f5486a6a3;
function $20aedc9b1b297154$export$1ed4910f4d37dc5e(window, browserDetails) {
    var navigator = window && window.navigator;
    if (!navigator.mediaDevices) return;
    var constraintsToChrome_ = function constraintsToChrome_(c) {
        if (typeof c !== "object" || c.mandatory || c.optional) return c;
        var cc = {};
        Object.keys(c).forEach(function(key) {
            if (key === "require" || key === "advanced" || key === "mediaSource") return;
            var r = typeof c[key] === "object" ? c[key] : {
                ideal: c[key]
            };
            if (r.exact !== undefined && typeof r.exact === "number") r.min = r.max = r.exact;
            var oldname_ = function oldname_(prefix, name) {
                if (prefix) return prefix + name.charAt(0).toUpperCase() + name.slice(1);
                return name === "deviceId" ? "sourceId" : name;
            };
            if (r.ideal !== undefined) {
                cc.optional = cc.optional || [];
                var oc = {};
                if (typeof r.ideal === "number") {
                    oc[oldname_("min", key)] = r.ideal;
                    cc.optional.push(oc);
                    oc = {};
                    oc[oldname_("max", key)] = r.ideal;
                    cc.optional.push(oc);
                } else {
                    oc[oldname_("", key)] = r.ideal;
                    cc.optional.push(oc);
                }
            }
            if (r.exact !== undefined && typeof r.exact !== "number") {
                cc.mandatory = cc.mandatory || {};
                cc.mandatory[oldname_("", key)] = r.exact;
            } else [
                "min",
                "max"
            ].forEach(function(mix) {
                if (r[mix] !== undefined) {
                    cc.mandatory = cc.mandatory || {};
                    cc.mandatory[oldname_(mix, key)] = r[mix];
                }
            });
        });
        if (c.advanced) cc.optional = (cc.optional || []).concat(c.advanced);
        return cc;
    };
    var shimConstraints_ = function shimConstraints_(constraints, func) {
        if (browserDetails.version >= 61) return func(constraints);
        constraints = JSON.parse(JSON.stringify(constraints));
        if (constraints && typeof constraints.audio === "object") {
            var remap = function remap(obj, a, b) {
                if (a in obj && !(b in obj)) {
                    obj[b] = obj[a];
                    delete obj[a];
                }
            };
            constraints = JSON.parse(JSON.stringify(constraints));
            remap(constraints.audio, "autoGainControl", "googAutoGainControl");
            remap(constraints.audio, "noiseSuppression", "googNoiseSuppression");
            constraints.audio = constraintsToChrome_(constraints.audio);
        }
        if (constraints && typeof constraints.video === "object") {
            // Shim facingMode for mobile & surface pro.
            var face = constraints.video.facingMode;
            face = face && (typeof face === "object" ? face : {
                ideal: face
            });
            var getSupportedFacingModeLies = browserDetails.version < 66;
            if (face && (face.exact === "user" || face.exact === "environment" || face.ideal === "user" || face.ideal === "environment") && !(navigator.mediaDevices.getSupportedConstraints && navigator.mediaDevices.getSupportedConstraints().facingMode && !getSupportedFacingModeLies)) {
                delete constraints.video.facingMode;
                var matches;
                if (face.exact === "environment" || face.ideal === "environment") matches = [
                    "back",
                    "rear"
                ];
                else if (face.exact === "user" || face.ideal === "user") matches = [
                    "front"
                ];
                if (matches) // Look for matches in label, or use last cam for back (typical).
                return navigator.mediaDevices.enumerateDevices().then(function(devices) {
                    devices = devices.filter(function(d) {
                        return d.kind === "videoinput";
                    });
                    var dev = devices.find(function(d) {
                        return matches.some(function(match) {
                            return d.label.toLowerCase().includes(match);
                        });
                    });
                    if (!dev && devices.length && matches.includes("back")) dev = devices[devices.length - 1]; // more likely the back cam
                    if (dev) constraints.video.deviceId = face.exact ? {
                        exact: dev.deviceId
                    } : {
                        ideal: dev.deviceId
                    };
                    constraints.video = constraintsToChrome_(constraints.video);
                    $20aedc9b1b297154$var$logging("chrome: " + JSON.stringify(constraints));
                    return func(constraints);
                });
            }
            constraints.video = constraintsToChrome_(constraints.video);
        }
        $20aedc9b1b297154$var$logging("chrome: " + JSON.stringify(constraints));
        return func(constraints);
    };
    var shimError_ = function shimError_(e) {
        if (browserDetails.version >= 64) return e;
        return {
            name: ({
                PermissionDeniedError: "NotAllowedError",
                PermissionDismissedError: "NotAllowedError",
                InvalidStateError: "NotAllowedError",
                DevicesNotFoundError: "NotFoundError",
                ConstraintNotSatisfiedError: "OverconstrainedError",
                TrackStartError: "NotReadableError",
                MediaDeviceFailedDueToShutdown: "NotAllowedError",
                MediaDeviceKillSwitchOn: "NotAllowedError",
                TabCaptureError: "AbortError",
                ScreenCaptureError: "AbortError",
                DeviceCaptureError: "AbortError"
            })[e.name] || e.name,
            message: e.message,
            constraint: e.constraint || e.constraintName,
            toString: function() {
                return this.name + (this.message && ": ") + this.message;
            }
        };
    };
    var getUserMedia_ = function getUserMedia_(constraints, onSuccess, onError) {
        shimConstraints_(constraints, function(c) {
            navigator.webkitGetUserMedia(c, onSuccess, function(e) {
                if (onError) onError(shimError_(e));
            });
        });
    };
    navigator.getUserMedia = getUserMedia_.bind(navigator);
    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia
    // function which returns a Promise, it does not accept spec-style
    // constraints.
    if (navigator.mediaDevices.getUserMedia) {
        var origGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
        navigator.mediaDevices.getUserMedia = function(cs) {
            return shimConstraints_(cs, function(c) {
                return origGetUserMedia(c).then(function(stream) {
                    if (c.audio && !stream.getAudioTracks().length || c.video && !stream.getVideoTracks().length) {
                        stream.getTracks().forEach(function(track) {
                            track.stop();
                        });
                        throw new DOMException("", "NotFoundError");
                    }
                    return stream;
                }, function(e) {
                    return Promise.reject(shimError_(e));
                });
            });
        };
    }
}


/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */ /* eslint-env node */ "use strict";
function $010acafe3c691bc6$export$97270b87351d9c04(window, getSourceId) {
    if (window.navigator.mediaDevices && "getDisplayMedia" in window.navigator.mediaDevices) return;
    if (!window.navigator.mediaDevices) return;
    // getSourceId is a function that returns a promise resolving with
    // the sourceId of the screen/window/tab to be shared.
    if (typeof getSourceId !== "function") {
        console.error("shimGetDisplayMedia: getSourceId argument is not a function");
        return;
    }
    window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
        return getSourceId(constraints).then(function(sourceId) {
            var widthSpecified = constraints.video && constraints.video.width;
            var heightSpecified = constraints.video && constraints.video.height;
            var frameRateSpecified = constraints.video && constraints.video.frameRate;
            constraints.video = {
                mandatory: {
                    chromeMediaSource: "desktop",
                    chromeMediaSourceId: sourceId,
                    maxFrameRate: frameRateSpecified || 3
                }
            };
            if (widthSpecified) constraints.video.mandatory.maxWidth = widthSpecified;
            if (heightSpecified) constraints.video.mandatory.maxHeight = heightSpecified;
            return window.navigator.mediaDevices.getUserMedia(constraints);
        });
    };
}


"use strict";
function $ef7fa8125ed93bad$export$33ee24e7a300bcd1(window) {
    window.MediaStream = window.MediaStream || window.webkitMediaStream;
}
function $ef7fa8125ed93bad$export$f358708f68ab068(window) {
    if (typeof window === "object" && window.RTCPeerConnection && !("ontrack" in window.RTCPeerConnection.prototype)) {
        Object.defineProperty(window.RTCPeerConnection.prototype, "ontrack", {
            get: function() {
                return this._ontrack;
            },
            set: function(f) {
                if (this._ontrack) this.removeEventListener("track", this._ontrack);
                this.addEventListener("track", this._ontrack = f);
            },
            enumerable: true,
            configurable: true
        });
        var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
        window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
            var _this = this;
            if (!this._ontrackpoly) {
                this._ontrackpoly = function(e) {
                    // onaddstream does not fire when a track is added to an existing
                    // stream. But stream.onaddtrack is implemented so we use that.
                    e.stream.addEventListener("addtrack", function(te) {
                        var receiver;
                        if (window.RTCPeerConnection.prototype.getReceivers) receiver = _this.getReceivers().find(function(r) {
                            return r.track && r.track.id === te.track.id;
                        });
                        else receiver = {
                            track: te.track
                        };
                        var event = new Event("track");
                        event.track = te.track;
                        event.receiver = receiver;
                        event.transceiver = {
                            receiver: receiver
                        };
                        event.streams = [
                            e.stream
                        ];
                        _this.dispatchEvent(event);
                    });
                    e.stream.getTracks().forEach(function(track) {
                        var receiver;
                        if (window.RTCPeerConnection.prototype.getReceivers) receiver = _this.getReceivers().find(function(r) {
                            return r.track && r.track.id === track.id;
                        });
                        else receiver = {
                            track: track
                        };
                        var event = new Event("track");
                        event.track = track;
                        event.receiver = receiver;
                        event.transceiver = {
                            receiver: receiver
                        };
                        event.streams = [
                            e.stream
                        ];
                        _this.dispatchEvent(event);
                    });
                };
                this.addEventListener("addstream", this._ontrackpoly);
            }
            return origSetRemoteDescription.apply(this, arguments);
        };
    } else // even if RTCRtpTransceiver is in window, it is only used and
    // emitted in unified-plan. Unfortunately this means we need
    // to unconditionally wrap the event.
    $993722e8c7a9e5a7$export$1f48841962b828b1(window, "track", function(e) {
        if (!e.transceiver) Object.defineProperty(e, "transceiver", {
            value: {
                receiver: e.receiver
            }
        });
        return e;
    });
}
function $ef7fa8125ed93bad$export$a41a030a2842f5d6(window) {
    // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.
    if (typeof window === "object" && window.RTCPeerConnection && !("getSenders" in window.RTCPeerConnection.prototype) && "createDTMFSender" in window.RTCPeerConnection.prototype) {
        var shimSenderWithDtmf = function shimSenderWithDtmf(pc, track) {
            return {
                track: track,
                get dtmf () {
                    if (this._dtmf === undefined) {
                        if (track.kind === "audio") this._dtmf = pc.createDTMFSender(track);
                        else this._dtmf = null;
                    }
                    return this._dtmf;
                },
                _pc: pc
            };
        };
        // augment addTrack when getSenders is not available.
        if (!window.RTCPeerConnection.prototype.getSenders) {
            window.RTCPeerConnection.prototype.getSenders = function getSenders() {
                this._senders = this._senders || [];
                return this._senders.slice(); // return a copy of the internal state.
            };
            var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
            window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
                var sender = origAddTrack.apply(this, arguments);
                if (!sender) {
                    sender = shimSenderWithDtmf(this, track);
                    this._senders.push(sender);
                }
                return sender;
            };
            var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
            window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
                origRemoveTrack.apply(this, arguments);
                var idx = this._senders.indexOf(sender);
                if (idx !== -1) this._senders.splice(idx, 1);
            };
        }
        var origAddStream = window.RTCPeerConnection.prototype.addStream;
        window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
            var _this = this;
            this._senders = this._senders || [];
            origAddStream.apply(this, [
                stream
            ]);
            stream.getTracks().forEach(function(track) {
                _this._senders.push(shimSenderWithDtmf(_this, track));
            });
        };
        var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
        window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
            var _this = this;
            this._senders = this._senders || [];
            origRemoveStream.apply(this, [
                stream
            ]);
            stream.getTracks().forEach(function(track) {
                var sender = _this._senders.find(function(s) {
                    return s.track === track;
                });
                if (sender) _this._senders.splice(_this._senders.indexOf(sender), 1);
            });
        };
    } else if (typeof window === "object" && window.RTCPeerConnection && "getSenders" in window.RTCPeerConnection.prototype && "createDTMFSender" in window.RTCPeerConnection.prototype && window.RTCRtpSender && !("dtmf" in window.RTCRtpSender.prototype)) {
        var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
        window.RTCPeerConnection.prototype.getSenders = function getSenders() {
            var _this = this;
            var senders = origGetSenders.apply(this, []);
            senders.forEach(function(sender) {
                return sender._pc = _this;
            });
            return senders;
        };
        Object.defineProperty(window.RTCRtpSender.prototype, "dtmf", {
            get: function() {
                if (this._dtmf === undefined) {
                    if (this.track.kind === "audio") this._dtmf = this._pc.createDTMFSender(this.track);
                    else this._dtmf = null;
                }
                return this._dtmf;
            }
        });
    }
}
function $ef7fa8125ed93bad$export$90608323826f0b17(window) {
    if (!window.RTCPeerConnection) return;
    var origGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function getStats() {
        var _this = this;
        var _arguments = (0, $c235cd4828fc39e0$export$2e2bcd8739ae039)(arguments, 3), selector = _arguments[0], onSucc = _arguments[1], onErr = _arguments[2];
        // If selector is a function then we are in the old style stats so just
        // pass back the original getStats format to avoid breaking old users.
        if (arguments.length > 0 && typeof selector === "function") return origGetStats.apply(this, arguments);
        // When spec-style getStats is supported, return those when called with
        // either no arguments or the selector argument is null.
        if (origGetStats.length === 0 && (arguments.length === 0 || typeof selector !== "function")) return origGetStats.apply(this, []);
        var fixChromeStats_ = function fixChromeStats_(response) {
            var standardReport = {};
            var reports = response.result();
            reports.forEach(function(report) {
                var standardStats = {
                    id: report.id,
                    timestamp: report.timestamp,
                    type: {
                        localcandidate: "local-candidate",
                        remotecandidate: "remote-candidate"
                    }[report.type] || report.type
                };
                report.names().forEach(function(name) {
                    standardStats[name] = report.stat(name);
                });
                standardReport[standardStats.id] = standardStats;
            });
            return standardReport;
        };
        // shim getStats with maplike support
        var makeMapStats = function makeMapStats(stats) {
            return new Map(Object.keys(stats).map(function(key) {
                return [
                    key,
                    stats[key]
                ];
            }));
        };
        if (arguments.length >= 2) {
            var successCallbackWrapper_ = function successCallbackWrapper_(response) {
                onSucc(makeMapStats(fixChromeStats_(response)));
            };
            return origGetStats.apply(this, [
                successCallbackWrapper_,
                selector
            ]);
        }
        // promise-support
        return new Promise(function(resolve, reject) {
            origGetStats.apply(_this, [
                function(response) {
                    resolve(makeMapStats(fixChromeStats_(response)));
                },
                reject
            ]);
        }).then(onSucc, onErr);
    };
}
function $ef7fa8125ed93bad$export$f2f0f2338114eb4b(window) {
    if (!(typeof window === "object" && window.RTCPeerConnection && window.RTCRtpSender && window.RTCRtpReceiver)) return;
    // shim sender stats.
    if (!("getStats" in window.RTCRtpSender.prototype)) {
        var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
        if (origGetSenders) window.RTCPeerConnection.prototype.getSenders = function getSenders() {
            var _this = this;
            var senders = origGetSenders.apply(this, []);
            senders.forEach(function(sender) {
                return sender._pc = _this;
            });
            return senders;
        };
        var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
        if (origAddTrack) window.RTCPeerConnection.prototype.addTrack = function addTrack() {
            var sender = origAddTrack.apply(this, arguments);
            sender._pc = this;
            return sender;
        };
        window.RTCRtpSender.prototype.getStats = function getStats() {
            var sender = this;
            return this._pc.getStats().then(function(result) {
                return(/* Note: this will include stats of all senders that
         *   send a track with the same id as sender.track as
         *   it is not possible to identify the RTCRtpSender.
         */ $993722e8c7a9e5a7$export$93439ffc3f787d51(result, sender.track, true));
            });
        };
    }
    // shim receiver stats.
    if (!("getStats" in window.RTCRtpReceiver.prototype)) {
        var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
        if (origGetReceivers) window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
            var _this = this;
            var receivers = origGetReceivers.apply(this, []);
            receivers.forEach(function(receiver) {
                return receiver._pc = _this;
            });
            return receivers;
        };
        $993722e8c7a9e5a7$export$1f48841962b828b1(window, "track", function(e) {
            e.receiver._pc = e.srcElement;
            return e;
        });
        window.RTCRtpReceiver.prototype.getStats = function getStats() {
            var receiver = this;
            return this._pc.getStats().then(function(result) {
                return $993722e8c7a9e5a7$export$93439ffc3f787d51(result, receiver.track, false);
            });
        };
    }
    if (!("getStats" in window.RTCRtpSender.prototype && "getStats" in window.RTCRtpReceiver.prototype)) return;
    // shim RTCPeerConnection.getStats(track).
    var origGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function getStats() {
        if (arguments.length > 0 && arguments[0] instanceof window.MediaStreamTrack) {
            var track = arguments[0];
            var sender;
            var receiver;
            var err;
            this.getSenders().forEach(function(s) {
                if (s.track === track) {
                    if (sender) err = true;
                    else sender = s;
                }
            });
            this.getReceivers().forEach(function(r) {
                if (r.track === track) {
                    if (receiver) err = true;
                    else receiver = r;
                }
                return r.track === track;
            });
            if (err || sender && receiver) return Promise.reject(new DOMException("There are more than one sender or receiver for the track.", "InvalidAccessError"));
            else if (sender) return sender.getStats();
            else if (receiver) return receiver.getStats();
            return Promise.reject(new DOMException("There is no sender or receiver for the track.", "InvalidAccessError"));
        }
        return origGetStats.apply(this, arguments);
    };
}
function $ef7fa8125ed93bad$export$30e3cdd46f8d5100(window) {
    // shim addTrack/removeTrack with native variants in order to make
    // the interactions with legacy getLocalStreams behave as in other browsers.
    // Keeps a mapping stream.id => [stream, rtpsenders...]
    window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
        var _this = this;
        this._shimmedLocalStreams = this._shimmedLocalStreams || {};
        return Object.keys(this._shimmedLocalStreams).map(function(streamId) {
            return _this._shimmedLocalStreams[streamId][0];
        });
    };
    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
        if (!stream) return origAddTrack.apply(this, arguments);
        this._shimmedLocalStreams = this._shimmedLocalStreams || {};
        var sender = origAddTrack.apply(this, arguments);
        if (!this._shimmedLocalStreams[stream.id]) this._shimmedLocalStreams[stream.id] = [
            stream,
            sender
        ];
        else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) this._shimmedLocalStreams[stream.id].push(sender);
        return sender;
    };
    var origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
        var _this = this;
        this._shimmedLocalStreams = this._shimmedLocalStreams || {};
        stream.getTracks().forEach(function(track) {
            var alreadyExists = _this.getSenders().find(function(s) {
                return s.track === track;
            });
            if (alreadyExists) throw new DOMException("Track already exists.", "InvalidAccessError");
        });
        var existingSenders = this.getSenders();
        origAddStream.apply(this, arguments);
        var newSenders = this.getSenders().filter(function(newSender) {
            return existingSenders.indexOf(newSender) === -1;
        });
        this._shimmedLocalStreams[stream.id] = [
            stream
        ].concat(newSenders);
    };
    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
        this._shimmedLocalStreams = this._shimmedLocalStreams || {};
        delete this._shimmedLocalStreams[stream.id];
        return origRemoveStream.apply(this, arguments);
    };
    var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;
    window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
        var _this = this;
        this._shimmedLocalStreams = this._shimmedLocalStreams || {};
        if (sender) Object.keys(this._shimmedLocalStreams).forEach(function(streamId) {
            var idx = _this._shimmedLocalStreams[streamId].indexOf(sender);
            if (idx !== -1) _this._shimmedLocalStreams[streamId].splice(idx, 1);
            if (_this._shimmedLocalStreams[streamId].length === 1) delete _this._shimmedLocalStreams[streamId];
        });
        return origRemoveTrack.apply(this, arguments);
    };
}
function $ef7fa8125ed93bad$export$9588259fcf4ebc91(window, browserDetails) {
    var replaceInternalStreamId = // replace the internal stream id with the external one and
    // vice versa.
    function replaceInternalStreamId(pc, description) {
        var sdp = description.sdp;
        Object.keys(pc._reverseStreams || []).forEach(function(internalId) {
            var externalStream = pc._reverseStreams[internalId];
            var internalStream = pc._streams[externalStream.id];
            sdp = sdp.replace(new RegExp(internalStream.id, "g"), externalStream.id);
        });
        return new RTCSessionDescription({
            type: description.type,
            sdp: sdp
        });
    };
    var replaceExternalStreamId = function replaceExternalStreamId(pc, description) {
        var sdp = description.sdp;
        Object.keys(pc._reverseStreams || []).forEach(function(internalId) {
            var externalStream = pc._reverseStreams[internalId];
            var internalStream = pc._streams[externalStream.id];
            sdp = sdp.replace(new RegExp(externalStream.id, "g"), internalStream.id);
        });
        return new RTCSessionDescription({
            type: description.type,
            sdp: sdp
        });
    };
    if (!window.RTCPeerConnection) return;
    // shim addTrack and removeTrack.
    if (window.RTCPeerConnection.prototype.addTrack && browserDetails.version >= 65) return $ef7fa8125ed93bad$export$30e3cdd46f8d5100(window);
    // also shim pc.getLocalStreams when addTrack is shimmed
    // to return the original streams.
    var origGetLocalStreams = window.RTCPeerConnection.prototype.getLocalStreams;
    window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
        var _this = this;
        var nativeStreams = origGetLocalStreams.apply(this);
        this._reverseStreams = this._reverseStreams || {};
        return nativeStreams.map(function(stream) {
            return _this._reverseStreams[stream.id];
        });
    };
    var origAddStream = window.RTCPeerConnection.prototype.addStream;
    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
        var _this = this;
        this._streams = this._streams || {};
        this._reverseStreams = this._reverseStreams || {};
        stream.getTracks().forEach(function(track) {
            var alreadyExists = _this.getSenders().find(function(s) {
                return s.track === track;
            });
            if (alreadyExists) throw new DOMException("Track already exists.", "InvalidAccessError");
        });
        // Add identity mapping for consistency with addTrack.
        // Unless this is being used with a stream from addTrack.
        if (!this._reverseStreams[stream.id]) {
            var newStream = new window.MediaStream(stream.getTracks());
            this._streams[stream.id] = newStream;
            this._reverseStreams[newStream.id] = stream;
            stream = newStream;
        }
        origAddStream.apply(this, [
            stream
        ]);
    };
    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
        this._streams = this._streams || {};
        this._reverseStreams = this._reverseStreams || {};
        origRemoveStream.apply(this, [
            this._streams[stream.id] || stream
        ]);
        delete this._reverseStreams[this._streams[stream.id] ? this._streams[stream.id].id : stream.id];
        delete this._streams[stream.id];
    };
    window.RTCPeerConnection.prototype.addTrack = function addTrack(track, stream) {
        var _this = this;
        if (this.signalingState === "closed") throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
        var streams = [].slice.call(arguments, 1);
        if (streams.length !== 1 || !streams[0].getTracks().find(function(t) {
            return t === track;
        })) // this is not fully correct but all we can manage without
        // [[associated MediaStreams]] internal slot.
        throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.", "NotSupportedError");
        var alreadyExists = this.getSenders().find(function(s) {
            return s.track === track;
        });
        if (alreadyExists) throw new DOMException("Track already exists.", "InvalidAccessError");
        this._streams = this._streams || {};
        this._reverseStreams = this._reverseStreams || {};
        var oldStream = this._streams[stream.id];
        if (oldStream) {
            // this is using odd Chrome behaviour, use with caution:
            // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815
            // Note: we rely on the high-level addTrack/dtmf shim to
            // create the sender with a dtmf sender.
            oldStream.addTrack(track);
            // Trigger ONN async.
            Promise.resolve().then(function() {
                _this.dispatchEvent(new Event("negotiationneeded"));
            });
        } else {
            var newStream = new window.MediaStream([
                track
            ]);
            this._streams[stream.id] = newStream;
            this._reverseStreams[newStream.id] = stream;
            this.addStream(newStream);
        }
        return this.getSenders().find(function(s) {
            return s.track === track;
        });
    };
    [
        "createOffer",
        "createAnswer"
    ].forEach(function(method) {
        var nativeMethod = window.RTCPeerConnection.prototype[method];
        var methodObj = (0, $44635a22a5de2b4c$export$2e2bcd8739ae039)({}, method, function() {
            var _this = this;
            var args = arguments;
            var isLegacyCall = arguments.length && typeof arguments[0] === "function";
            if (isLegacyCall) return nativeMethod.apply(this, [
                function(description) {
                    var desc = replaceInternalStreamId(_this, description);
                    args[0].apply(null, [
                        desc
                    ]);
                },
                function(err) {
                    if (args[1]) args[1].apply(null, err);
                },
                arguments[2]
            ]);
            return nativeMethod.apply(this, arguments).then(function(description) {
                return replaceInternalStreamId(_this, description);
            });
        });
        window.RTCPeerConnection.prototype[method] = methodObj[method];
    });
    var origSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;
    window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
        if (!arguments.length || !arguments[0].type) return origSetLocalDescription.apply(this, arguments);
        arguments[0] = replaceExternalStreamId(this, arguments[0]);
        return origSetLocalDescription.apply(this, arguments);
    };
    // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier
    var origLocalDescription = Object.getOwnPropertyDescriptor(window.RTCPeerConnection.prototype, "localDescription");
    Object.defineProperty(window.RTCPeerConnection.prototype, "localDescription", {
        get: function() {
            var description = origLocalDescription.get.apply(this);
            if (description.type === "") return description;
            return replaceInternalStreamId(this, description);
        }
    });
    window.RTCPeerConnection.prototype.removeTrack = function removeTrack(sender) {
        var _this = this;
        if (this.signalingState === "closed") throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
        // We can not yet check for sender instanceof RTCRtpSender
        // since we shim RTPSender. So we check if sender._pc is set.
        if (!sender._pc) throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.", "TypeError");
        var isLocal = sender._pc === this;
        if (!isLocal) throw new DOMException("Sender was not created by this connection.", "InvalidAccessError");
        // Search for the native stream the senders track belongs to.
        this._streams = this._streams || {};
        var stream;
        Object.keys(this._streams).forEach(function(streamid) {
            var hasTrack = _this._streams[streamid].getTracks().find(function(track) {
                return sender.track === track;
            });
            if (hasTrack) stream = _this._streams[streamid];
        });
        if (stream) {
            if (stream.getTracks().length === 1) // if this is the last track of the stream, remove the stream. This
            // takes care of any shimmed _senders.
            this.removeStream(this._reverseStreams[stream.id]);
            else // relying on the same odd chrome behaviour as above.
            stream.removeTrack(sender.track);
            this.dispatchEvent(new Event("negotiationneeded"));
        }
    };
}
function $ef7fa8125ed93bad$export$852a08dda9a55ea7(window, browserDetails) {
    if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) // very basic support for old versions.
    window.RTCPeerConnection = window.webkitRTCPeerConnection;
    if (!window.RTCPeerConnection) return;
    // shim implicit creation of RTCSessionDescription/RTCIceCandidate
    if (browserDetails.version < 53) [
        "setLocalDescription",
        "setRemoteDescription",
        "addIceCandidate"
    ].forEach(function(method) {
        var nativeMethod = window.RTCPeerConnection.prototype[method];
        var methodObj = (0, $44635a22a5de2b4c$export$2e2bcd8739ae039)({}, method, function() {
            arguments[0] = new (method === "addIceCandidate" ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
        });
        window.RTCPeerConnection.prototype[method] = methodObj[method];
    });
}
function $ef7fa8125ed93bad$export$341293bbeaae37cb(window, browserDetails) {
    $993722e8c7a9e5a7$export$1f48841962b828b1(window, "negotiationneeded", function(e) {
        var pc = e.target;
        if (browserDetails.version < 72 || pc.getConfiguration && pc.getConfiguration().sdpSemantics === "plan-b") {
            if (pc.signalingState !== "stable") return;
        }
        return e;
    });
}


var $f7879eae6ce316c3$exports = {};

$parcel$export($f7879eae6ce316c3$exports, "shimOnTrack", function () { return $f7879eae6ce316c3$export$f358708f68ab068; });
$parcel$export($f7879eae6ce316c3$exports, "shimPeerConnection", function () { return $f7879eae6ce316c3$export$852a08dda9a55ea7; });
$parcel$export($f7879eae6ce316c3$exports, "shimSenderGetStats", function () { return $f7879eae6ce316c3$export$f0525502095c04ef; });
$parcel$export($f7879eae6ce316c3$exports, "shimReceiverGetStats", function () { return $f7879eae6ce316c3$export$83d69126527b1171; });
$parcel$export($f7879eae6ce316c3$exports, "shimRemoveStream", function () { return $f7879eae6ce316c3$export$825e523ef749bd8c; });
$parcel$export($f7879eae6ce316c3$exports, "shimRTCDataChannel", function () { return $f7879eae6ce316c3$export$ff9cb3bc8990e8f7; });
$parcel$export($f7879eae6ce316c3$exports, "shimAddTransceiver", function () { return $f7879eae6ce316c3$export$70c77533b6e9908d; });
$parcel$export($f7879eae6ce316c3$exports, "shimGetParameters", function () { return $f7879eae6ce316c3$export$66238223c298fbaa; });
$parcel$export($f7879eae6ce316c3$exports, "shimCreateOffer", function () { return $f7879eae6ce316c3$export$51beccf0e777b843; });
$parcel$export($f7879eae6ce316c3$exports, "shimCreateAnswer", function () { return $f7879eae6ce316c3$export$df0b46e7cef08150; });
$parcel$export($f7879eae6ce316c3$exports, "shimGetUserMedia", function () { return $ff944220a0d9cb56$export$1ed4910f4d37dc5e; });
$parcel$export($f7879eae6ce316c3$exports, "shimGetDisplayMedia", function () { return $3b086a053fdafaab$export$97270b87351d9c04; });
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */ /* eslint-env node */ 


var $jyjfM = parcelRequire("jyjfM");

/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */ /* eslint-env node */ 
"use strict";
function $ff944220a0d9cb56$export$1ed4910f4d37dc5e(window, browserDetails) {
    var navigator = window && window.navigator;
    var MediaStreamTrack = window && window.MediaStreamTrack;
    navigator.getUserMedia = function(constraints, onSuccess, onError) {
        // Replace Firefox 44+'s deprecation warning with unprefixed version.
        $993722e8c7a9e5a7$export$cdd73fc4100a6ef4("navigator.getUserMedia", "navigator.mediaDevices.getUserMedia");
        navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);
    };
    if (!(browserDetails.version > 55 && "autoGainControl" in navigator.mediaDevices.getSupportedConstraints())) {
        var remap = function remap(obj, a, b) {
            if (a in obj && !(b in obj)) {
                obj[b] = obj[a];
                delete obj[a];
            }
        };
        var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
        navigator.mediaDevices.getUserMedia = function(c) {
            if (typeof c === "object" && typeof c.audio === "object") {
                c = JSON.parse(JSON.stringify(c));
                remap(c.audio, "autoGainControl", "mozAutoGainControl");
                remap(c.audio, "noiseSuppression", "mozNoiseSuppression");
            }
            return nativeGetUserMedia(c);
        };
        if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {
            var nativeGetSettings = MediaStreamTrack.prototype.getSettings;
            MediaStreamTrack.prototype.getSettings = function() {
                var obj = nativeGetSettings.apply(this, arguments);
                remap(obj, "mozAutoGainControl", "autoGainControl");
                remap(obj, "mozNoiseSuppression", "noiseSuppression");
                return obj;
            };
        }
        if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {
            var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;
            MediaStreamTrack.prototype.applyConstraints = function(c) {
                if (this.kind === "audio" && typeof c === "object") {
                    c = JSON.parse(JSON.stringify(c));
                    remap(c, "autoGainControl", "mozAutoGainControl");
                    remap(c, "noiseSuppression", "mozNoiseSuppression");
                }
                return nativeApplyConstraints.apply(this, [
                    c
                ]);
            };
        }
    }
}


/*
 *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */ /* eslint-env node */ "use strict";
function $3b086a053fdafaab$export$97270b87351d9c04(window, preferredMediaSource) {
    if (window.navigator.mediaDevices && "getDisplayMedia" in window.navigator.mediaDevices) return;
    if (!window.navigator.mediaDevices) return;
    window.navigator.mediaDevices.getDisplayMedia = function getDisplayMedia(constraints) {
        if (!(constraints && constraints.video)) {
            var err = new DOMException("getDisplayMedia without video constraints is undefined");
            err.name = "NotFoundError";
            // from https://heycam.github.io/webidl/#idl-DOMException-error-names
            err.code = 8;
            return Promise.reject(err);
        }
        if (constraints.video === true) constraints.video = {
            mediaSource: preferredMediaSource
        };
        else constraints.video.mediaSource = preferredMediaSource;
        return window.navigator.mediaDevices.getUserMedia(constraints);
    };
}


"use strict";
function $f7879eae6ce316c3$export$f358708f68ab068(window) {
    if (typeof window === "object" && window.RTCTrackEvent && "receiver" in window.RTCTrackEvent.prototype && !("transceiver" in window.RTCTrackEvent.prototype)) Object.defineProperty(window.RTCTrackEvent.prototype, "transceiver", {
        get: function() {
            return {
                receiver: this.receiver
            };
        }
    });
}
function $f7879eae6ce316c3$export$852a08dda9a55ea7(window, browserDetails) {
    if (typeof window !== "object" || !(window.RTCPeerConnection || window.mozRTCPeerConnection)) return; // probably media.peerconnection.enabled=false in about:config
    if (!window.RTCPeerConnection && window.mozRTCPeerConnection) // very basic support for old versions.
    window.RTCPeerConnection = window.mozRTCPeerConnection;
    if (browserDetails.version < 53) // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.
    [
        "setLocalDescription",
        "setRemoteDescription",
        "addIceCandidate"
    ].forEach(function(method) {
        var nativeMethod = window.RTCPeerConnection.prototype[method];
        var methodObj = (0, $44635a22a5de2b4c$export$2e2bcd8739ae039)({}, method, function() {
            arguments[0] = new (method === "addIceCandidate" ? window.RTCIceCandidate : window.RTCSessionDescription)(arguments[0]);
            return nativeMethod.apply(this, arguments);
        });
        window.RTCPeerConnection.prototype[method] = methodObj[method];
    });
    var modernStatsTypes = {
        inboundrtp: "inbound-rtp",
        outboundrtp: "outbound-rtp",
        candidatepair: "candidate-pair",
        localcandidate: "local-candidate",
        remotecandidate: "remote-candidate"
    };
    var nativeGetStats = window.RTCPeerConnection.prototype.getStats;
    window.RTCPeerConnection.prototype.getStats = function getStats() {
        var _arguments = (0, $c235cd4828fc39e0$export$2e2bcd8739ae039)(arguments, 3), selector = _arguments[0], onSucc = _arguments[1], onErr = _arguments[2];
        return nativeGetStats.apply(this, [
            selector || null
        ]).then(function(stats) {
            if (browserDetails.version < 53 && !onSucc) // Shim only promise getStats with spec-hyphens in type names
            // Leave callback version alone; misc old uses of forEach before Map
            try {
                stats.forEach(function(stat) {
                    stat.type = modernStatsTypes[stat.type] || stat.type;
                });
            } catch (e) {
                if (e.name !== "TypeError") throw e;
                // Avoid TypeError: "type" is read-only, in old versions. 34-43ish
                stats.forEach(function(stat, i) {
                    stats.set(i, Object.assign({}, stat, {
                        type: modernStatsTypes[stat.type] || stat.type
                    }));
                });
            }
            return stats;
        }).then(onSucc, onErr);
    };
}
function $f7879eae6ce316c3$export$f0525502095c04ef(window) {
    if (!(typeof window === "object" && window.RTCPeerConnection && window.RTCRtpSender)) return;
    if (window.RTCRtpSender && "getStats" in window.RTCRtpSender.prototype) return;
    var origGetSenders = window.RTCPeerConnection.prototype.getSenders;
    if (origGetSenders) window.RTCPeerConnection.prototype.getSenders = function getSenders() {
        var _this = this;
        var senders = origGetSenders.apply(this, []);
        senders.forEach(function(sender) {
            return sender._pc = _this;
        });
        return senders;
    };
    var origAddTrack = window.RTCPeerConnection.prototype.addTrack;
    if (origAddTrack) window.RTCPeerConnection.prototype.addTrack = function addTrack() {
        var sender = origAddTrack.apply(this, arguments);
        sender._pc = this;
        return sender;
    };
    window.RTCRtpSender.prototype.getStats = function getStats() {
        return this.track ? this._pc.getStats(this.track) : Promise.resolve(new Map());
    };
}
function $f7879eae6ce316c3$export$83d69126527b1171(window) {
    if (!(typeof window === "object" && window.RTCPeerConnection && window.RTCRtpSender)) return;
    if (window.RTCRtpSender && "getStats" in window.RTCRtpReceiver.prototype) return;
    var origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;
    if (origGetReceivers) window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {
        var _this = this;
        var receivers = origGetReceivers.apply(this, []);
        receivers.forEach(function(receiver) {
            return receiver._pc = _this;
        });
        return receivers;
    };
    $993722e8c7a9e5a7$export$1f48841962b828b1(window, "track", function(e) {
        e.receiver._pc = e.srcElement;
        return e;
    });
    window.RTCRtpReceiver.prototype.getStats = function getStats() {
        return this._pc.getStats(this.track);
    };
}
function $f7879eae6ce316c3$export$825e523ef749bd8c(window) {
    if (!window.RTCPeerConnection || "removeStream" in window.RTCPeerConnection.prototype) return;
    window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
        var _this = this;
        $993722e8c7a9e5a7$export$cdd73fc4100a6ef4("removeStream", "removeTrack");
        this.getSenders().forEach(function(sender) {
            if (sender.track && stream.getTracks().includes(sender.track)) _this.removeTrack(sender);
        });
    };
}
function $f7879eae6ce316c3$export$ff9cb3bc8990e8f7(window) {
    // rename DataChannel to RTCDataChannel (native fix in FF60):
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851
    if (window.DataChannel && !window.RTCDataChannel) window.RTCDataChannel = window.DataChannel;
}
function $f7879eae6ce316c3$export$70c77533b6e9908d(window) {
    // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
    // Firefox ignores the init sendEncodings options passed to addTransceiver
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
    if (!(typeof window === "object" && window.RTCPeerConnection)) return;
    var origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;
    if (origAddTransceiver) window.RTCPeerConnection.prototype.addTransceiver = function addTransceiver() {
        this.setParametersPromises = [];
        // WebIDL input coercion and validation
        var sendEncodings = arguments[1] && arguments[1].sendEncodings;
        if (sendEncodings === undefined) sendEncodings = [];
        sendEncodings = (0, $jyjfM.default)(sendEncodings);
        var shouldPerformCheck = sendEncodings.length > 0;
        if (shouldPerformCheck) // If sendEncodings params are provided, validate grammar
        sendEncodings.forEach(function(encodingParam) {
            if ("rid" in encodingParam) {
                var ridRegex = /^[a-z0-9]{0,16}$/i;
                if (!ridRegex.test(encodingParam.rid)) throw new TypeError("Invalid RID value provided.");
            }
            if ("scaleResolutionDownBy" in encodingParam) {
                if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) throw new RangeError("scale_resolution_down_by must be >= 1.0");
            }
            if ("maxFramerate" in encodingParam) {
                if (!(parseFloat(encodingParam.maxFramerate) >= 0)) throw new RangeError("max_framerate must be >= 0.0");
            }
        });
        var transceiver = origAddTransceiver.apply(this, arguments);
        if (shouldPerformCheck) {
            // Check if the init options were applied. If not we do this in an
            // asynchronous way and save the promise reference in a global object.
            // This is an ugly hack, but at the same time is way more robust than
            // checking the sender parameters before and after the createOffer
            // Also note that after the createoffer we are not 100% sure that
            // the params were asynchronously applied so we might miss the
            // opportunity to recreate offer.
            var sender = transceiver.sender;
            var params = sender.getParameters();
            if (!("encodings" in params) || // Avoid being fooled by patched getParameters() below.
            params.encodings.length === 1 && Object.keys(params.encodings[0]).length === 0) {
                params.encodings = sendEncodings;
                sender.sendEncodings = sendEncodings;
                this.setParametersPromises.push(sender.setParameters(params).then(function() {
                    delete sender.sendEncodings;
                })["catch"](function() {
                    delete sender.sendEncodings;
                }));
            }
        }
        return transceiver;
    };
}
function $f7879eae6ce316c3$export$66238223c298fbaa(window) {
    if (!(typeof window === "object" && window.RTCRtpSender)) return;
    var origGetParameters = window.RTCRtpSender.prototype.getParameters;
    if (origGetParameters) window.RTCRtpSender.prototype.getParameters = function getParameters() {
        var params = origGetParameters.apply(this, arguments);
        if (!("encodings" in params)) params.encodings = [].concat(this.sendEncodings || [
            {}
        ]);
        return params;
    };
}
function $f7879eae6ce316c3$export$51beccf0e777b843(window) {
    // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
    // Firefox ignores the init sendEncodings options passed to addTransceiver
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
    if (!(typeof window === "object" && window.RTCPeerConnection)) return;
    var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
    window.RTCPeerConnection.prototype.createOffer = function createOffer() {
        var _this = this;
        if (this.setParametersPromises && this.setParametersPromises.length) return Promise.all(this.setParametersPromises).then(function() {
            return origCreateOffer.apply(_this, arguments);
        })["finally"](function() {
            _this.setParametersPromises = [];
        });
        return origCreateOffer.apply(this, arguments);
    };
}
function $f7879eae6ce316c3$export$df0b46e7cef08150(window) {
    // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647
    // Firefox ignores the init sendEncodings options passed to addTransceiver
    // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918
    if (!(typeof window === "object" && window.RTCPeerConnection)) return;
    var origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;
    window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {
        var _this = this;
        if (this.setParametersPromises && this.setParametersPromises.length) return Promise.all(this.setParametersPromises).then(function() {
            return origCreateAnswer.apply(_this, arguments);
        })["finally"](function() {
            _this.setParametersPromises = [];
        });
        return origCreateAnswer.apply(this, arguments);
    };
}


var $b5603e2a25579e83$exports = {};

$parcel$export($b5603e2a25579e83$exports, "shimLocalStreamsAPI", function () { return $b5603e2a25579e83$export$8df41282f4fdcea2; });
$parcel$export($b5603e2a25579e83$exports, "shimRemoteStreamsAPI", function () { return $b5603e2a25579e83$export$762aa4cbb4f2f857; });
$parcel$export($b5603e2a25579e83$exports, "shimCallbacksAPI", function () { return $b5603e2a25579e83$export$da31df245debdd3; });
$parcel$export($b5603e2a25579e83$exports, "shimGetUserMedia", function () { return $b5603e2a25579e83$export$1ed4910f4d37dc5e; });
$parcel$export($b5603e2a25579e83$exports, "shimConstraints", function () { return $b5603e2a25579e83$export$494a01ac68ba81ac; });
$parcel$export($b5603e2a25579e83$exports, "shimRTCIceServerUrls", function () { return $b5603e2a25579e83$export$671a8b47b41b6f41; });
$parcel$export($b5603e2a25579e83$exports, "shimTrackEventTransceiver", function () { return $b5603e2a25579e83$export$85d53da088cb1b14; });
$parcel$export($b5603e2a25579e83$exports, "shimCreateOfferLegacy", function () { return $b5603e2a25579e83$export$d444266503fdd2d4; });
$parcel$export($b5603e2a25579e83$exports, "shimAudioContext", function () { return $b5603e2a25579e83$export$857cd739a7b795d2; });
/*
 *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */ 
"use strict";
function $b5603e2a25579e83$export$8df41282f4fdcea2(window) {
    if (typeof window !== "object" || !window.RTCPeerConnection) return;
    if (!("getLocalStreams" in window.RTCPeerConnection.prototype)) window.RTCPeerConnection.prototype.getLocalStreams = function getLocalStreams() {
        if (!this._localStreams) this._localStreams = [];
        return this._localStreams;
    };
    if (!("addStream" in window.RTCPeerConnection.prototype)) {
        var _addTrack = window.RTCPeerConnection.prototype.addTrack;
        window.RTCPeerConnection.prototype.addStream = function addStream(stream) {
            var _this = this;
            if (!this._localStreams) this._localStreams = [];
            if (!this._localStreams.includes(stream)) this._localStreams.push(stream);
            // Try to emulate Chrome's behaviour of adding in audio-video order.
            // Safari orders by track id.
            stream.getAudioTracks().forEach(function(track) {
                return _addTrack.call(_this, track, stream);
            });
            stream.getVideoTracks().forEach(function(track) {
                return _addTrack.call(_this, track, stream);
            });
        };
        window.RTCPeerConnection.prototype.addTrack = function addTrack(track) {
            for(var _len = arguments.length, streams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                streams[_key - 1] = arguments[_key];
            }
            var _this = this;
            if (streams) streams.forEach(function(stream) {
                if (!_this._localStreams) _this._localStreams = [
                    stream
                ];
                else if (!_this._localStreams.includes(stream)) _this._localStreams.push(stream);
            });
            return _addTrack.apply(this, arguments);
        };
    }
    if (!("removeStream" in window.RTCPeerConnection.prototype)) window.RTCPeerConnection.prototype.removeStream = function removeStream(stream) {
        var _this = this;
        if (!this._localStreams) this._localStreams = [];
        var index = this._localStreams.indexOf(stream);
        if (index === -1) return;
        this._localStreams.splice(index, 1);
        var tracks = stream.getTracks();
        this.getSenders().forEach(function(sender) {
            if (tracks.includes(sender.track)) _this.removeTrack(sender);
        });
    };
}
function $b5603e2a25579e83$export$762aa4cbb4f2f857(window) {
    if (typeof window !== "object" || !window.RTCPeerConnection) return;
    if (!("getRemoteStreams" in window.RTCPeerConnection.prototype)) window.RTCPeerConnection.prototype.getRemoteStreams = function getRemoteStreams() {
        return this._remoteStreams ? this._remoteStreams : [];
    };
    if (!("onaddstream" in window.RTCPeerConnection.prototype)) {
        Object.defineProperty(window.RTCPeerConnection.prototype, "onaddstream", {
            get: function() {
                return this._onaddstream;
            },
            set: function(f) {
                var _this = this;
                if (this._onaddstream) {
                    this.removeEventListener("addstream", this._onaddstream);
                    this.removeEventListener("track", this._onaddstreampoly);
                }
                this.addEventListener("addstream", this._onaddstream = f);
                this.addEventListener("track", this._onaddstreampoly = function(e) {
                    e.streams.forEach(function(stream) {
                        if (!_this._remoteStreams) _this._remoteStreams = [];
                        if (_this._remoteStreams.includes(stream)) return;
                        _this._remoteStreams.push(stream);
                        var event = new Event("addstream");
                        event.stream = stream;
                        _this.dispatchEvent(event);
                    });
                });
            }
        });
        var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
        window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
            var pc = this;
            if (!this._onaddstreampoly) this.addEventListener("track", this._onaddstreampoly = function(e) {
                e.streams.forEach(function(stream) {
                    if (!pc._remoteStreams) pc._remoteStreams = [];
                    if (pc._remoteStreams.indexOf(stream) >= 0) return;
                    pc._remoteStreams.push(stream);
                    var event = new Event("addstream");
                    event.stream = stream;
                    pc.dispatchEvent(event);
                });
            });
            return origSetRemoteDescription.apply(pc, arguments);
        };
    }
}
function $b5603e2a25579e83$export$da31df245debdd3(window) {
    if (typeof window !== "object" || !window.RTCPeerConnection) return;
    var prototype = window.RTCPeerConnection.prototype;
    var origCreateOffer = prototype.createOffer;
    var origCreateAnswer = prototype.createAnswer;
    var setLocalDescription = prototype.setLocalDescription;
    var setRemoteDescription = prototype.setRemoteDescription;
    var addIceCandidate = prototype.addIceCandidate;
    prototype.createOffer = function createOffer(successCallback, failureCallback) {
        var options = arguments.length >= 2 ? arguments[2] : arguments[0];
        var promise = origCreateOffer.apply(this, [
            options
        ]);
        if (!failureCallback) return promise;
        promise.then(successCallback, failureCallback);
        return Promise.resolve();
    };
    prototype.createAnswer = function createAnswer(successCallback, failureCallback) {
        var options = arguments.length >= 2 ? arguments[2] : arguments[0];
        var promise = origCreateAnswer.apply(this, [
            options
        ]);
        if (!failureCallback) return promise;
        promise.then(successCallback, failureCallback);
        return Promise.resolve();
    };
    var withCallback = function withCallback(description, successCallback, failureCallback) {
        var promise = setLocalDescription.apply(this, [
            description
        ]);
        if (!failureCallback) return promise;
        promise.then(successCallback, failureCallback);
        return Promise.resolve();
    };
    prototype.setLocalDescription = withCallback;
    withCallback = function withCallback(description, successCallback, failureCallback) {
        var promise = setRemoteDescription.apply(this, [
            description
        ]);
        if (!failureCallback) return promise;
        promise.then(successCallback, failureCallback);
        return Promise.resolve();
    };
    prototype.setRemoteDescription = withCallback;
    withCallback = function withCallback(candidate, successCallback, failureCallback) {
        var promise = addIceCandidate.apply(this, [
            candidate
        ]);
        if (!failureCallback) return promise;
        promise.then(successCallback, failureCallback);
        return Promise.resolve();
    };
    prototype.addIceCandidate = withCallback;
}
function $b5603e2a25579e83$export$1ed4910f4d37dc5e(window) {
    var navigator = window && window.navigator;
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        // shim not needed in Safari 12.1
        var mediaDevices = navigator.mediaDevices;
        var _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);
        navigator.mediaDevices.getUserMedia = function(constraints) {
            return _getUserMedia($b5603e2a25579e83$export$494a01ac68ba81ac(constraints));
        };
    }
    if (!navigator.getUserMedia && navigator.mediaDevices && navigator.mediaDevices.getUserMedia) navigator.getUserMedia = (function getUserMedia(constraints, cb, errcb) {
        navigator.mediaDevices.getUserMedia(constraints).then(cb, errcb);
    }).bind(navigator);
}
function $b5603e2a25579e83$export$494a01ac68ba81ac(constraints) {
    if (constraints && constraints.video !== undefined) return Object.assign({}, constraints, {
        video: $993722e8c7a9e5a7$export$15384eac40dc88c8(constraints.video)
    });
    return constraints;
}
function $b5603e2a25579e83$export$671a8b47b41b6f41(window) {
    if (!window.RTCPeerConnection) return;
    // migrate from non-spec RTCIceServer.url to RTCIceServer.urls
    var OrigPeerConnection = window.RTCPeerConnection;
    window.RTCPeerConnection = function RTCPeerConnection(pcConfig, pcConstraints) {
        if (pcConfig && pcConfig.iceServers) {
            var newIceServers = [];
            for(var i = 0; i < pcConfig.iceServers.length; i++){
                var server = pcConfig.iceServers[i];
                if (!server.hasOwnProperty("urls") && server.hasOwnProperty("url")) {
                    $993722e8c7a9e5a7$export$cdd73fc4100a6ef4("RTCIceServer.url", "RTCIceServer.urls");
                    server = JSON.parse(JSON.stringify(server));
                    server.urls = server.url;
                    delete server.url;
                    newIceServers.push(server);
                } else newIceServers.push(pcConfig.iceServers[i]);
            }
            pcConfig.iceServers = newIceServers;
        }
        return new OrigPeerConnection(pcConfig, pcConstraints);
    };
    window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;
    // wrap static methods. Currently just generateCertificate.
    if ("generateCertificate" in OrigPeerConnection) Object.defineProperty(window.RTCPeerConnection, "generateCertificate", {
        get: function() {
            return OrigPeerConnection.generateCertificate;
        }
    });
}
function $b5603e2a25579e83$export$85d53da088cb1b14(window) {
    // Add event.transceiver member over deprecated event.receiver
    if (typeof window === "object" && window.RTCTrackEvent && "receiver" in window.RTCTrackEvent.prototype && !("transceiver" in window.RTCTrackEvent.prototype)) Object.defineProperty(window.RTCTrackEvent.prototype, "transceiver", {
        get: function() {
            return {
                receiver: this.receiver
            };
        }
    });
}
function $b5603e2a25579e83$export$d444266503fdd2d4(window) {
    var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;
    window.RTCPeerConnection.prototype.createOffer = function createOffer(offerOptions) {
        if (offerOptions) {
            if (typeof offerOptions.offerToReceiveAudio !== "undefined") // support bit values
            offerOptions.offerToReceiveAudio = !!offerOptions.offerToReceiveAudio;
            var audioTransceiver = this.getTransceivers().find(function(transceiver) {
                return transceiver.receiver.track.kind === "audio";
            });
            if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {
                if (audioTransceiver.direction === "sendrecv") {
                    if (audioTransceiver.setDirection) audioTransceiver.setDirection("sendonly");
                    else audioTransceiver.direction = "sendonly";
                } else if (audioTransceiver.direction === "recvonly") {
                    if (audioTransceiver.setDirection) audioTransceiver.setDirection("inactive");
                    else audioTransceiver.direction = "inactive";
                }
            } else if (offerOptions.offerToReceiveAudio === true && !audioTransceiver) this.addTransceiver("audio", {
                direction: "recvonly"
            });
            if (typeof offerOptions.offerToReceiveVideo !== "undefined") // support bit values
            offerOptions.offerToReceiveVideo = !!offerOptions.offerToReceiveVideo;
            var videoTransceiver = this.getTransceivers().find(function(transceiver) {
                return transceiver.receiver.track.kind === "video";
            });
            if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {
                if (videoTransceiver.direction === "sendrecv") {
                    if (videoTransceiver.setDirection) videoTransceiver.setDirection("sendonly");
                    else videoTransceiver.direction = "sendonly";
                } else if (videoTransceiver.direction === "recvonly") {
                    if (videoTransceiver.setDirection) videoTransceiver.setDirection("inactive");
                    else videoTransceiver.direction = "inactive";
                }
            } else if (offerOptions.offerToReceiveVideo === true && !videoTransceiver) this.addTransceiver("video", {
                direction: "recvonly"
            });
        }
        return origCreateOffer.apply(this, arguments);
    };
}
function $b5603e2a25579e83$export$857cd739a7b795d2(window) {
    if (typeof window !== "object" || window.AudioContext) return;
    window.AudioContext = window.webkitAudioContext;
}


var $1e725cbbdf747411$exports = {};

$parcel$export($1e725cbbdf747411$exports, "shimRTCIceCandidate", function () { return $1e725cbbdf747411$export$cf133661e444ccfe; });
$parcel$export($1e725cbbdf747411$exports, "shimRTCIceCandidateRelayProtocol", function () { return $1e725cbbdf747411$export$fdafb8d8280e29b5; });
$parcel$export($1e725cbbdf747411$exports, "shimMaxMessageSize", function () { return $1e725cbbdf747411$export$a99147c78a56edc4; });
$parcel$export($1e725cbbdf747411$exports, "shimSendThrowTypeError", function () { return $1e725cbbdf747411$export$d461c8d5c5db5da7; });
$parcel$export($1e725cbbdf747411$exports, "shimConnectionState", function () { return $1e725cbbdf747411$export$63bb816cc75460; });
$parcel$export($1e725cbbdf747411$exports, "removeExtmapAllowMixed", function () { return $1e725cbbdf747411$export$a57d114344295149; });
$parcel$export($1e725cbbdf747411$exports, "shimAddIceCandidateNullOrEmpty", function () { return $1e725cbbdf747411$export$51d5e40b48c771c7; });
$parcel$export($1e725cbbdf747411$exports, "shimParameterlessSetLocalDescription", function () { return $1e725cbbdf747411$export$7170d04e59f9d553; });
/*
 *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree.
 */ /* eslint-env node */ var $b2727632138354b2$exports = {};
/* eslint-env node */ "use strict";
// SDP helpers.
var $b2727632138354b2$var$SDPUtils = {};
// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
$b2727632138354b2$var$SDPUtils.generateIdentifier = function() {
    return Math.random().toString(36).substring(2, 12);
};
// The RTCP CNAME used by all peerconnections from the same JS.
$b2727632138354b2$var$SDPUtils.localCName = $b2727632138354b2$var$SDPUtils.generateIdentifier();
// Splits SDP into lines, dealing with both CRLF and LF.
$b2727632138354b2$var$SDPUtils.splitLines = function(blob) {
    return blob.trim().split("\n").map(function(line) {
        return line.trim();
    });
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
$b2727632138354b2$var$SDPUtils.splitSections = function(blob) {
    var parts = blob.split("\nm=");
    return parts.map(function(part, index) {
        return (index > 0 ? "m=" + part : part).trim() + "\r\n";
    });
};
// Returns the session description.
$b2727632138354b2$var$SDPUtils.getDescription = function(blob) {
    var sections = $b2727632138354b2$var$SDPUtils.splitSections(blob);
    return sections && sections[0];
};
// Returns the individual media sections.
$b2727632138354b2$var$SDPUtils.getMediaSections = function(blob) {
    var sections = $b2727632138354b2$var$SDPUtils.splitSections(blob);
    sections.shift();
    return sections;
};
// Returns lines that start with a certain prefix.
$b2727632138354b2$var$SDPUtils.matchPrefix = function(blob, prefix) {
    return $b2727632138354b2$var$SDPUtils.splitLines(blob).filter(function(line) {
        return line.indexOf(prefix) === 0;
    });
};
// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
// Input can be prefixed with a=.
$b2727632138354b2$var$SDPUtils.parseCandidate = function(line) {
    var parts;
    // Parse both variants.
    if (line.indexOf("a=candidate:") === 0) parts = line.substring(12).split(" ");
    else parts = line.substring(10).split(" ");
    var candidate = {
        foundation: parts[0],
        component: {
            1: "rtp",
            2: "rtcp"
        }[parts[1]] || parts[1],
        protocol: parts[2].toLowerCase(),
        priority: parseInt(parts[3], 10),
        ip: parts[4],
        address: parts[4],
        port: parseInt(parts[5], 10),
        // skip parts[6] == 'typ'
        type: parts[7]
    };
    for(var i = 8; i < parts.length; i += 2)switch(parts[i]){
        case "raddr":
            candidate.relatedAddress = parts[i + 1];
            break;
        case "rport":
            candidate.relatedPort = parseInt(parts[i + 1], 10);
            break;
        case "tcptype":
            candidate.tcpType = parts[i + 1];
            break;
        case "ufrag":
            candidate.ufrag = parts[i + 1]; // for backward compatibility.
            candidate.usernameFragment = parts[i + 1];
            break;
        default:
            if (candidate[parts[i]] === undefined) candidate[parts[i]] = parts[i + 1];
            break;
    }
    return candidate;
};
// Translates a candidate object into SDP candidate attribute.
// This does not include the a= prefix!
$b2727632138354b2$var$SDPUtils.writeCandidate = function(candidate) {
    var sdp = [];
    sdp.push(candidate.foundation);
    var component = candidate.component;
    if (component === "rtp") sdp.push(1);
    else if (component === "rtcp") sdp.push(2);
    else sdp.push(component);
    sdp.push(candidate.protocol.toUpperCase());
    sdp.push(candidate.priority);
    sdp.push(candidate.address || candidate.ip);
    sdp.push(candidate.port);
    var type = candidate.type;
    sdp.push("typ");
    sdp.push(type);
    if (type !== "host" && candidate.relatedAddress && candidate.relatedPort) {
        sdp.push("raddr");
        sdp.push(candidate.relatedAddress);
        sdp.push("rport");
        sdp.push(candidate.relatedPort);
    }
    if (candidate.tcpType && candidate.protocol.toLowerCase() === "tcp") {
        sdp.push("tcptype");
        sdp.push(candidate.tcpType);
    }
    if (candidate.usernameFragment || candidate.ufrag) {
        sdp.push("ufrag");
        sdp.push(candidate.usernameFragment || candidate.ufrag);
    }
    return "candidate:" + sdp.join(" ");
};
// Parses an ice-options line, returns an array of option tags.
// Sample input:
// a=ice-options:foo bar
$b2727632138354b2$var$SDPUtils.parseIceOptions = function(line) {
    return line.substring(14).split(" ");
};
// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
$b2727632138354b2$var$SDPUtils.parseRtpMap = function(line) {
    var parts = line.substring(9).split(" ");
    var parsed = {
        payloadType: parseInt(parts.shift(), 10)
    };
    parts = parts[0].split("/");
    parsed.name = parts[0];
    parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
    parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
    // legacy alias, got renamed back to channels in ORTC.
    parsed.numChannels = parsed.channels;
    return parsed;
};
// Generates a rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
$b2727632138354b2$var$SDPUtils.writeRtpMap = function(codec) {
    var pt = codec.payloadType;
    if (codec.preferredPayloadType !== undefined) pt = codec.preferredPayloadType;
    var channels = codec.channels || codec.numChannels || 1;
    return "a=rtpmap:" + pt + " " + codec.name + "/" + codec.clockRate + (channels !== 1 ? "/" + channels : "") + "\r\n";
};
// Parses a extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
$b2727632138354b2$var$SDPUtils.parseExtmap = function(line) {
    var parts = line.substring(9).split(" ");
    return {
        id: parseInt(parts[0], 10),
        direction: parts[0].indexOf("/") > 0 ? parts[0].split("/")[1] : "sendrecv",
        uri: parts[1],
        attributes: parts.slice(2).join(" ")
    };
};
// Generates an extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
$b2727632138354b2$var$SDPUtils.writeExtmap = function(headerExtension) {
    return "a=extmap:" + (headerExtension.id || headerExtension.preferredId) + (headerExtension.direction && headerExtension.direction !== "sendrecv" ? "/" + headerExtension.direction : "") + " " + headerExtension.uri + (headerExtension.attributes ? " " + headerExtension.attributes : "") + "\r\n";
};
// Parses a fmtp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
$b2727632138354b2$var$SDPUtils.parseFmtp = function(line) {
    var parsed = {};
    var kv;
    var parts = line.substring(line.indexOf(" ") + 1).split(";");
    for(var j = 0; j < parts.length; j++){
        kv = parts[j].trim().split("=");
        parsed[kv[0].trim()] = kv[1];
    }
    return parsed;
};
// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
$b2727632138354b2$var$SDPUtils.writeFmtp = function(codec) {
    var line = "";
    var pt = codec.payloadType;
    if (codec.preferredPayloadType !== undefined) pt = codec.preferredPayloadType;
    if (codec.parameters && Object.keys(codec.parameters).length) {
        var params = [];
        Object.keys(codec.parameters).forEach(function(param) {
            if (codec.parameters[param] !== undefined) params.push(param + "=" + codec.parameters[param]);
            else params.push(param);
        });
        line += "a=fmtp:" + pt + " " + params.join(";") + "\r\n";
    }
    return line;
};
// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
$b2727632138354b2$var$SDPUtils.parseRtcpFb = function(line) {
    var parts = line.substring(line.indexOf(" ") + 1).split(" ");
    return {
        type: parts.shift(),
        parameter: parts.join(" ")
    };
};
// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
$b2727632138354b2$var$SDPUtils.writeRtcpFb = function(codec) {
    var lines = "";
    var pt = codec.payloadType;
    if (codec.preferredPayloadType !== undefined) pt = codec.preferredPayloadType;
    if (codec.rtcpFeedback && codec.rtcpFeedback.length) // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(function(fb) {
        lines += "a=rtcp-fb:" + pt + " " + fb.type + (fb.parameter && fb.parameter.length ? " " + fb.parameter : "") + "\r\n";
    });
    return lines;
};
// Parses a RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
$b2727632138354b2$var$SDPUtils.parseSsrcMedia = function(line) {
    var sp = line.indexOf(" ");
    var parts = {
        ssrc: parseInt(line.substring(7, sp), 10)
    };
    var colon = line.indexOf(":", sp);
    if (colon > -1) {
        parts.attribute = line.substring(sp + 1, colon);
        parts.value = line.substring(colon + 1);
    } else parts.attribute = line.substring(sp + 1);
    return parts;
};
// Parse a ssrc-group line (see RFC 5576). Sample input:
// a=ssrc-group:semantics 12 34
$b2727632138354b2$var$SDPUtils.parseSsrcGroup = function(line) {
    var parts = line.substring(13).split(" ");
    return {
        semantics: parts.shift(),
        ssrcs: parts.map(function(ssrc) {
            return parseInt(ssrc, 10);
        })
    };
};
// Extracts the MID (RFC 5888) from a media section.
// Returns the MID or undefined if no mid line was found.
$b2727632138354b2$var$SDPUtils.getMid = function(mediaSection) {
    var mid = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "a=mid:")[0];
    if (mid) return mid.substring(6);
};
// Parses a fingerprint line for DTLS-SRTP.
$b2727632138354b2$var$SDPUtils.parseFingerprint = function(line) {
    var parts = line.substring(14).split(" ");
    return {
        algorithm: parts[0].toLowerCase(),
        value: parts[1].toUpperCase()
    };
};
// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
$b2727632138354b2$var$SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
    var lines = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection + sessionpart, "a=fingerprint:");
    // Note: a=setup line is ignored since we use the 'auto' role in Edge.
    return {
        role: "auto",
        fingerprints: lines.map($b2727632138354b2$var$SDPUtils.parseFingerprint)
    };
};
// Serializes DTLS parameters to SDP.
$b2727632138354b2$var$SDPUtils.writeDtlsParameters = function(params, setupType) {
    var sdp = "a=setup:" + setupType + "\r\n";
    params.fingerprints.forEach(function(fp) {
        sdp += "a=fingerprint:" + fp.algorithm + " " + fp.value + "\r\n";
    });
    return sdp;
};
// Parses a=crypto lines into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
$b2727632138354b2$var$SDPUtils.parseCryptoLine = function(line) {
    var parts = line.substring(9).split(" ");
    return {
        tag: parseInt(parts[0], 10),
        cryptoSuite: parts[1],
        keyParams: parts[2],
        sessionParams: parts.slice(3)
    };
};
$b2727632138354b2$var$SDPUtils.writeCryptoLine = function(parameters) {
    return "a=crypto:" + parameters.tag + " " + parameters.cryptoSuite + " " + (typeof parameters.keyParams === "object" ? $b2727632138354b2$var$SDPUtils.writeCryptoKeyParams(parameters.keyParams) : parameters.keyParams) + (parameters.sessionParams ? " " + parameters.sessionParams.join(" ") : "") + "\r\n";
};
// Parses the crypto key parameters into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
$b2727632138354b2$var$SDPUtils.parseCryptoKeyParams = function(keyParams) {
    if (keyParams.indexOf("inline:") !== 0) return null;
    var parts = keyParams.substring(7).split("|");
    return {
        keyMethod: "inline",
        keySalt: parts[0],
        lifeTime: parts[1],
        mkiValue: parts[2] ? parts[2].split(":")[0] : undefined,
        mkiLength: parts[2] ? parts[2].split(":")[1] : undefined
    };
};
$b2727632138354b2$var$SDPUtils.writeCryptoKeyParams = function(keyParams) {
    return keyParams.keyMethod + ":" + keyParams.keySalt + (keyParams.lifeTime ? "|" + keyParams.lifeTime : "") + (keyParams.mkiValue && keyParams.mkiLength ? "|" + keyParams.mkiValue + ":" + keyParams.mkiLength : "");
};
// Extracts all SDES parameters.
$b2727632138354b2$var$SDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {
    var lines = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection + sessionpart, "a=crypto:");
    return lines.map($b2727632138354b2$var$SDPUtils.parseCryptoLine);
};
// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
$b2727632138354b2$var$SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
    var ufrag = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection + sessionpart, "a=ice-ufrag:")[0];
    var pwd = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection + sessionpart, "a=ice-pwd:")[0];
    if (!(ufrag && pwd)) return null;
    return {
        usernameFragment: ufrag.substring(12),
        password: pwd.substring(10)
    };
};
// Serializes ICE parameters to SDP.
$b2727632138354b2$var$SDPUtils.writeIceParameters = function(params) {
    var sdp = "a=ice-ufrag:" + params.usernameFragment + "\r\n" + "a=ice-pwd:" + params.password + "\r\n";
    if (params.iceLite) sdp += "a=ice-lite\r\n";
    return sdp;
};
// Parses the SDP media section and returns RTCRtpParameters.
$b2727632138354b2$var$SDPUtils.parseRtpParameters = function(mediaSection) {
    var description = {
        codecs: [],
        headerExtensions: [],
        fecMechanisms: [],
        rtcp: []
    };
    var lines = $b2727632138354b2$var$SDPUtils.splitLines(mediaSection);
    var mline = lines[0].split(" ");
    for(var i = 3; i < mline.length; i++){
        var pt = mline[i];
        var rtpmapline = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "a=rtpmap:" + pt + " ")[0];
        if (rtpmapline) {
            var codec = $b2727632138354b2$var$SDPUtils.parseRtpMap(rtpmapline);
            var fmtps = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "a=fmtp:" + pt + " ");
            // Only the first a=fmtp:<pt> is considered.
            codec.parameters = fmtps.length ? $b2727632138354b2$var$SDPUtils.parseFmtp(fmtps[0]) : {};
            codec.rtcpFeedback = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "a=rtcp-fb:" + pt + " ").map($b2727632138354b2$var$SDPUtils.parseRtcpFb);
            description.codecs.push(codec);
            // parse FEC mechanisms from rtpmap lines.
            switch(codec.name.toUpperCase()){
                case "RED":
                case "ULPFEC":
                    description.fecMechanisms.push(codec.name.toUpperCase());
                    break;
                default:
                    break;
            }
        }
    }
    $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "a=extmap:").forEach(function(line) {
        description.headerExtensions.push($b2727632138354b2$var$SDPUtils.parseExtmap(line));
    });
    var wildcardRtcpFb = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "a=rtcp-fb:* ").map($b2727632138354b2$var$SDPUtils.parseRtcpFb);
    description.codecs.forEach(function(codec) {
        wildcardRtcpFb.forEach(function(fb) {
            var duplicate = codec.rtcpFeedback.find(function(existingFeedback) {
                return existingFeedback.type === fb.type && existingFeedback.parameter === fb.parameter;
            });
            if (!duplicate) codec.rtcpFeedback.push(fb);
        });
    });
    // FIXME: parse rtcp.
    return description;
};
// Generates parts of the SDP media section describing the capabilities /
// parameters.
$b2727632138354b2$var$SDPUtils.writeRtpDescription = function(kind, caps) {
    var sdp = "";
    // Build the mline.
    sdp += "m=" + kind + " ";
    sdp += caps.codecs.length > 0 ? "9" : "0"; // reject if no codecs.
    sdp += " UDP/TLS/RTP/SAVPF ";
    sdp += caps.codecs.map(function(codec) {
        if (codec.preferredPayloadType !== undefined) return codec.preferredPayloadType;
        return codec.payloadType;
    }).join(" ") + "\r\n";
    sdp += "c=IN IP4 0.0.0.0\r\n";
    sdp += "a=rtcp:9 IN IP4 0.0.0.0\r\n";
    // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
    caps.codecs.forEach(function(codec) {
        sdp += $b2727632138354b2$var$SDPUtils.writeRtpMap(codec);
        sdp += $b2727632138354b2$var$SDPUtils.writeFmtp(codec);
        sdp += $b2727632138354b2$var$SDPUtils.writeRtcpFb(codec);
    });
    var maxptime = 0;
    caps.codecs.forEach(function(codec) {
        if (codec.maxptime > maxptime) maxptime = codec.maxptime;
    });
    if (maxptime > 0) sdp += "a=maxptime:" + maxptime + "\r\n";
    if (caps.headerExtensions) caps.headerExtensions.forEach(function(extension) {
        sdp += $b2727632138354b2$var$SDPUtils.writeExtmap(extension);
    });
    // FIXME: write fecMechanisms.
    return sdp;
};
// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
$b2727632138354b2$var$SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
    var encodingParameters = [];
    var description = $b2727632138354b2$var$SDPUtils.parseRtpParameters(mediaSection);
    var hasRed = description.fecMechanisms.indexOf("RED") !== -1;
    var hasUlpfec = description.fecMechanisms.indexOf("ULPFEC") !== -1;
    // filter a=ssrc:... cname:, ignore PlanB-msid
    var ssrcs = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "a=ssrc:").map(function(line) {
        return $b2727632138354b2$var$SDPUtils.parseSsrcMedia(line);
    }).filter(function(parts) {
        return parts.attribute === "cname";
    });
    var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
    var secondarySsrc;
    var flows = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "a=ssrc-group:FID").map(function(line) {
        var parts = line.substring(17).split(" ");
        return parts.map(function(part) {
            return parseInt(part, 10);
        });
    });
    if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) secondarySsrc = flows[0][1];
    description.codecs.forEach(function(codec) {
        if (codec.name.toUpperCase() === "RTX" && codec.parameters.apt) {
            var encParam = {
                ssrc: primarySsrc,
                codecPayloadType: parseInt(codec.parameters.apt, 10)
            };
            if (primarySsrc && secondarySsrc) encParam.rtx = {
                ssrc: secondarySsrc
            };
            encodingParameters.push(encParam);
            if (hasRed) {
                encParam = JSON.parse(JSON.stringify(encParam));
                encParam.fec = {
                    ssrc: primarySsrc,
                    mechanism: hasUlpfec ? "red+ulpfec" : "red"
                };
                encodingParameters.push(encParam);
            }
        }
    });
    if (encodingParameters.length === 0 && primarySsrc) encodingParameters.push({
        ssrc: primarySsrc
    });
    // we support both b=AS and b=TIAS but interpret AS as TIAS.
    var bandwidth = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "b=");
    if (bandwidth.length) {
        if (bandwidth[0].indexOf("b=TIAS:") === 0) bandwidth = parseInt(bandwidth[0].substring(7), 10);
        else if (bandwidth[0].indexOf("b=AS:") === 0) // use formula from JSEP to convert b=AS to TIAS value.
        bandwidth = parseInt(bandwidth[0].substring(5), 10) * 950 - 16000;
        else bandwidth = undefined;
        encodingParameters.forEach(function(params) {
            params.maxBitrate = bandwidth;
        });
    }
    return encodingParameters;
};
// parses http://draft.ortc.org/#rtcrtcpparameters*
$b2727632138354b2$var$SDPUtils.parseRtcpParameters = function(mediaSection) {
    var rtcpParameters = {};
    // Gets the first SSRC. Note that with RTX there might be multiple
    // SSRCs.
    var remoteSsrc = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "a=ssrc:").map(function(line) {
        return $b2727632138354b2$var$SDPUtils.parseSsrcMedia(line);
    }).filter(function(obj) {
        return obj.attribute === "cname";
    })[0];
    if (remoteSsrc) {
        rtcpParameters.cname = remoteSsrc.value;
        rtcpParameters.ssrc = remoteSsrc.ssrc;
    }
    // Edge uses the compound attribute instead of reducedSize
    // compound is !reducedSize
    var rsize = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "a=rtcp-rsize");
    rtcpParameters.reducedSize = rsize.length > 0;
    rtcpParameters.compound = rsize.length === 0;
    // parses the rtcp-mux attrіbute.
    // Note that Edge does not support unmuxed RTCP.
    var mux = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "a=rtcp-mux");
    rtcpParameters.mux = mux.length > 0;
    return rtcpParameters;
};
$b2727632138354b2$var$SDPUtils.writeRtcpParameters = function(rtcpParameters) {
    var sdp = "";
    if (rtcpParameters.reducedSize) sdp += "a=rtcp-rsize\r\n";
    if (rtcpParameters.mux) sdp += "a=rtcp-mux\r\n";
    if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) sdp += "a=ssrc:" + rtcpParameters.ssrc + " cname:" + rtcpParameters.cname + "\r\n";
    return sdp;
};
// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
$b2727632138354b2$var$SDPUtils.parseMsid = function(mediaSection) {
    var parts;
    var spec = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "a=msid:");
    if (spec.length === 1) {
        parts = spec[0].substring(7).split(" ");
        return {
            stream: parts[0],
            track: parts[1]
        };
    }
    var planB = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "a=ssrc:").map(function(line) {
        return $b2727632138354b2$var$SDPUtils.parseSsrcMedia(line);
    }).filter(function(msidParts) {
        return msidParts.attribute === "msid";
    });
    if (planB.length > 0) {
        parts = planB[0].value.split(" ");
        return {
            stream: parts[0],
            track: parts[1]
        };
    }
};
// SCTP
// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
// to draft-ietf-mmusic-sctp-sdp-05
$b2727632138354b2$var$SDPUtils.parseSctpDescription = function(mediaSection) {
    var mline = $b2727632138354b2$var$SDPUtils.parseMLine(mediaSection);
    var maxSizeLine = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "a=max-message-size:");
    var maxMessageSize;
    if (maxSizeLine.length > 0) maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);
    if (isNaN(maxMessageSize)) maxMessageSize = 65536;
    var sctpPort = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "a=sctp-port:");
    if (sctpPort.length > 0) return {
        port: parseInt(sctpPort[0].substring(12), 10),
        protocol: mline.fmt,
        maxMessageSize: maxMessageSize
    };
    var sctpMapLines = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "a=sctpmap:");
    if (sctpMapLines.length > 0) {
        var parts = sctpMapLines[0].substring(10).split(" ");
        return {
            port: parseInt(parts[0], 10),
            protocol: parts[1],
            maxMessageSize: maxMessageSize
        };
    }
};
// SCTP
// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
// support by now receiving in this format, unless we originally parsed
// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
// protocol of DTLS/SCTP -- without UDP/ or TCP/)
$b2727632138354b2$var$SDPUtils.writeSctpDescription = function(media, sctp) {
    var output = [];
    if (media.protocol !== "DTLS/SCTP") output = [
        "m=" + media.kind + " 9 " + media.protocol + " " + sctp.protocol + "\r\n",
        "c=IN IP4 0.0.0.0\r\n",
        "a=sctp-port:" + sctp.port + "\r\n"
    ];
    else output = [
        "m=" + media.kind + " 9 " + media.protocol + " " + sctp.port + "\r\n",
        "c=IN IP4 0.0.0.0\r\n",
        "a=sctpmap:" + sctp.port + " " + sctp.protocol + " 65535\r\n"
    ];
    if (sctp.maxMessageSize !== undefined) output.push("a=max-message-size:" + sctp.maxMessageSize + "\r\n");
    return output.join("");
};
// Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range
$b2727632138354b2$var$SDPUtils.generateSessionId = function() {
    return Math.random().toString().substr(2, 22);
};
// Write boiler plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
// sessUser is optional and defaults to 'thisisadapterortc'
$b2727632138354b2$var$SDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {
    var sessionId;
    var version = sessVer !== undefined ? sessVer : 2;
    if (sessId) sessionId = sessId;
    else sessionId = $b2727632138354b2$var$SDPUtils.generateSessionId();
    var user = sessUser || "thisisadapterortc";
    // FIXME: sess-id should be an NTP timestamp.
    return "v=0\r\no=" + user + " " + sessionId + " " + version + " IN IP4 127.0.0.1\r\n" + "s=-\r\n" + "t=0 0\r\n";
};
// Gets the direction from the mediaSection or the sessionpart.
$b2727632138354b2$var$SDPUtils.getDirection = function(mediaSection, sessionpart) {
    // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
    var lines = $b2727632138354b2$var$SDPUtils.splitLines(mediaSection);
    for(var i = 0; i < lines.length; i++)switch(lines[i]){
        case "a=sendrecv":
        case "a=sendonly":
        case "a=recvonly":
        case "a=inactive":
            return lines[i].substring(2);
        default:
    }
    if (sessionpart) return $b2727632138354b2$var$SDPUtils.getDirection(sessionpart);
    return "sendrecv";
};
$b2727632138354b2$var$SDPUtils.getKind = function(mediaSection) {
    var lines = $b2727632138354b2$var$SDPUtils.splitLines(mediaSection);
    var mline = lines[0].split(" ");
    return mline[0].substring(2);
};
$b2727632138354b2$var$SDPUtils.isRejected = function(mediaSection) {
    return mediaSection.split(" ", 2)[1] === "0";
};
$b2727632138354b2$var$SDPUtils.parseMLine = function(mediaSection) {
    var lines = $b2727632138354b2$var$SDPUtils.splitLines(mediaSection);
    var parts = lines[0].substring(2).split(" ");
    return {
        kind: parts[0],
        port: parseInt(parts[1], 10),
        protocol: parts[2],
        fmt: parts.slice(3).join(" ")
    };
};
$b2727632138354b2$var$SDPUtils.parseOLine = function(mediaSection) {
    var line = $b2727632138354b2$var$SDPUtils.matchPrefix(mediaSection, "o=")[0];
    var parts = line.substring(2).split(" ");
    return {
        username: parts[0],
        sessionId: parts[1],
        sessionVersion: parseInt(parts[2], 10),
        netType: parts[3],
        addressType: parts[4],
        address: parts[5]
    };
};
// a very naive interpretation of a valid SDP.
$b2727632138354b2$var$SDPUtils.isValidSDP = function(blob) {
    if (typeof blob !== "string" || blob.length === 0) return false;
    var lines = $b2727632138354b2$var$SDPUtils.splitLines(blob);
    for(var i = 0; i < lines.length; i++){
        if (lines[i].length < 2 || lines[i].charAt(1) !== "=") return false;
    // TODO: check the modifier a bit more.
    }
    return true;
};
$b2727632138354b2$exports = $b2727632138354b2$var$SDPUtils;



"use strict";
function $1e725cbbdf747411$export$cf133661e444ccfe(window) {
    // foundation is arbitrarily chosen as an indicator for full support for
    // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface
    if (!window.RTCIceCandidate || window.RTCIceCandidate && "foundation" in window.RTCIceCandidate.prototype) return;
    var NativeRTCIceCandidate = window.RTCIceCandidate;
    window.RTCIceCandidate = function RTCIceCandidate(args) {
        // Remove the a= which shouldn't be part of the candidate string.
        if (typeof args === "object" && args.candidate && args.candidate.indexOf("a=") === 0) {
            args = JSON.parse(JSON.stringify(args));
            args.candidate = args.candidate.substr(2);
        }
        if (args.candidate && args.candidate.length) {
            // Augment the native candidate with the parsed fields.
            var nativeCandidate = new NativeRTCIceCandidate(args);
            var parsedCandidate = (0, (/*@__PURE__*/$parcel$interopDefault($b2727632138354b2$exports))).parseCandidate(args.candidate);
            var augmentedCandidate = Object.assign(nativeCandidate, parsedCandidate);
            // Add a serializer that does not serialize the extra attributes.
            augmentedCandidate.toJSON = function toJSON() {
                return {
                    candidate: augmentedCandidate.candidate,
                    sdpMid: augmentedCandidate.sdpMid,
                    sdpMLineIndex: augmentedCandidate.sdpMLineIndex,
                    usernameFragment: augmentedCandidate.usernameFragment
                };
            };
            return augmentedCandidate;
        }
        return new NativeRTCIceCandidate(args);
    };
    window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;
    // Hook up the augmented candidate in onicecandidate and
    // addEventListener('icecandidate', ...)
    $993722e8c7a9e5a7$export$1f48841962b828b1(window, "icecandidate", function(e) {
        if (e.candidate) Object.defineProperty(e, "candidate", {
            value: new window.RTCIceCandidate(e.candidate),
            writable: "false"
        });
        return e;
    });
}
function $1e725cbbdf747411$export$fdafb8d8280e29b5(window) {
    if (!window.RTCIceCandidate || window.RTCIceCandidate && "relayProtocol" in window.RTCIceCandidate.prototype) return;
    // Hook up the augmented candidate in onicecandidate and
    // addEventListener('icecandidate', ...)
    $993722e8c7a9e5a7$export$1f48841962b828b1(window, "icecandidate", function(e) {
        if (e.candidate) {
            var parsedCandidate = (0, (/*@__PURE__*/$parcel$interopDefault($b2727632138354b2$exports))).parseCandidate(e.candidate.candidate);
            if (parsedCandidate.type === "relay") // This is a libwebrtc-specific mapping of local type preference
            // to relayProtocol.
            e.candidate.relayProtocol = ({
                0: "tls",
                1: "tcp",
                2: "udp"
            })[parsedCandidate.priority >> 24];
        }
        return e;
    });
}
function $1e725cbbdf747411$export$a99147c78a56edc4(window, browserDetails) {
    if (!window.RTCPeerConnection) return;
    if (!("sctp" in window.RTCPeerConnection.prototype)) Object.defineProperty(window.RTCPeerConnection.prototype, "sctp", {
        get: function() {
            return typeof this._sctp === "undefined" ? null : this._sctp;
        }
    });
    var sctpInDescription = function sctpInDescription(description) {
        if (!description || !description.sdp) return false;
        var sections = (0, (/*@__PURE__*/$parcel$interopDefault($b2727632138354b2$exports))).splitSections(description.sdp);
        sections.shift();
        return sections.some(function(mediaSection) {
            var mLine = (0, (/*@__PURE__*/$parcel$interopDefault($b2727632138354b2$exports))).parseMLine(mediaSection);
            return mLine && mLine.kind === "application" && mLine.protocol.indexOf("SCTP") !== -1;
        });
    };
    var getRemoteFirefoxVersion = function getRemoteFirefoxVersion(description) {
        // TODO: Is there a better solution for detecting Firefox?
        var match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
        if (match === null || match.length < 2) return -1;
        var version = parseInt(match[1], 10);
        // Test for NaN (yes, this is ugly)
        return version !== version ? -1 : version;
    };
    var getCanSendMaxMessageSize = function getCanSendMaxMessageSize(remoteIsFirefox) {
        // Every implementation we know can send at least 64 KiB.
        // Note: Although Chrome is technically able to send up to 256 KiB, the
        //       data does not reach the other peer reliably.
        //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419
        var canSendMaxMessageSize = 65536;
        if (browserDetails.browser === "firefox") {
            if (browserDetails.version < 57) {
                if (remoteIsFirefox === -1) // FF < 57 will send in 16 KiB chunks using the deprecated PPID
                // fragmentation.
                canSendMaxMessageSize = 16384;
                else // However, other FF (and RAWRTC) can reassemble PPID-fragmented
                // messages. Thus, supporting ~2 GiB when sending.
                canSendMaxMessageSize = 2147483637;
            } else if (browserDetails.version < 60) // Currently, all FF >= 57 will reset the remote maximum message size
            // to the default value when a data channel is created at a later
            // stage. :(
            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
            canSendMaxMessageSize = browserDetails.version === 57 ? 65535 : 65536;
            else // FF >= 60 supports sending ~2 GiB
            canSendMaxMessageSize = 2147483637;
        }
        return canSendMaxMessageSize;
    };
    var getMaxMessageSize = function getMaxMessageSize(description, remoteIsFirefox) {
        // Note: 65536 bytes is the default value from the SDP spec. Also,
        //       every implementation we know supports receiving 65536 bytes.
        var maxMessageSize = 65536;
        // FF 57 has a slightly incorrect default remote max message size, so
        // we need to adjust it here to avoid a failure when sending.
        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697
        if (browserDetails.browser === "firefox" && browserDetails.version === 57) maxMessageSize = 65535;
        var match = (0, (/*@__PURE__*/$parcel$interopDefault($b2727632138354b2$exports))).matchPrefix(description.sdp, "a=max-message-size:");
        if (match.length > 0) maxMessageSize = parseInt(match[0].substr(19), 10);
        else if (browserDetails.browser === "firefox" && remoteIsFirefox !== -1) // If the maximum message size is not present in the remote SDP and
        // both local and remote are Firefox, the remote peer can receive
        // ~2 GiB.
        maxMessageSize = 2147483637;
        return maxMessageSize;
    };
    var origSetRemoteDescription = window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription() {
        this._sctp = null;
        // Chrome decided to not expose .sctp in plan-b mode.
        // As usual, adapter.js has to do an 'ugly worakaround'
        // to cover up the mess.
        if (browserDetails.browser === "chrome" && browserDetails.version >= 76) {
            var sdpSemantics = this.getConfiguration().sdpSemantics;
            if (sdpSemantics === "plan-b") Object.defineProperty(this, "sctp", {
                get: function() {
                    return typeof this._sctp === "undefined" ? null : this._sctp;
                },
                enumerable: true,
                configurable: true
            });
        }
        if (sctpInDescription(arguments[0])) {
            // Check if the remote is FF.
            var isFirefox = getRemoteFirefoxVersion(arguments[0]);
            // Get the maximum message size the local peer is capable of sending
            var canSendMMS = getCanSendMaxMessageSize(isFirefox);
            // Get the maximum message size of the remote peer.
            var remoteMMS = getMaxMessageSize(arguments[0], isFirefox);
            // Determine final maximum message size
            var maxMessageSize;
            if (canSendMMS === 0 && remoteMMS === 0) maxMessageSize = Number.POSITIVE_INFINITY;
            else if (canSendMMS === 0 || remoteMMS === 0) maxMessageSize = Math.max(canSendMMS, remoteMMS);
            else maxMessageSize = Math.min(canSendMMS, remoteMMS);
            // Create a dummy RTCSctpTransport object and the 'maxMessageSize'
            // attribute.
            var sctp = {};
            Object.defineProperty(sctp, "maxMessageSize", {
                get: function() {
                    return maxMessageSize;
                }
            });
            this._sctp = sctp;
        }
        return origSetRemoteDescription.apply(this, arguments);
    };
}
function $1e725cbbdf747411$export$d461c8d5c5db5da7(window) {
    var wrapDcSend = // Note: Although Firefox >= 57 has a native implementation, the maximum
    //       message size can be reset for all data channels at a later stage.
    //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831
    function wrapDcSend(dc, pc) {
        var origDataChannelSend = dc.send;
        dc.send = function send() {
            var data = arguments[0];
            var length = data.length || data.size || data.byteLength;
            if (dc.readyState === "open" && pc.sctp && length > pc.sctp.maxMessageSize) throw new TypeError("Message too large (can send a maximum of " + pc.sctp.maxMessageSize + " bytes)");
            return origDataChannelSend.apply(dc, arguments);
        };
    };
    if (!(window.RTCPeerConnection && "createDataChannel" in window.RTCPeerConnection.prototype)) return;
    var origCreateDataChannel = window.RTCPeerConnection.prototype.createDataChannel;
    window.RTCPeerConnection.prototype.createDataChannel = function createDataChannel() {
        var dataChannel = origCreateDataChannel.apply(this, arguments);
        wrapDcSend(dataChannel, this);
        return dataChannel;
    };
    $993722e8c7a9e5a7$export$1f48841962b828b1(window, "datachannel", function(e) {
        wrapDcSend(e.channel, e.target);
        return e;
    });
}
function $1e725cbbdf747411$export$63bb816cc75460(window) {
    if (!window.RTCPeerConnection || "connectionState" in window.RTCPeerConnection.prototype) return;
    var proto = window.RTCPeerConnection.prototype;
    Object.defineProperty(proto, "connectionState", {
        get: function() {
            return ({
                completed: "connected",
                checking: "connecting"
            })[this.iceConnectionState] || this.iceConnectionState;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(proto, "onconnectionstatechange", {
        get: function() {
            return this._onconnectionstatechange || null;
        },
        set: function(cb) {
            if (this._onconnectionstatechange) {
                this.removeEventListener("connectionstatechange", this._onconnectionstatechange);
                delete this._onconnectionstatechange;
            }
            if (cb) this.addEventListener("connectionstatechange", this._onconnectionstatechange = cb);
        },
        enumerable: true,
        configurable: true
    });
    [
        "setLocalDescription",
        "setRemoteDescription"
    ].forEach(function(method) {
        var origMethod = proto[method];
        proto[method] = function() {
            if (!this._connectionstatechangepoly) {
                this._connectionstatechangepoly = function(e) {
                    var pc = e.target;
                    if (pc._lastConnectionState !== pc.connectionState) {
                        pc._lastConnectionState = pc.connectionState;
                        var newEvent = new Event("connectionstatechange", e);
                        pc.dispatchEvent(newEvent);
                    }
                    return e;
                };
                this.addEventListener("iceconnectionstatechange", this._connectionstatechangepoly);
            }
            return origMethod.apply(this, arguments);
        };
    });
}
function $1e725cbbdf747411$export$a57d114344295149(window, browserDetails) {
    /* remove a=extmap-allow-mixed for webrtc.org < M71 */ if (!window.RTCPeerConnection) return;
    if (browserDetails.browser === "chrome" && browserDetails.version >= 71) return;
    if (browserDetails.browser === "safari" && browserDetails.version >= 605) return;
    var nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;
    window.RTCPeerConnection.prototype.setRemoteDescription = function setRemoteDescription(desc) {
        if (desc && desc.sdp && desc.sdp.indexOf("\na=extmap-allow-mixed") !== -1) {
            var sdp = desc.sdp.split("\n").filter(function(line) {
                return line.trim() !== "a=extmap-allow-mixed";
            }).join("\n");
            // Safari enforces read-only-ness of RTCSessionDescription fields.
            if (window.RTCSessionDescription && desc instanceof window.RTCSessionDescription) arguments[0] = new window.RTCSessionDescription({
                type: desc.type,
                sdp: sdp
            });
            else desc.sdp = sdp;
        }
        return nativeSRD.apply(this, arguments);
    };
}
function $1e725cbbdf747411$export$51d5e40b48c771c7(window, browserDetails) {
    // Support for addIceCandidate(null or undefined)
    // as well as addIceCandidate({candidate: "", ...})
    // https://bugs.chromium.org/p/chromium/issues/detail?id=978582
    // Note: must be called before other polyfills which change the signature.
    if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) return;
    var nativeAddIceCandidate = window.RTCPeerConnection.prototype.addIceCandidate;
    if (!nativeAddIceCandidate || nativeAddIceCandidate.length === 0) return;
    window.RTCPeerConnection.prototype.addIceCandidate = function addIceCandidate() {
        if (!arguments[0]) {
            if (arguments[1]) arguments[1].apply(null);
            return Promise.resolve();
        }
        // Firefox 68+ emits and processes {candidate: "", ...}, ignore
        // in older versions.
        // Native support for ignoring exists for Chrome M77+.
        // Safari ignores as well, exact version unknown but works in the same
        // version that also ignores addIceCandidate(null).
        if ((browserDetails.browser === "chrome" && browserDetails.version < 78 || browserDetails.browser === "firefox" && browserDetails.version < 68 || browserDetails.browser === "safari") && arguments[0] && arguments[0].candidate === "") return Promise.resolve();
        return nativeAddIceCandidate.apply(this, arguments);
    };
}
function $1e725cbbdf747411$export$7170d04e59f9d553(window, browserDetails) {
    if (!(window.RTCPeerConnection && window.RTCPeerConnection.prototype)) return;
    var nativeSetLocalDescription = window.RTCPeerConnection.prototype.setLocalDescription;
    if (!nativeSetLocalDescription || nativeSetLocalDescription.length === 0) return;
    window.RTCPeerConnection.prototype.setLocalDescription = function setLocalDescription() {
        var _this = this;
        var desc = arguments[0] || {};
        if (typeof desc !== "object" || desc.type && desc.sdp) return nativeSetLocalDescription.apply(this, arguments);
        // The remaining steps should technically happen when SLD comes off the
        // RTCPeerConnection's operations chain (not ahead of going on it), but
        // this is too difficult to shim. Instead, this shim only covers the
        // common case where the operations chain is empty. This is imperfect, but
        // should cover many cases. Rationale: Even if we can't reduce the glare
        // window to zero on imperfect implementations, there's value in tapping
        // into the perfect negotiation pattern that several browsers support.
        desc = {
            type: desc.type,
            sdp: desc.sdp
        };
        if (!desc.type) switch(this.signalingState){
            case "stable":
            case "have-local-offer":
            case "have-remote-pranswer":
                desc.type = "offer";
                break;
            default:
                desc.type = "answer";
                break;
        }
        if (desc.sdp || desc.type !== "offer" && desc.type !== "answer") return nativeSetLocalDescription.apply(this, [
            desc
        ]);
        var func = desc.type === "offer" ? this.createOffer : this.createAnswer;
        return func.apply(this).then(function(d) {
            return nativeSetLocalDescription.apply(_this, [
                d
            ]);
        });
    };
}



function $b1450a2ae8cc7983$export$e77bf46c04ac7d12() {
    var window = (arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}).window, options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        shimChrome: true,
        shimFirefox: true,
        shimSafari: true
    };
    // Utils.
    var logging = $993722e8c7a9e5a7$export$bef1f36f5486a6a3;
    var browserDetails = $993722e8c7a9e5a7$export$2d31490a0c05f094(window);
    var adapter = {
        browserDetails: browserDetails,
        commonShim: $1e725cbbdf747411$exports,
        extractVersion: $993722e8c7a9e5a7$export$e3c02be309be1f23,
        disableLog: $993722e8c7a9e5a7$export$afbfee8cc06fd3e4,
        disableWarnings: $993722e8c7a9e5a7$export$51516be4b019e41e,
        // Expose sdp as a convenience. For production apps include directly.
        sdp: $b2727632138354b2$exports
    };
    // Shim browser if found.
    switch(browserDetails.browser){
        case "chrome":
            if (!$ef7fa8125ed93bad$exports || !$ef7fa8125ed93bad$exports.shimPeerConnection || !options.shimChrome) {
                logging("Chrome shim is not included in this adapter release.");
                return adapter;
            }
            if (browserDetails.version === null) {
                logging("Chrome shim can not determine version, not shimming.");
                return adapter;
            }
            logging("adapter.js shimming chrome.");
            // Export to the adapter global object visible in the browser.
            adapter.browserShim = $ef7fa8125ed93bad$exports;
            // Must be called before shimPeerConnection.
            $1e725cbbdf747411$exports.shimAddIceCandidateNullOrEmpty(window, browserDetails);
            $1e725cbbdf747411$exports.shimParameterlessSetLocalDescription(window, browserDetails);
            $ef7fa8125ed93bad$exports.shimGetUserMedia(window, browserDetails);
            $ef7fa8125ed93bad$exports.shimMediaStream(window, browserDetails);
            $ef7fa8125ed93bad$exports.shimPeerConnection(window, browserDetails);
            $ef7fa8125ed93bad$exports.shimOnTrack(window, browserDetails);
            $ef7fa8125ed93bad$exports.shimAddTrackRemoveTrack(window, browserDetails);
            $ef7fa8125ed93bad$exports.shimGetSendersWithDtmf(window, browserDetails);
            $ef7fa8125ed93bad$exports.shimGetStats(window, browserDetails);
            $ef7fa8125ed93bad$exports.shimSenderReceiverGetStats(window, browserDetails);
            $ef7fa8125ed93bad$exports.fixNegotiationNeeded(window, browserDetails);
            $1e725cbbdf747411$exports.shimRTCIceCandidate(window, browserDetails);
            $1e725cbbdf747411$exports.shimRTCIceCandidateRelayProtocol(window, browserDetails);
            $1e725cbbdf747411$exports.shimConnectionState(window, browserDetails);
            $1e725cbbdf747411$exports.shimMaxMessageSize(window, browserDetails);
            $1e725cbbdf747411$exports.shimSendThrowTypeError(window, browserDetails);
            $1e725cbbdf747411$exports.removeExtmapAllowMixed(window, browserDetails);
            break;
        case "firefox":
            if (!$f7879eae6ce316c3$exports || !$f7879eae6ce316c3$exports.shimPeerConnection || !options.shimFirefox) {
                logging("Firefox shim is not included in this adapter release.");
                return adapter;
            }
            logging("adapter.js shimming firefox.");
            // Export to the adapter global object visible in the browser.
            adapter.browserShim = $f7879eae6ce316c3$exports;
            // Must be called before shimPeerConnection.
            $1e725cbbdf747411$exports.shimAddIceCandidateNullOrEmpty(window, browserDetails);
            $1e725cbbdf747411$exports.shimParameterlessSetLocalDescription(window, browserDetails);
            $f7879eae6ce316c3$exports.shimGetUserMedia(window, browserDetails);
            $f7879eae6ce316c3$exports.shimPeerConnection(window, browserDetails);
            $f7879eae6ce316c3$exports.shimOnTrack(window, browserDetails);
            $f7879eae6ce316c3$exports.shimRemoveStream(window, browserDetails);
            $f7879eae6ce316c3$exports.shimSenderGetStats(window, browserDetails);
            $f7879eae6ce316c3$exports.shimReceiverGetStats(window, browserDetails);
            $f7879eae6ce316c3$exports.shimRTCDataChannel(window, browserDetails);
            $f7879eae6ce316c3$exports.shimAddTransceiver(window, browserDetails);
            $f7879eae6ce316c3$exports.shimGetParameters(window, browserDetails);
            $f7879eae6ce316c3$exports.shimCreateOffer(window, browserDetails);
            $f7879eae6ce316c3$exports.shimCreateAnswer(window, browserDetails);
            $1e725cbbdf747411$exports.shimRTCIceCandidate(window, browserDetails);
            $1e725cbbdf747411$exports.shimConnectionState(window, browserDetails);
            $1e725cbbdf747411$exports.shimMaxMessageSize(window, browserDetails);
            $1e725cbbdf747411$exports.shimSendThrowTypeError(window, browserDetails);
            break;
        case "safari":
            if (!$b5603e2a25579e83$exports || !options.shimSafari) {
                logging("Safari shim is not included in this adapter release.");
                return adapter;
            }
            logging("adapter.js shimming safari.");
            // Export to the adapter global object visible in the browser.
            adapter.browserShim = $b5603e2a25579e83$exports;
            // Must be called before shimCallbackAPI.
            $1e725cbbdf747411$exports.shimAddIceCandidateNullOrEmpty(window, browserDetails);
            $1e725cbbdf747411$exports.shimParameterlessSetLocalDescription(window, browserDetails);
            $b5603e2a25579e83$exports.shimRTCIceServerUrls(window, browserDetails);
            $b5603e2a25579e83$exports.shimCreateOfferLegacy(window, browserDetails);
            $b5603e2a25579e83$exports.shimCallbacksAPI(window, browserDetails);
            $b5603e2a25579e83$exports.shimLocalStreamsAPI(window, browserDetails);
            $b5603e2a25579e83$exports.shimRemoteStreamsAPI(window, browserDetails);
            $b5603e2a25579e83$exports.shimTrackEventTransceiver(window, browserDetails);
            $b5603e2a25579e83$exports.shimGetUserMedia(window, browserDetails);
            $b5603e2a25579e83$exports.shimAudioContext(window, browserDetails);
            $1e725cbbdf747411$exports.shimRTCIceCandidate(window, browserDetails);
            $1e725cbbdf747411$exports.shimRTCIceCandidateRelayProtocol(window, browserDetails);
            $1e725cbbdf747411$exports.shimMaxMessageSize(window, browserDetails);
            $1e725cbbdf747411$exports.shimSendThrowTypeError(window, browserDetails);
            $1e725cbbdf747411$exports.removeExtmapAllowMixed(window, browserDetails);
            break;
        default:
            logging("Unsupported browser!");
            break;
    }
    return adapter;
}


"use strict";
var $3ddb6603d0385efa$var$adapter = (0, $b1450a2ae8cc7983$export$e77bf46c04ac7d12)({
    window: typeof window === "undefined" ? undefined : window
});
var $3ddb6603d0385efa$export$2e2bcd8739ae039 = $3ddb6603d0385efa$var$adapter;


var $0ba6beccc495b2a1$var$webRTCAdapter = //@ts-ignore
(0, $3ddb6603d0385efa$export$2e2bcd8739ae039)["default"] || (0, $3ddb6603d0385efa$export$2e2bcd8739ae039);
var $0ba6beccc495b2a1$export$25be9502477c137d = new /** @class */ (function() {
    var class_1 = function class_1() {
        this.isIOS = [
            "iPad",
            "iPhone",
            "iPod"
        ].includes(navigator.platform);
        this.supportedBrowsers = [
            "firefox",
            "chrome",
            "safari"
        ];
        this.minFirefoxVersion = 59;
        this.minChromeVersion = 72;
        this.minSafariVersion = 605;
    };
    class_1.prototype.isWebRTCSupported = function() {
        return typeof RTCPeerConnection !== "undefined";
    };
    class_1.prototype.isBrowserSupported = function() {
        var browser = this.getBrowser();
        var version = this.getVersion();
        var validBrowser = this.supportedBrowsers.includes(browser);
        if (!validBrowser) return false;
        if (browser === "chrome") return version >= this.minChromeVersion;
        if (browser === "firefox") return version >= this.minFirefoxVersion;
        if (browser === "safari") return !this.isIOS && version >= this.minSafariVersion;
        return false;
    };
    class_1.prototype.getBrowser = function() {
        return $0ba6beccc495b2a1$var$webRTCAdapter.browserDetails.browser;
    };
    class_1.prototype.getVersion = function() {
        return $0ba6beccc495b2a1$var$webRTCAdapter.browserDetails.version || 0;
    };
    class_1.prototype.isUnifiedPlanSupported = function() {
        var browser = this.getBrowser();
        var version = $0ba6beccc495b2a1$var$webRTCAdapter.browserDetails.version || 0;
        if (browser === "chrome" && version < this.minChromeVersion) return false;
        if (browser === "firefox" && version >= this.minFirefoxVersion) return true;
        if (!window.RTCRtpTransceiver || !("currentDirection" in RTCRtpTransceiver.prototype)) return false;
        var tempPc;
        var supported = false;
        try {
            tempPc = new RTCPeerConnection();
            tempPc.addTransceiver("audio");
            supported = true;
        } catch (e) {} finally{
            if (tempPc) tempPc.close();
        }
        return supported;
    };
    class_1.prototype.toString = function() {
        return "Supports:\n    browser:".concat(this.getBrowser(), "\n    version:").concat(this.getVersion(), "\n    isIOS:").concat(this.isIOS, "\n    isWebRTCSupported:").concat(this.isWebRTCSupported(), "\n    isBrowserSupported:").concat(this.isBrowserSupported(), "\n    isUnifiedPlanSupported:").concat(this.isUnifiedPlanSupported());
    };
    return class_1;
}())();


var $7dc43ad2ffa25036$var$__values = undefined && undefined.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var $7dc43ad2ffa25036$var$DEFAULT_CONFIG = {
    iceServers: [
        {
            urls: "stun:stun.l.google.com:19302"
        },
        {
            urls: [
                "turn:eu-0.turn.peerjs.com:3478",
                "turn:us-0.turn.peerjs.com:3478"
            ],
            username: "peerjs",
            credential: "peerjsp"
        }
    ],
    sdpSemantics: "unified-plan"
};
var $7dc43ad2ffa25036$var$Util = /** @class */ function() {
    var Util = function Util() {
        this.CLOUD_HOST = "broker-cn.emqx.io";
        this.CLOUD_PORT = 8084;
        // Browsers that need chunking:
        this.chunkedBrowsers = {
            Chrome: 1,
            chrome: 1
        };
        this.chunkedMTU = 16300; // The original 60000 bytes setting does not work when sending data from Firefox to Chrome, which is "cut off" after 16384 bytes and delivered individually.
        // Returns browser-agnostic default config
        this.defaultConfig = $7dc43ad2ffa25036$var$DEFAULT_CONFIG;
        this.browser = (0, $0ba6beccc495b2a1$export$25be9502477c137d).getBrowser();
        this.browserVersion = (0, $0ba6beccc495b2a1$export$25be9502477c137d).getVersion();
        // Lists which features are supported
        this.supports = function() {
            var supported = {
                browser: (0, $0ba6beccc495b2a1$export$25be9502477c137d).isBrowserSupported(),
                webRTC: (0, $0ba6beccc495b2a1$export$25be9502477c137d).isWebRTCSupported(),
                audioVideo: false,
                data: false,
                binaryBlob: false,
                reliable: false
            };
            if (!supported.webRTC) return supported;
            var pc;
            try {
                pc = new RTCPeerConnection($7dc43ad2ffa25036$var$DEFAULT_CONFIG);
                supported.audioVideo = true;
                var dc = void 0;
                try {
                    dc = pc.createDataChannel("_PEERJSTEST", {
                        ordered: true
                    });
                    supported.data = true;
                    supported.reliable = !!dc.ordered;
                    // Binary test
                    try {
                        dc.binaryType = "blob";
                        supported.binaryBlob = !(0, $0ba6beccc495b2a1$export$25be9502477c137d).isIOS;
                    } catch (e) {}
                } catch (e) {} finally{
                    if (dc) dc.close();
                }
            } catch (e) {} finally{
                if (pc) pc.close();
            }
            return supported;
        }();
        this.pack = $ead48d121739fa4c$export$2a703dbb0cb35339;
        this.unpack = $ead48d121739fa4c$export$417857010dc9287f;
        // Binary stuff
        this._dataCount = 1;
    };
    Util.prototype.noop = function() {};
    // Ensure alphanumeric ids
    Util.prototype.validateId = function(id) {
        // Allow empty ids
        return !id || /^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$/.test(id);
    };
    Util.prototype.chunk = function(blob) {
        var chunks = [];
        var size = blob.byteLength;
        var total = Math.ceil(size / $7dc43ad2ffa25036$export$7debb50ef11d5e0b.chunkedMTU);
        var index = 0;
        var start = 0;
        while(start < size){
            var end = Math.min(size, start + $7dc43ad2ffa25036$export$7debb50ef11d5e0b.chunkedMTU);
            var b = blob.slice(start, end);
            var chunk = {
                __peerData: this._dataCount,
                n: index,
                data: b,
                total: total
            };
            chunks.push(chunk);
            start = end;
            index++;
        }
        this._dataCount++;
        return chunks;
    };
    Util.prototype.blobToArrayBuffer = function(blob, cb) {
        var fr = new FileReader();
        fr.onload = function(evt) {
            if (evt.target) cb(evt.target.result);
        };
        fr.readAsArrayBuffer(blob);
        return fr;
    };
    Util.prototype.binaryStringToArrayBuffer = function(binary) {
        var byteArray = new Uint8Array(binary.length);
        for(var i = 0; i < binary.length; i++)byteArray[i] = binary.charCodeAt(i) & 0xff;
        return byteArray.buffer;
    };
    Util.prototype.randomToken = function() {
        return Math.random().toString(36).slice(2);
    };
    Util.prototype.isSecure = function() {
        return location.protocol === "https:";
    };
    return Util;
}();
var $7dc43ad2ffa25036$export$7debb50ef11d5e0b = new $7dc43ad2ffa25036$var$Util();
function $7dc43ad2ffa25036$export$52c89ebcdc4f53f2(bufs) {
    var e_1, _a, e_2, _b;
    var size = 0;
    try {
        for(var bufs_1 = $7dc43ad2ffa25036$var$__values(bufs), bufs_1_1 = bufs_1.next(); !bufs_1_1.done; bufs_1_1 = bufs_1.next()){
            var buf = bufs_1_1.value;
            size += buf.byteLength;
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (bufs_1_1 && !bufs_1_1.done && (_a = bufs_1["return"])) _a.call(bufs_1);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    var result = new Uint8Array(size);
    var offset = 0;
    try {
        for(var bufs_2 = $7dc43ad2ffa25036$var$__values(bufs), bufs_2_1 = bufs_2.next(); !bufs_2_1.done; bufs_2_1 = bufs_2.next()){
            var buf = bufs_2_1.value;
            result.set(buf, offset);
            offset += buf.byteLength;
        }
    } catch (e_2_1) {
        e_2 = {
            error: e_2_1
        };
    } finally{
        try {
            if (bufs_2_1 && !bufs_2_1.done && (_b = bufs_2["return"])) _b.call(bufs_2);
        } finally{
            if (e_2) throw e_2.error;
        }
    }
    return result;
}


var $17252116aa2ef1fb$exports = {};

$parcel$export($17252116aa2ef1fb$exports, "Peer", function () { return $17252116aa2ef1fb$export$ecd1fc136c422448; }, function (v) { return $17252116aa2ef1fb$export$ecd1fc136c422448 = v; });
var $b43bf3d87e5977ce$exports = {};
"use strict";
var $b43bf3d87e5977ce$var$has = Object.prototype.hasOwnProperty, $b43bf3d87e5977ce$var$prefix = "~";
/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */ function $b43bf3d87e5977ce$var$Events() {}
//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
    $b43bf3d87e5977ce$var$Events.prototype = Object.create(null);
    //
    // This hack is needed because the `__proto__` property is still inherited in
    // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
    //
    if (!new $b43bf3d87e5977ce$var$Events().__proto__) $b43bf3d87e5977ce$var$prefix = false;
}
/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */ function $b43bf3d87e5977ce$var$EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
}
/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */ function $b43bf3d87e5977ce$var$addListener(emitter, event, fn, context, once) {
    if (typeof fn !== "function") throw new TypeError("The listener must be a function");
    var listener = new $b43bf3d87e5977ce$var$EE(fn, context || emitter, once), evt = $b43bf3d87e5977ce$var$prefix ? $b43bf3d87e5977ce$var$prefix + event : event;
    if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
    else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
    else emitter._events[evt] = [
        emitter._events[evt],
        listener
    ];
    return emitter;
}
/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */ function $b43bf3d87e5977ce$var$clearEvent(emitter, evt) {
    if (--emitter._eventsCount === 0) emitter._events = new $b43bf3d87e5977ce$var$Events();
    else delete emitter._events[evt];
}
/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */ function $b43bf3d87e5977ce$var$EventEmitter() {
    this._events = new $b43bf3d87e5977ce$var$Events();
    this._eventsCount = 0;
}
/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */ $b43bf3d87e5977ce$var$EventEmitter.prototype.eventNames = function eventNames() {
    var names = [], events, name;
    if (this._eventsCount === 0) return names;
    for(name in events = this._events)if ($b43bf3d87e5977ce$var$has.call(events, name)) names.push($b43bf3d87e5977ce$var$prefix ? name.slice(1) : name);
    if (Object.getOwnPropertySymbols) return names.concat(Object.getOwnPropertySymbols(events));
    return names;
};
/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */ $b43bf3d87e5977ce$var$EventEmitter.prototype.listeners = function listeners(event) {
    var evt = $b43bf3d87e5977ce$var$prefix ? $b43bf3d87e5977ce$var$prefix + event : event, handlers = this._events[evt];
    if (!handlers) return [];
    if (handlers.fn) return [
        handlers.fn
    ];
    for(var i = 0, l = handlers.length, ee = new Array(l); i < l; i++)ee[i] = handlers[i].fn;
    return ee;
};
/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */ $b43bf3d87e5977ce$var$EventEmitter.prototype.listenerCount = function listenerCount(event) {
    var evt = $b43bf3d87e5977ce$var$prefix ? $b43bf3d87e5977ce$var$prefix + event : event, listeners = this._events[evt];
    if (!listeners) return 0;
    if (listeners.fn) return 1;
    return listeners.length;
};
/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */ $b43bf3d87e5977ce$var$EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = $b43bf3d87e5977ce$var$prefix ? $b43bf3d87e5977ce$var$prefix + event : event;
    if (!this._events[evt]) return false;
    var listeners = this._events[evt], len = arguments.length, args, i;
    if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);
        switch(len){
            case 1:
                return listeners.fn.call(listeners.context), true;
            case 2:
                return listeners.fn.call(listeners.context, a1), true;
            case 3:
                return listeners.fn.call(listeners.context, a1, a2), true;
            case 4:
                return listeners.fn.call(listeners.context, a1, a2, a3), true;
            case 5:
                return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
            case 6:
                return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for(i = 1, args = new Array(len - 1); i < len; i++)args[i - 1] = arguments[i];
        listeners.fn.apply(listeners.context, args);
    } else {
        var length = listeners.length, j;
        for(i = 0; i < length; i++){
            if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);
            switch(len){
                case 1:
                    listeners[i].fn.call(listeners[i].context);
                    break;
                case 2:
                    listeners[i].fn.call(listeners[i].context, a1);
                    break;
                case 3:
                    listeners[i].fn.call(listeners[i].context, a1, a2);
                    break;
                case 4:
                    listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                    break;
                default:
                    if (!args) for(j = 1, args = new Array(len - 1); j < len; j++)args[j - 1] = arguments[j];
                    listeners[i].fn.apply(listeners[i].context, args);
            }
        }
    }
    return true;
};
/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */ $b43bf3d87e5977ce$var$EventEmitter.prototype.on = function on(event, fn, context) {
    return $b43bf3d87e5977ce$var$addListener(this, event, fn, context, false);
};
/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */ $b43bf3d87e5977ce$var$EventEmitter.prototype.once = function once(event, fn, context) {
    return $b43bf3d87e5977ce$var$addListener(this, event, fn, context, true);
};
/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */ $b43bf3d87e5977ce$var$EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = $b43bf3d87e5977ce$var$prefix ? $b43bf3d87e5977ce$var$prefix + event : event;
    if (!this._events[evt]) return this;
    if (!fn) {
        $b43bf3d87e5977ce$var$clearEvent(this, evt);
        return this;
    }
    var listeners = this._events[evt];
    if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) $b43bf3d87e5977ce$var$clearEvent(this, evt);
    } else {
        for(var i = 0, events = [], length = listeners.length; i < length; i++)if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) events.push(listeners[i]);
        //
        // Reset the array, or remove it completely if we have no more listeners.
        //
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else $b43bf3d87e5977ce$var$clearEvent(this, evt);
    }
    return this;
};
/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */ $b43bf3d87e5977ce$var$EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    var evt;
    if (event) {
        evt = $b43bf3d87e5977ce$var$prefix ? $b43bf3d87e5977ce$var$prefix + event : event;
        if (this._events[evt]) $b43bf3d87e5977ce$var$clearEvent(this, evt);
    } else {
        this._events = new $b43bf3d87e5977ce$var$Events();
        this._eventsCount = 0;
    }
    return this;
};
//
// Alias methods names because people roll like that.
//
$b43bf3d87e5977ce$var$EventEmitter.prototype.off = $b43bf3d87e5977ce$var$EventEmitter.prototype.removeListener;
$b43bf3d87e5977ce$var$EventEmitter.prototype.addListener = $b43bf3d87e5977ce$var$EventEmitter.prototype.on;
//
// Expose the prefix.
//
$b43bf3d87e5977ce$var$EventEmitter.prefixed = $b43bf3d87e5977ce$var$prefix;
//
// Allow `EventEmitter` to be imported as module namespace.
//
$b43bf3d87e5977ce$var$EventEmitter.EventEmitter = $b43bf3d87e5977ce$var$EventEmitter;
$b43bf3d87e5977ce$exports = $b43bf3d87e5977ce$var$EventEmitter;



var $96fb85a532fc3748$exports = {};

$parcel$export($96fb85a532fc3748$exports, "LogLevel", function () { return $96fb85a532fc3748$export$243e62d78d3b544d; }, function (v) { return $96fb85a532fc3748$export$243e62d78d3b544d = v; });
$parcel$export($96fb85a532fc3748$exports, "default", function () { return $96fb85a532fc3748$export$2e2bcd8739ae039; }, function (v) { return $96fb85a532fc3748$export$2e2bcd8739ae039 = v; });
var $96fb85a532fc3748$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var $96fb85a532fc3748$var$__spreadArray = undefined && undefined.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var $96fb85a532fc3748$var$LOG_PREFIX = "PeerJS: ";
var $96fb85a532fc3748$export$243e62d78d3b544d;
(function(LogLevel) {
    LogLevel[LogLevel["Disabled"] = 0] = "Disabled";
    LogLevel[LogLevel["Errors"] = 1] = "Errors";
    LogLevel[LogLevel["Warnings"] = 2] = "Warnings";
    LogLevel[LogLevel["All"] = 3] = "All";
})($96fb85a532fc3748$export$243e62d78d3b544d || ($96fb85a532fc3748$export$243e62d78d3b544d = {}));
var $96fb85a532fc3748$var$Logger = /** @class */ function() {
    var Logger = function Logger() {
        this._logLevel = $96fb85a532fc3748$export$243e62d78d3b544d.Disabled;
    };
    Object.defineProperty(Logger.prototype, "logLevel", {
        get: function get() {
            return this._logLevel;
        },
        set: function set(logLevel) {
            this._logLevel = logLevel;
        },
        enumerable: false,
        configurable: true
    });
    Logger.prototype.log = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        if (this._logLevel >= $96fb85a532fc3748$export$243e62d78d3b544d.All) this._print.apply(this, $96fb85a532fc3748$var$__spreadArray([
            $96fb85a532fc3748$export$243e62d78d3b544d.All
        ], $96fb85a532fc3748$var$__read(args), false));
    };
    Logger.prototype.warn = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        if (this._logLevel >= $96fb85a532fc3748$export$243e62d78d3b544d.Warnings) this._print.apply(this, $96fb85a532fc3748$var$__spreadArray([
            $96fb85a532fc3748$export$243e62d78d3b544d.Warnings
        ], $96fb85a532fc3748$var$__read(args), false));
    };
    Logger.prototype.error = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        if (this._logLevel >= $96fb85a532fc3748$export$243e62d78d3b544d.Errors) this._print.apply(this, $96fb85a532fc3748$var$__spreadArray([
            $96fb85a532fc3748$export$243e62d78d3b544d.Errors
        ], $96fb85a532fc3748$var$__read(args), false));
    };
    Logger.prototype.setLogFunction = function(fn) {
        this._print = fn;
    };
    Logger.prototype._print = function(logLevel) {
        var rest = [];
        for(var _i = 1; _i < arguments.length; _i++)rest[_i - 1] = arguments[_i];
        var copy = $96fb85a532fc3748$var$__spreadArray([
            $96fb85a532fc3748$var$LOG_PREFIX
        ], $96fb85a532fc3748$var$__read(rest), false);
        for(var i in copy)if (copy[i] instanceof Error) copy[i] = "(" + copy[i].name + ") " + copy[i].message;
        if (logLevel >= $96fb85a532fc3748$export$243e62d78d3b544d.All) console.log.apply(console, $96fb85a532fc3748$var$__spreadArray([], $96fb85a532fc3748$var$__read(copy), false));
        else if (logLevel >= $96fb85a532fc3748$export$243e62d78d3b544d.Warnings) console.warn.apply(console, $96fb85a532fc3748$var$__spreadArray([
            "WARNING"
        ], $96fb85a532fc3748$var$__read(copy), false));
        else if (logLevel >= $96fb85a532fc3748$export$243e62d78d3b544d.Errors) console.error.apply(console, $96fb85a532fc3748$var$__spreadArray([
            "ERROR"
        ], $96fb85a532fc3748$var$__read(copy), false));
    };
    return Logger;
}();
var $96fb85a532fc3748$export$2e2bcd8739ae039 = new $96fb85a532fc3748$var$Logger();


var $e8676829ef5e8fe7$var$randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var $e8676829ef5e8fe7$export$2e2bcd8739ae039 = {
    randomUUID: $e8676829ef5e8fe7$var$randomUUID
};


// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var $3a592a4f62d4e627$var$getRandomValues;
var $3a592a4f62d4e627$var$rnds8 = new Uint8Array(16);
function $3a592a4f62d4e627$export$2e2bcd8739ae039() {
    // lazy load so that environments that need to polyfill have a chance to do so
    if (!$3a592a4f62d4e627$var$getRandomValues) {
        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
        $3a592a4f62d4e627$var$getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
        if (!$3a592a4f62d4e627$var$getRandomValues) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
    return $3a592a4f62d4e627$var$getRandomValues($3a592a4f62d4e627$var$rnds8);
}


var $8a3d13ec446ed37d$export$2e2bcd8739ae039 = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;


function $1f1b237b31037e46$var$validate(uuid) {
    return typeof uuid === "string" && (0, $8a3d13ec446ed37d$export$2e2bcd8739ae039).test(uuid);
}
var $1f1b237b31037e46$export$2e2bcd8739ae039 = $1f1b237b31037e46$var$validate;


/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */ var $778e19a7d6884635$var$byteToHex = [];
for(var $778e19a7d6884635$var$i = 0; $778e19a7d6884635$var$i < 256; ++$778e19a7d6884635$var$i)$778e19a7d6884635$var$byteToHex.push(($778e19a7d6884635$var$i + 0x100).toString(16).slice(1));
function $778e19a7d6884635$export$8fb373d660548968(arr) {
    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    return ($778e19a7d6884635$var$byteToHex[arr[offset + 0]] + $778e19a7d6884635$var$byteToHex[arr[offset + 1]] + $778e19a7d6884635$var$byteToHex[arr[offset + 2]] + $778e19a7d6884635$var$byteToHex[arr[offset + 3]] + "-" + $778e19a7d6884635$var$byteToHex[arr[offset + 4]] + $778e19a7d6884635$var$byteToHex[arr[offset + 5]] + "-" + $778e19a7d6884635$var$byteToHex[arr[offset + 6]] + $778e19a7d6884635$var$byteToHex[arr[offset + 7]] + "-" + $778e19a7d6884635$var$byteToHex[arr[offset + 8]] + $778e19a7d6884635$var$byteToHex[arr[offset + 9]] + "-" + $778e19a7d6884635$var$byteToHex[arr[offset + 10]] + $778e19a7d6884635$var$byteToHex[arr[offset + 11]] + $778e19a7d6884635$var$byteToHex[arr[offset + 12]] + $778e19a7d6884635$var$byteToHex[arr[offset + 13]] + $778e19a7d6884635$var$byteToHex[arr[offset + 14]] + $778e19a7d6884635$var$byteToHex[arr[offset + 15]]).toLowerCase();
}
function $778e19a7d6884635$var$stringify(arr) {
    var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var uuid = $778e19a7d6884635$export$8fb373d660548968(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields
    if (!(0, $1f1b237b31037e46$export$2e2bcd8739ae039)(uuid)) throw TypeError("Stringified UUID is invalid");
    return uuid;
}
var $778e19a7d6884635$export$2e2bcd8739ae039 = $778e19a7d6884635$var$stringify;


function $dc6c8d20b7aadd2f$var$v4(options, buf, offset) {
    if ((0, $e8676829ef5e8fe7$export$2e2bcd8739ae039).randomUUID && !buf && !options) return (0, $e8676829ef5e8fe7$export$2e2bcd8739ae039).randomUUID();
    options = options || {};
    var rnds = options.random || (options.rng || (0, $3a592a4f62d4e627$export$2e2bcd8739ae039))(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided
    if (buf) {
        offset = offset || 0;
        for(var i = 0; i < 16; ++i)buf[offset + i] = rnds[i];
        return buf;
    }
    return (0, $778e19a7d6884635$export$8fb373d660548968)(rnds);
}
var $dc6c8d20b7aadd2f$export$2e2bcd8739ae039 = $dc6c8d20b7aadd2f$var$v4;


var $f49b5d023fcb4a5c$exports = {};

$parcel$export($f49b5d023fcb4a5c$exports, "MQTTSignaling", function () { return $f49b5d023fcb4a5c$export$6514a2a959a3f251; }, function (v) { return $f49b5d023fcb4a5c$export$6514a2a959a3f251 = v; });


var $8b9dc3e5f2ea4cc9$export$3157d57b4135e3bc;
(function(ConnectionType) {
    ConnectionType["Data"] = "data";
    ConnectionType["Media"] = "media";
})($8b9dc3e5f2ea4cc9$export$3157d57b4135e3bc || ($8b9dc3e5f2ea4cc9$export$3157d57b4135e3bc = {}));
var $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff;
(function(PeerErrorType) {
    PeerErrorType["BrowserIncompatible"] = "browser-incompatible";
    PeerErrorType["Disconnected"] = "disconnected";
    PeerErrorType["InvalidID"] = "invalid-id";
    PeerErrorType["InvalidKey"] = "invalid-key";
    PeerErrorType["Network"] = "network";
    PeerErrorType["PeerUnavailable"] = "peer-unavailable";
    PeerErrorType["SslUnavailable"] = "ssl-unavailable";
    PeerErrorType["ServerError"] = "server-error";
    PeerErrorType["SocketError"] = "socket-error";
    PeerErrorType["SocketClosed"] = "socket-closed";
    PeerErrorType["UnavailableID"] = "unavailable-id";
    PeerErrorType["WebRTC"] = "webrtc";
})($8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff || ($8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff = {}));
var $8b9dc3e5f2ea4cc9$export$89f507cf986a947;
(function(SerializationType) {
    SerializationType["Binary"] = "binary";
    SerializationType["BinaryUTF8"] = "binary-utf8";
    SerializationType["JSON"] = "json";
})($8b9dc3e5f2ea4cc9$export$89f507cf986a947 || ($8b9dc3e5f2ea4cc9$export$89f507cf986a947 = {}));
var $8b9dc3e5f2ea4cc9$export$3b5c4a4b6354f023;
(function(SocketEventType) {
    SocketEventType["Message"] = "message";
    SocketEventType["Disconnected"] = "disconnected";
    SocketEventType["Error"] = "error";
    SocketEventType["Close"] = "close";
})($8b9dc3e5f2ea4cc9$export$3b5c4a4b6354f023 || ($8b9dc3e5f2ea4cc9$export$3b5c4a4b6354f023 = {}));
var $8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d;
(function(ServerMessageType) {
    ServerMessageType["Heartbeat"] = "HEARTBEAT";
    ServerMessageType["Candidate"] = "CANDIDATE";
    ServerMessageType["Offer"] = "OFFER";
    ServerMessageType["Answer"] = "ANSWER";
    ServerMessageType["Open"] = "OPEN";
    ServerMessageType["Error"] = "ERROR";
    ServerMessageType["IdTaken"] = "ID-TAKEN";
    ServerMessageType["InvalidKey"] = "INVALID-KEY";
    ServerMessageType["Leave"] = "LEAVE";
    ServerMessageType["Expire"] = "EXPIRE";
})($8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d || ($8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d = {}));


var $ca442ffd50164601$exports = {};

var $lFBFq = parcelRequire("lFBFq");
"use strict";
var $c67560551cdef195$exports = {};

function $b1abbefc8efc47e3$export$2e2bcd8739ae039(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
        ownKeys.forEach(function(key) {
            (0, $44635a22a5de2b4c$export$2e2bcd8739ae039)(target, key, source[key]);
        });
    }
    return target;
}


function $e3da13796957a2f1$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function $e3da13796957a2f1$export$2e2bcd8739ae039(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    else $e3da13796957a2f1$var$ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
    return target;
}



var $lFBFq = parcelRequire("lFBFq");
"use strict";

var $eJwY4 = parcelRequire("eJwY4");
var $c67560551cdef195$require$EventEmitter = $eJwY4.EventEmitter;
var $655a5fdbc2e87cf5$exports = {};
"use strict";
var $95223428da314994$exports = {};
$95223428da314994$exports = $95223428da314994$var$extend;
var $95223428da314994$var$hasOwnProperty = Object.prototype.hasOwnProperty;
function $95223428da314994$var$extend() {
    var target = {};
    for(var i = 0; i < arguments.length; i++){
        var source = arguments[i];
        for(var key in source)if ($95223428da314994$var$hasOwnProperty.call(source, key)) target[key] = source[key];
    }
    return target;
}



var $2M7q0 = parcelRequire("2M7q0");
var $655a5fdbc2e87cf5$require$Readable = $2M7q0.Readable;
var $655a5fdbc2e87cf5$var$streamsOpts = {
    objectMode: true
};
var $655a5fdbc2e87cf5$var$defaultStoreOptions = {
    clean: true
};
/**
 * In-memory implementation of the message store
 * This can actually be saved into files.
 *
 * @param {Object} [options] - store options
 */ function $655a5fdbc2e87cf5$var$Store(options) {
    if (!(this instanceof $655a5fdbc2e87cf5$var$Store)) return new $655a5fdbc2e87cf5$var$Store(options);
    this.options = options || {};
    // Defaults
    this.options = $95223428da314994$exports($655a5fdbc2e87cf5$var$defaultStoreOptions, options);
    this._inflights = new Map();
}
/**
 * Adds a packet to the store, a packet is
 * anything that has a messageId property.
 *
 */ $655a5fdbc2e87cf5$var$Store.prototype.put = function(packet, cb) {
    this._inflights.set(packet.messageId, packet);
    if (cb) cb();
    return this;
};
/**
 * Creates a stream with all the packets in the store
 *
 */ $655a5fdbc2e87cf5$var$Store.prototype.createStream = function() {
    var stream = new $655a5fdbc2e87cf5$require$Readable($655a5fdbc2e87cf5$var$streamsOpts);
    var values = [];
    var destroyed = false;
    var i = 0;
    this._inflights.forEach(function(value, key) {
        values.push(value);
    });
    stream._read = function() {
        if (!destroyed && i < values.length) this.push(values[i++]);
        else this.push(null);
    };
    stream.destroy = function() {
        if (destroyed) return;
        var self = this;
        destroyed = true;
        setTimeout(function() {
            self.emit("close");
        }, 0);
    };
    return stream;
};
/**
 * deletes a packet from the store.
 */ $655a5fdbc2e87cf5$var$Store.prototype.del = function(packet, cb) {
    packet = this._inflights.get(packet.messageId);
    if (packet) {
        this._inflights["delete"](packet.messageId);
        cb(null, packet);
    } else if (cb) cb(new Error("missing packet"));
    return this;
};
/**
 * get a packet from the store.
 */ $655a5fdbc2e87cf5$var$Store.prototype.get = function(packet, cb) {
    packet = this._inflights.get(packet.messageId);
    if (packet) cb(null, packet);
    else if (cb) cb(new Error("missing packet"));
    return this;
};
/**
 * Close the store
 */ $655a5fdbc2e87cf5$var$Store.prototype.close = function(cb) {
    if (this.options.clean) this._inflights = null;
    if (cb) cb();
};
$655a5fdbc2e87cf5$exports = $655a5fdbc2e87cf5$var$Store;


var $7c9ef0068c38161e$exports = {};
"use strict";
/**
 * Topic Alias receiving manager
 * This holds alias to topic map
 * @param {Number} [max] - topic alias maximum entries
 */ function $7c9ef0068c38161e$var$TopicAliasRecv(max) {
    if (!(this instanceof $7c9ef0068c38161e$var$TopicAliasRecv)) return new $7c9ef0068c38161e$var$TopicAliasRecv(max);
    this.aliasToTopic = {};
    this.max = max;
}
/**
 * Insert or update topic - alias entry.
 * @param {String} [topic] - topic
 * @param {Number} [alias] - topic alias
 * @returns {Boolean} - if success return true otherwise false
 */ $7c9ef0068c38161e$var$TopicAliasRecv.prototype.put = function(topic, alias) {
    if (alias === 0 || alias > this.max) return false;
    this.aliasToTopic[alias] = topic;
    this.length = Object.keys(this.aliasToTopic).length;
    return true;
};
/**
 * Get topic by alias
 * @param {String} [topic] - topic
 * @returns {Number} - if mapped topic exists return topic alias, otherwise return undefined
 */ $7c9ef0068c38161e$var$TopicAliasRecv.prototype.getTopicByAlias = function(alias) {
    return this.aliasToTopic[alias];
};
/**
 * Clear all entries
 */ $7c9ef0068c38161e$var$TopicAliasRecv.prototype.clear = function() {
    this.aliasToTopic = {};
};
$7c9ef0068c38161e$exports = $7c9ef0068c38161e$var$TopicAliasRecv;


var $7a67e81d8b149a1f$exports = {};
"use strict";
var $880606d23f0ba2f2$exports = {};

var $d92bh = parcelRequire("d92bh");

var $883e7 = parcelRequire("883e7");
"use strict";
var $932c5a60aae1d63d$exports = {};
"use strict";
$932c5a60aae1d63d$exports = $932c5a60aae1d63d$var$Yallist;
$932c5a60aae1d63d$var$Yallist.Node = $932c5a60aae1d63d$var$Node;
$932c5a60aae1d63d$var$Yallist.create = $932c5a60aae1d63d$var$Yallist;
function $932c5a60aae1d63d$var$Yallist(list) {
    var self = this;
    if (!(self instanceof $932c5a60aae1d63d$var$Yallist)) self = new $932c5a60aae1d63d$var$Yallist();
    self.tail = null;
    self.head = null;
    self.length = 0;
    if (list && typeof list.forEach === "function") list.forEach(function(item) {
        self.push(item);
    });
    else if (arguments.length > 0) for(var i = 0, l = arguments.length; i < l; i++)self.push(arguments[i]);
    return self;
}
$932c5a60aae1d63d$var$Yallist.prototype.removeNode = function(node) {
    if (node.list !== this) throw new Error("removing node which does not belong to this list");
    var next = node.next;
    var prev = node.prev;
    if (next) next.prev = prev;
    if (prev) prev.next = next;
    if (node === this.head) this.head = next;
    if (node === this.tail) this.tail = prev;
    node.list.length--;
    node.next = null;
    node.prev = null;
    node.list = null;
    return next;
};
$932c5a60aae1d63d$var$Yallist.prototype.unshiftNode = function(node) {
    if (node === this.head) return;
    if (node.list) node.list.removeNode(node);
    var head = this.head;
    node.list = this;
    node.next = head;
    if (head) head.prev = node;
    this.head = node;
    if (!this.tail) this.tail = node;
    this.length++;
};
$932c5a60aae1d63d$var$Yallist.prototype.pushNode = function(node) {
    if (node === this.tail) return;
    if (node.list) node.list.removeNode(node);
    var tail = this.tail;
    node.list = this;
    node.prev = tail;
    if (tail) tail.next = node;
    this.tail = node;
    if (!this.head) this.head = node;
    this.length++;
};
$932c5a60aae1d63d$var$Yallist.prototype.push = function() {
    for(var i = 0, l = arguments.length; i < l; i++)$932c5a60aae1d63d$var$push(this, arguments[i]);
    return this.length;
};
$932c5a60aae1d63d$var$Yallist.prototype.unshift = function() {
    for(var i = 0, l = arguments.length; i < l; i++)$932c5a60aae1d63d$var$unshift(this, arguments[i]);
    return this.length;
};
$932c5a60aae1d63d$var$Yallist.prototype.pop = function() {
    if (!this.tail) return undefined;
    var res = this.tail.value;
    this.tail = this.tail.prev;
    if (this.tail) this.tail.next = null;
    else this.head = null;
    this.length--;
    return res;
};
$932c5a60aae1d63d$var$Yallist.prototype.shift = function() {
    if (!this.head) return undefined;
    var res = this.head.value;
    this.head = this.head.next;
    if (this.head) this.head.prev = null;
    else this.tail = null;
    this.length--;
    return res;
};
$932c5a60aae1d63d$var$Yallist.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    for(var walker = this.head, i = 0; walker !== null; i++){
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
    }
};
$932c5a60aae1d63d$var$Yallist.prototype.forEachReverse = function(fn, thisp) {
    thisp = thisp || this;
    for(var walker = this.tail, i = this.length - 1; walker !== null; i--){
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
    }
};
$932c5a60aae1d63d$var$Yallist.prototype.get = function(n) {
    for(var i = 0, walker = this.head; walker !== null && i < n; i++)// abort out of the list early if we hit a cycle
    walker = walker.next;
    if (i === n && walker !== null) return walker.value;
};
$932c5a60aae1d63d$var$Yallist.prototype.getReverse = function(n) {
    for(var i = 0, walker = this.tail; walker !== null && i < n; i++)// abort out of the list early if we hit a cycle
    walker = walker.prev;
    if (i === n && walker !== null) return walker.value;
};
$932c5a60aae1d63d$var$Yallist.prototype.map = function(fn, thisp) {
    thisp = thisp || this;
    var res = new $932c5a60aae1d63d$var$Yallist();
    for(var walker = this.head; walker !== null;){
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
    }
    return res;
};
$932c5a60aae1d63d$var$Yallist.prototype.mapReverse = function(fn, thisp) {
    thisp = thisp || this;
    var res = new $932c5a60aae1d63d$var$Yallist();
    for(var walker = this.tail; walker !== null;){
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
    }
    return res;
};
$932c5a60aae1d63d$var$Yallist.prototype.reduce = function(fn, initial) {
    var acc;
    var walker = this.head;
    if (arguments.length > 1) acc = initial;
    else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
    } else throw new TypeError("Reduce of empty list with no initial value");
    for(var i = 0; walker !== null; i++){
        acc = fn(acc, walker.value, i);
        walker = walker.next;
    }
    return acc;
};
$932c5a60aae1d63d$var$Yallist.prototype.reduceReverse = function(fn, initial) {
    var acc;
    var walker = this.tail;
    if (arguments.length > 1) acc = initial;
    else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
    } else throw new TypeError("Reduce of empty list with no initial value");
    for(var i = this.length - 1; walker !== null; i--){
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
    }
    return acc;
};
$932c5a60aae1d63d$var$Yallist.prototype.toArray = function() {
    var arr = new Array(this.length);
    for(var i = 0, walker = this.head; walker !== null; i++){
        arr[i] = walker.value;
        walker = walker.next;
    }
    return arr;
};
$932c5a60aae1d63d$var$Yallist.prototype.toArrayReverse = function() {
    var arr = new Array(this.length);
    for(var i = 0, walker = this.tail; walker !== null; i++){
        arr[i] = walker.value;
        walker = walker.prev;
    }
    return arr;
};
$932c5a60aae1d63d$var$Yallist.prototype.slice = function(from, to) {
    to = to || this.length;
    if (to < 0) to += this.length;
    from = from || 0;
    if (from < 0) from += this.length;
    var ret = new $932c5a60aae1d63d$var$Yallist();
    if (to < from || to < 0) return ret;
    if (from < 0) from = 0;
    if (to > this.length) to = this.length;
    for(var i = 0, walker = this.head; walker !== null && i < from; i++)walker = walker.next;
    for(; walker !== null && i < to; i++, walker = walker.next)ret.push(walker.value);
    return ret;
};
$932c5a60aae1d63d$var$Yallist.prototype.sliceReverse = function(from, to) {
    to = to || this.length;
    if (to < 0) to += this.length;
    from = from || 0;
    if (from < 0) from += this.length;
    var ret = new $932c5a60aae1d63d$var$Yallist();
    if (to < from || to < 0) return ret;
    if (from < 0) from = 0;
    if (to > this.length) to = this.length;
    for(var i = this.length, walker = this.tail; walker !== null && i > to; i--)walker = walker.prev;
    for(; walker !== null && i > from; i--, walker = walker.prev)ret.push(walker.value);
    return ret;
};
$932c5a60aae1d63d$var$Yallist.prototype.splice = function(start, deleteCount) {
    for(var _len = arguments.length, nodes = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){
        nodes[_key - 2] = arguments[_key];
    }
    if (start > this.length) start = this.length - 1;
    if (start < 0) start = this.length + start;
    for(var i = 0, walker = this.head; walker !== null && i < start; i++)walker = walker.next;
    var ret = [];
    for(var i = 0; walker && i < deleteCount; i++){
        ret.push(walker.value);
        walker = this.removeNode(walker);
    }
    if (walker === null) walker = this.tail;
    if (walker !== this.head && walker !== this.tail) walker = walker.prev;
    for(var i = 0; i < nodes.length; i++)walker = $932c5a60aae1d63d$var$insert(this, walker, nodes[i]);
    return ret;
};
$932c5a60aae1d63d$var$Yallist.prototype.reverse = function() {
    var head = this.head;
    var tail = this.tail;
    for(var walker = head; walker !== null; walker = walker.prev){
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
    }
    this.head = tail;
    this.tail = head;
    return this;
};
function $932c5a60aae1d63d$var$insert(self, node, value) {
    var inserted = node === self.head ? new $932c5a60aae1d63d$var$Node(value, null, node, self) : new $932c5a60aae1d63d$var$Node(value, node, node.next, self);
    if (inserted.next === null) self.tail = inserted;
    if (inserted.prev === null) self.head = inserted;
    self.length++;
    return inserted;
}
function $932c5a60aae1d63d$var$push(self, item) {
    self.tail = new $932c5a60aae1d63d$var$Node(item, self.tail, null, self);
    if (!self.head) self.head = self.tail;
    self.length++;
}
function $932c5a60aae1d63d$var$unshift(self, item) {
    self.head = new $932c5a60aae1d63d$var$Node(item, null, self.head, self);
    if (!self.tail) self.tail = self.head;
    self.length++;
}
function $932c5a60aae1d63d$var$Node(value, prev, next, list) {
    if (!(this instanceof $932c5a60aae1d63d$var$Node)) return new $932c5a60aae1d63d$var$Node(value, prev, next, list);
    this.list = list;
    this.value = value;
    if (prev) {
        prev.next = this;
        this.prev = prev;
    } else this.prev = null;
    if (next) {
        next.prev = this;
        this.next = next;
    } else this.next = null;
}

try {
    // add if support for Symbol.iterator is present
    (parcelRequire("2wG4o"))($932c5a60aae1d63d$var$Yallist);
} catch (er) {}


var $880606d23f0ba2f2$var$MAX = Symbol("max");
var $880606d23f0ba2f2$var$LENGTH = Symbol("length");
var $880606d23f0ba2f2$var$LENGTH_CALCULATOR = Symbol("lengthCalculator");
var $880606d23f0ba2f2$var$ALLOW_STALE = Symbol("allowStale");
var $880606d23f0ba2f2$var$MAX_AGE = Symbol("maxAge");
var $880606d23f0ba2f2$var$DISPOSE = Symbol("dispose");
var $880606d23f0ba2f2$var$NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
var $880606d23f0ba2f2$var$LRU_LIST = Symbol("lruList");
var $880606d23f0ba2f2$var$CACHE = Symbol("cache");
var $880606d23f0ba2f2$var$UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
var $880606d23f0ba2f2$var$naiveLength = function() {
    return 1;
};
// lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.
var $880606d23f0ba2f2$var$LRUCache = /*#__PURE__*/ function() {
    function LRUCache(options) {
        (0, $d92bh.default)(this, LRUCache);
        if (typeof options === "number") options = {
            max: options
        };
        if (!options) options = {};
        if (options.max && (typeof options.max !== "number" || options.max < 0)) throw new TypeError("max must be a non-negative number");
        // Kind of weird to have a default max of Infinity, but oh well.
        var max = this[$880606d23f0ba2f2$var$MAX] = options.max || Infinity;
        var lc = options.length || $880606d23f0ba2f2$var$naiveLength;
        this[$880606d23f0ba2f2$var$LENGTH_CALCULATOR] = typeof lc !== "function" ? $880606d23f0ba2f2$var$naiveLength : lc;
        this[$880606d23f0ba2f2$var$ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== "number") throw new TypeError("maxAge must be a number");
        this[$880606d23f0ba2f2$var$MAX_AGE] = options.maxAge || 0;
        this[$880606d23f0ba2f2$var$DISPOSE] = options.dispose;
        this[$880606d23f0ba2f2$var$NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[$880606d23f0ba2f2$var$UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
    }
    (0, $883e7.default)(LRUCache, [
        {
            key: "max",
            get: function get() {
                return this[$880606d23f0ba2f2$var$MAX];
            },
            set: // resize the cache when the max changes.
            function set(mL) {
                if (typeof mL !== "number" || mL < 0) throw new TypeError("max must be a non-negative number");
                this[$880606d23f0ba2f2$var$MAX] = mL || Infinity;
                $880606d23f0ba2f2$var$trim(this);
            }
        },
        {
            key: "allowStale",
            get: function get() {
                return this[$880606d23f0ba2f2$var$ALLOW_STALE];
            },
            set: function set(allowStale) {
                this[$880606d23f0ba2f2$var$ALLOW_STALE] = !!allowStale;
            }
        },
        {
            key: "maxAge",
            get: function get() {
                return this[$880606d23f0ba2f2$var$MAX_AGE];
            },
            set: function set(mA) {
                if (typeof mA !== "number") throw new TypeError("maxAge must be a non-negative number");
                this[$880606d23f0ba2f2$var$MAX_AGE] = mA;
                $880606d23f0ba2f2$var$trim(this);
            }
        },
        {
            key: "lengthCalculator",
            get: function get() {
                return this[$880606d23f0ba2f2$var$LENGTH_CALCULATOR];
            },
            set: // resize the cache when the lengthCalculator changes.
            function set(lC) {
                var _this = this;
                if (typeof lC !== "function") lC = $880606d23f0ba2f2$var$naiveLength;
                if (lC !== this[$880606d23f0ba2f2$var$LENGTH_CALCULATOR]) {
                    this[$880606d23f0ba2f2$var$LENGTH_CALCULATOR] = lC;
                    this[$880606d23f0ba2f2$var$LENGTH] = 0;
                    this[$880606d23f0ba2f2$var$LRU_LIST].forEach(function(hit) {
                        hit.length = _this[$880606d23f0ba2f2$var$LENGTH_CALCULATOR](hit.value, hit.key);
                        _this[$880606d23f0ba2f2$var$LENGTH] += hit.length;
                    });
                }
                $880606d23f0ba2f2$var$trim(this);
            }
        },
        {
            key: "length",
            get: function get() {
                return this[$880606d23f0ba2f2$var$LENGTH];
            }
        },
        {
            key: "itemCount",
            get: function get() {
                return this[$880606d23f0ba2f2$var$LRU_LIST].length;
            }
        },
        {
            key: "rforEach",
            value: function rforEach(fn, thisp) {
                thisp = thisp || this;
                for(var walker = this[$880606d23f0ba2f2$var$LRU_LIST].tail; walker !== null;){
                    var prev = walker.prev;
                    $880606d23f0ba2f2$var$forEachStep(this, fn, walker, thisp);
                    walker = prev;
                }
            }
        },
        {
            key: "forEach",
            value: function forEach(fn, thisp) {
                thisp = thisp || this;
                for(var walker = this[$880606d23f0ba2f2$var$LRU_LIST].head; walker !== null;){
                    var next = walker.next;
                    $880606d23f0ba2f2$var$forEachStep(this, fn, walker, thisp);
                    walker = next;
                }
            }
        },
        {
            key: "keys",
            value: function keys() {
                return this[$880606d23f0ba2f2$var$LRU_LIST].toArray().map(function(k) {
                    return k.key;
                });
            }
        },
        {
            key: "values",
            value: function values() {
                return this[$880606d23f0ba2f2$var$LRU_LIST].toArray().map(function(k) {
                    return k.value;
                });
            }
        },
        {
            key: "reset",
            value: function reset() {
                var _this = this;
                if (this[$880606d23f0ba2f2$var$DISPOSE] && this[$880606d23f0ba2f2$var$LRU_LIST] && this[$880606d23f0ba2f2$var$LRU_LIST].length) this[$880606d23f0ba2f2$var$LRU_LIST].forEach(function(hit) {
                    return _this[$880606d23f0ba2f2$var$DISPOSE](hit.key, hit.value);
                });
                this[$880606d23f0ba2f2$var$CACHE] = new Map() // hash of items by key
                ;
                this[$880606d23f0ba2f2$var$LRU_LIST] = new $932c5a60aae1d63d$exports() // list of items in order of use recency
                ;
                this[$880606d23f0ba2f2$var$LENGTH] = 0 // length of items in the list
                ;
            }
        },
        {
            key: "dump",
            value: function dump() {
                var _this = this;
                return this[$880606d23f0ba2f2$var$LRU_LIST].map(function(hit) {
                    return $880606d23f0ba2f2$var$isStale(_this, hit) ? false : {
                        k: hit.key,
                        v: hit.value,
                        e: hit.now + (hit.maxAge || 0)
                    };
                }).toArray().filter(function(h) {
                    return h;
                });
            }
        },
        {
            key: "dumpLru",
            value: function dumpLru() {
                return this[$880606d23f0ba2f2$var$LRU_LIST];
            }
        },
        {
            key: "set",
            value: function set(key, value, maxAge) {
                maxAge = maxAge || this[$880606d23f0ba2f2$var$MAX_AGE];
                if (maxAge && typeof maxAge !== "number") throw new TypeError("maxAge must be a number");
                var now = maxAge ? Date.now() : 0;
                var len = this[$880606d23f0ba2f2$var$LENGTH_CALCULATOR](value, key);
                if (this[$880606d23f0ba2f2$var$CACHE].has(key)) {
                    if (len > this[$880606d23f0ba2f2$var$MAX]) {
                        $880606d23f0ba2f2$var$del(this, this[$880606d23f0ba2f2$var$CACHE].get(key));
                        return false;
                    }
                    var node = this[$880606d23f0ba2f2$var$CACHE].get(key);
                    var item = node.value;
                    // dispose of the old one before overwriting
                    // split out into 2 ifs for better coverage tracking
                    if (this[$880606d23f0ba2f2$var$DISPOSE]) {
                        if (!this[$880606d23f0ba2f2$var$NO_DISPOSE_ON_SET]) this[$880606d23f0ba2f2$var$DISPOSE](key, item.value);
                    }
                    item.now = now;
                    item.maxAge = maxAge;
                    item.value = value;
                    this[$880606d23f0ba2f2$var$LENGTH] += len - item.length;
                    item.length = len;
                    this.get(key);
                    $880606d23f0ba2f2$var$trim(this);
                    return true;
                }
                var hit = new $880606d23f0ba2f2$var$Entry(key, value, len, now, maxAge);
                // oversized objects fall out of cache automatically.
                if (hit.length > this[$880606d23f0ba2f2$var$MAX]) {
                    if (this[$880606d23f0ba2f2$var$DISPOSE]) this[$880606d23f0ba2f2$var$DISPOSE](key, value);
                    return false;
                }
                this[$880606d23f0ba2f2$var$LENGTH] += hit.length;
                this[$880606d23f0ba2f2$var$LRU_LIST].unshift(hit);
                this[$880606d23f0ba2f2$var$CACHE].set(key, this[$880606d23f0ba2f2$var$LRU_LIST].head);
                $880606d23f0ba2f2$var$trim(this);
                return true;
            }
        },
        {
            key: "has",
            value: function has(key) {
                if (!this[$880606d23f0ba2f2$var$CACHE].has(key)) return false;
                var hit = this[$880606d23f0ba2f2$var$CACHE].get(key).value;
                return !$880606d23f0ba2f2$var$isStale(this, hit);
            }
        },
        {
            key: "get",
            value: function get1(key) {
                return $880606d23f0ba2f2$var$get(this, key, true);
            }
        },
        {
            key: "peek",
            value: function peek(key) {
                return $880606d23f0ba2f2$var$get(this, key, false);
            }
        },
        {
            key: "pop",
            value: function pop() {
                var node = this[$880606d23f0ba2f2$var$LRU_LIST].tail;
                if (!node) return null;
                $880606d23f0ba2f2$var$del(this, node);
                return node.value;
            }
        },
        {
            key: "del",
            value: function del1(key) {
                $880606d23f0ba2f2$var$del(this, this[$880606d23f0ba2f2$var$CACHE].get(key));
            }
        },
        {
            key: "load",
            value: function load(arr) {
                // reset the cache
                this.reset();
                var now = Date.now();
                // A previous serialized cache has the most recent items first
                for(var l = arr.length - 1; l >= 0; l--){
                    var hit = arr[l];
                    var expiresAt = hit.e || 0;
                    if (expiresAt === 0) // the item was created without expiration in a non aged cache
                    this.set(hit.k, hit.v);
                    else {
                        var maxAge = expiresAt - now;
                        // dont add already expired items
                        if (maxAge > 0) this.set(hit.k, hit.v, maxAge);
                    }
                }
            }
        },
        {
            key: "prune",
            value: function prune() {
                var _this = this;
                this[$880606d23f0ba2f2$var$CACHE].forEach(function(value, key) {
                    return $880606d23f0ba2f2$var$get(_this, key, false);
                });
            }
        }
    ]);
    return LRUCache;
}();
var $880606d23f0ba2f2$var$get = function(self, key, doUse) {
    var node = self[$880606d23f0ba2f2$var$CACHE].get(key);
    if (node) {
        var hit = node.value;
        if ($880606d23f0ba2f2$var$isStale(self, hit)) {
            $880606d23f0ba2f2$var$del(self, node);
            if (!self[$880606d23f0ba2f2$var$ALLOW_STALE]) return undefined;
        } else if (doUse) {
            if (self[$880606d23f0ba2f2$var$UPDATE_AGE_ON_GET]) node.value.now = Date.now();
            self[$880606d23f0ba2f2$var$LRU_LIST].unshiftNode(node);
        }
        return hit.value;
    }
};
var $880606d23f0ba2f2$var$isStale = function(self, hit) {
    if (!hit || !hit.maxAge && !self[$880606d23f0ba2f2$var$MAX_AGE]) return false;
    var diff = Date.now() - hit.now;
    return hit.maxAge ? diff > hit.maxAge : self[$880606d23f0ba2f2$var$MAX_AGE] && diff > self[$880606d23f0ba2f2$var$MAX_AGE];
};
var $880606d23f0ba2f2$var$trim = function(self) {
    if (self[$880606d23f0ba2f2$var$LENGTH] > self[$880606d23f0ba2f2$var$MAX]) for(var walker = self[$880606d23f0ba2f2$var$LRU_LIST].tail; self[$880606d23f0ba2f2$var$LENGTH] > self[$880606d23f0ba2f2$var$MAX] && walker !== null;){
        // We know that we're about to delete this one, and also
        // what the next least recently used key will be, so just
        // go ahead and set it now.
        var prev = walker.prev;
        $880606d23f0ba2f2$var$del(self, walker);
        walker = prev;
    }
};
var $880606d23f0ba2f2$var$del = function(self, node) {
    if (node) {
        var hit = node.value;
        if (self[$880606d23f0ba2f2$var$DISPOSE]) self[$880606d23f0ba2f2$var$DISPOSE](hit.key, hit.value);
        self[$880606d23f0ba2f2$var$LENGTH] -= hit.length;
        self[$880606d23f0ba2f2$var$CACHE]["delete"](hit.key);
        self[$880606d23f0ba2f2$var$LRU_LIST].removeNode(node);
    }
};
var $880606d23f0ba2f2$var$Entry = function Entry(key, value, length, now, maxAge) {
    (0, $d92bh.default)(this, Entry);
    this.key = key;
    this.value = value;
    this.length = length;
    this.now = now;
    this.maxAge = maxAge || 0;
};
var $880606d23f0ba2f2$var$forEachStep = function(self, fn, node, thisp) {
    var hit = node.value;
    if ($880606d23f0ba2f2$var$isStale(self, hit)) {
        $880606d23f0ba2f2$var$del(self, node);
        if (!self[$880606d23f0ba2f2$var$ALLOW_STALE]) hit = undefined;
    }
    if (hit) fn.call(thisp, hit.value, hit.key, self);
};
$880606d23f0ba2f2$exports = $880606d23f0ba2f2$var$LRUCache;


// Copyright Takatoshi Kondo 2021
//
// Distributed under the MIT License
var $dca4ea078af31392$export$97be38356e4a3d64;
var $130d5448ea4ef76e$exports = {};
// Copyright Takatoshi Kondo 2021
//
// Distributed under the MIT License
"use strict";
var $3cd4b87e2d33ae69$exports = {};

$parcel$export($3cd4b87e2d33ae69$exports, "default", function () { return $3cd4b87e2d33ae69$export$2e2bcd8739ae039; }, function (v) { return $3cd4b87e2d33ae69$export$2e2bcd8739ae039 = v; });
var $603055251fe416ee$exports = {};

$parcel$export($603055251fe416ee$exports, "default", function () { return $603055251fe416ee$export$2e2bcd8739ae039; }, function (v) { return $603055251fe416ee$export$2e2bcd8739ae039 = v; });
var $89a8bb6a03dd2958$exports = {};

$parcel$export($89a8bb6a03dd2958$exports, "TreeNode", function () { return $89a8bb6a03dd2958$export$2eba8ec3a333fdbb; }, function (v) { return $89a8bb6a03dd2958$export$2eba8ec3a333fdbb = v; });
$parcel$export($89a8bb6a03dd2958$exports, "TreeNodeEnableIndex", function () { return $89a8bb6a03dd2958$export$5b8b67062565f922; }, function (v) { return $89a8bb6a03dd2958$export$5b8b67062565f922 = v; });
var $89a8bb6a03dd2958$var$__extends = undefined && undefined.t || function() {
    var extendStatics = function extendStatics1(e, n) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(e, n) {
            e.__proto__ = n;
        } || function(e, n) {
            for(var t in n)if (Object.prototype.hasOwnProperty.call(n, t)) e[t] = n[t];
        };
        return extendStatics(e, n);
    };
    return function(e, n) {
        var __ = function __() {
            this.constructor = e;
        };
        if (typeof n !== "function" && n !== null) throw new TypeError("Class extends value " + String(n) + " is not a constructor or null");
        extendStatics(e, n);
        e.prototype = n === null ? Object.create(n) : (__.prototype = n.prototype, new __);
    };
}();
var $89a8bb6a03dd2958$export$2eba8ec3a333fdbb = function() {
    var TreeNode = function TreeNode(e, n) {
        this.ee = 1;
        this.u = undefined;
        this.p = undefined;
        this.K = undefined;
        this.N = undefined;
        this.rr = undefined;
        this.u = e;
        this.p = n;
    };
    TreeNode.prototype.L = function() {
        var e = this;
        if (e.ee === 1 && e.rr.rr === e) e = e.N;
        else if (e.K) {
            e = e.K;
            while(e.N)e = e.N;
        } else {
            var n = e.rr;
            while(n.K === e){
                e = n;
                n = e.rr;
            }
            e = n;
        }
        return e;
    };
    TreeNode.prototype.m = function() {
        var e = this;
        if (e.N) {
            e = e.N;
            while(e.K)e = e.K;
            return e;
        } else {
            var n = e.rr;
            while(n.N === e){
                e = n;
                n = e.rr;
            }
            if (e.N !== n) return n;
            else return e;
        }
    };
    TreeNode.prototype.ne = function() {
        var e = this.rr;
        var n = this.N;
        var t = n.K;
        if (e.rr === this) e.rr = n;
        else if (e.K === this) e.K = n;
        else e.N = n;
        n.rr = e;
        n.K = this;
        this.rr = n;
        this.N = t;
        if (t) t.rr = this;
        return n;
    };
    TreeNode.prototype.te = function() {
        var e = this.rr;
        var n = this.K;
        var t = n.N;
        if (e.rr === this) e.rr = n;
        else if (e.K === this) e.K = n;
        else e.N = n;
        n.rr = e;
        n.N = this;
        this.rr = n;
        this.K = t;
        if (t) t.rr = this;
        return n;
    };
    return TreeNode;
}();
var $89a8bb6a03dd2958$export$5b8b67062565f922 = function(e) {
    var TreeNodeEnableIndex = function TreeNodeEnableIndex() {
        var n = e !== null && e.apply(this, arguments) || this;
        n.tr = 1;
        return n;
    };
    $89a8bb6a03dd2958$var$__extends(TreeNodeEnableIndex, e);
    TreeNodeEnableIndex.prototype.ne = function() {
        var n = e.prototype.ne.call(this);
        this.ie();
        n.ie();
        return n;
    };
    TreeNodeEnableIndex.prototype.te = function() {
        var n = e.prototype.te.call(this);
        this.ie();
        n.ie();
        return n;
    };
    TreeNodeEnableIndex.prototype.ie = function() {
        this.tr = 1;
        if (this.K) this.tr += this.K.tr;
        if (this.N) this.tr += this.N.tr;
    };
    return TreeNodeEnableIndex;
}($89a8bb6a03dd2958$export$2eba8ec3a333fdbb);


var $3206921eb3179ded$exports = {};

$parcel$export($3206921eb3179ded$exports, "ContainerIterator", function () { return $3206921eb3179ded$export$af692a1538dc9769; }, function (v) { return $3206921eb3179ded$export$af692a1538dc9769 = v; });
$parcel$export($3206921eb3179ded$exports, "Container", function () { return $3206921eb3179ded$export$42a852a2b6b56249; }, function (v) { return $3206921eb3179ded$export$42a852a2b6b56249 = v; });
var $3206921eb3179ded$var$__extends = undefined && undefined.t || function() {
    var extendStatics = function extendStatics1(n, t) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(n, t) {
            n.__proto__ = t;
        } || function(n, t) {
            for(var r in t)if (Object.prototype.hasOwnProperty.call(t, r)) n[r] = t[r];
        };
        return extendStatics(n, t);
    };
    return function(n, t) {
        var __ = function __() {
            this.constructor = n;
        };
        if (typeof t !== "function" && t !== null) throw new TypeError("Class extends value " + String(t) + " is not a constructor or null");
        extendStatics(n, t);
        n.prototype = t === null ? Object.create(t) : (__.prototype = t.prototype, new __);
    };
}();
var $3206921eb3179ded$export$af692a1538dc9769 = function() {
    var ContainerIterator = function ContainerIterator(n) {
        if (n === void 0) n = 0;
        this.iteratorType = n;
    };
    ContainerIterator.prototype.equals = function(n) {
        return this.o === n.o;
    };
    return ContainerIterator;
}();
var $3206921eb3179ded$export$ef88aa0d34c34520 = function() {
    var Base = function Base() {
        this.M = 0;
    };
    Object.defineProperty(Base.prototype, "length", {
        get: function get() {
            return this.M;
        },
        enumerable: false,
        configurable: true
    });
    Base.prototype.size = function() {
        return this.M;
    };
    Base.prototype.empty = function() {
        return this.M === 0;
    };
    return Base;
}();
var $3206921eb3179ded$export$42a852a2b6b56249 = function(n) {
    var Container = function Container() {
        return n !== null && n.apply(this, arguments) || this;
    };
    $3206921eb3179ded$var$__extends(Container, n);
    return Container;
}($3206921eb3179ded$export$ef88aa0d34c34520);


function $64d42b96befe9c0d$export$2518338d0d5f16c0() {
    throw new RangeError("Iterator access denied!");
}


var $603055251fe416ee$var$__extends = undefined && undefined.t || function() {
    var extendStatics = function extendStatics1(e, r) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(e, r) {
            e.__proto__ = r;
        } || function(e, r) {
            for(var i in r)if (Object.prototype.hasOwnProperty.call(r, i)) e[i] = r[i];
        };
        return extendStatics(e, r);
    };
    return function(e, r) {
        var __ = function __() {
            this.constructor = e;
        };
        if (typeof r !== "function" && r !== null) throw new TypeError("Class extends value " + String(r) + " is not a constructor or null");
        extendStatics(e, r);
        e.prototype = r === null ? Object.create(r) : (__.prototype = r.prototype, new __);
    };
}();
var $603055251fe416ee$var$__read = undefined && undefined.q || function(e, r) {
    var i = typeof Symbol === "function" && e[Symbol.iterator];
    if (!i) return e;
    var t = i.call(e), n, s = [], f;
    try {
        while((r === void 0 || r-- > 0) && !(n = t.next()).done)s.push(n.value);
    } catch (e) {
        f = {
            error: e
        };
    } finally{
        try {
            if (n && !n.done && (i = t["return"])) i.call(t);
        } finally{
            if (f) throw f.error;
        }
    }
    return s;
};
var $603055251fe416ee$var$__values = undefined && undefined.V || function(e) {
    var r = typeof Symbol === "function" && Symbol.iterator, i = r && e[r], t = 0;
    if (i) return i.call(e);
    if (e && typeof e.length === "number") return {
        next: function next() {
            if (e && t >= e.length) e = void 0;
            return {
                value: e && e[t++],
                done: !e
            };
        }
    };
    throw new TypeError(r ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var $603055251fe416ee$var$TreeContainer = function(e) {
    var TreeContainer = function TreeContainer(r, i) {
        if (r === void 0) r = function r(e, r) {
            if (e < r) return -1;
            if (e > r) return 1;
            return 0;
        };
        if (i === void 0) i = false;
        var t = e.call(this) || this;
        t.W = undefined;
        t.$ = r;
        if (i) {
            t.re = (0, $89a8bb6a03dd2958$exports.TreeNodeEnableIndex);
            t.v = function(e, r, i) {
                var t = this.se(e, r, i);
                if (t) {
                    var n = t.rr;
                    while(n !== this.h){
                        n.tr += 1;
                        n = n.rr;
                    }
                    var s = this.fe(t);
                    if (s) {
                        var f = s, h = f.parentNode, u = f.grandParent, a = f.curNode;
                        h.ie();
                        u.ie();
                        a.ie();
                    }
                }
                return this.M;
            };
            t.G = function(e) {
                var _$r = this.he(e);
                while(_$r !== this.h){
                    _$r.tr -= 1;
                    _$r = _$r.rr;
                }
            };
        } else {
            t.re = (0, $89a8bb6a03dd2958$exports.TreeNode);
            t.v = function(e, r, i) {
                var t = this.se(e, r, i);
                if (t) this.fe(t);
                return this.M;
            };
            t.G = t.he;
        }
        t.h = new t.re;
        return t;
    };
    $603055251fe416ee$var$__extends(TreeContainer, e);
    TreeContainer.prototype.U = function(e, r) {
        var i = this.h;
        while(e){
            var t = this.$(e.u, r);
            if (t < 0) e = e.N;
            else if (t > 0) {
                i = e;
                e = e.K;
            } else return e;
        }
        return i;
    };
    TreeContainer.prototype.X = function(e, r) {
        var i = this.h;
        while(e){
            var t = this.$(e.u, r);
            if (t <= 0) e = e.N;
            else {
                i = e;
                e = e.K;
            }
        }
        return i;
    };
    TreeContainer.prototype.Y = function(e, r) {
        var i = this.h;
        while(e){
            var t = this.$(e.u, r);
            if (t < 0) {
                i = e;
                e = e.N;
            } else if (t > 0) e = e.K;
            else return e;
        }
        return i;
    };
    TreeContainer.prototype.Z = function(e, r) {
        var i = this.h;
        while(e){
            var t = this.$(e.u, r);
            if (t < 0) {
                i = e;
                e = e.N;
            } else e = e.K;
        }
        return i;
    };
    TreeContainer.prototype.ue = function(e) {
        while(true){
            var r = e.rr;
            if (r === this.h) return;
            if (e.ee === 1) {
                e.ee = 0;
                return;
            }
            if (e === r.K) {
                var i = r.N;
                if (i.ee === 1) {
                    i.ee = 0;
                    r.ee = 1;
                    if (r === this.W) this.W = r.ne();
                    else r.ne();
                } else {
                    if (i.N && i.N.ee === 1) {
                        i.ee = r.ee;
                        r.ee = 0;
                        i.N.ee = 0;
                        if (r === this.W) this.W = r.ne();
                        else r.ne();
                        return;
                    } else if (i.K && i.K.ee === 1) {
                        i.ee = 1;
                        i.K.ee = 0;
                        i.te();
                    } else {
                        i.ee = 1;
                        e = r;
                    }
                }
            } else {
                var i = r.K;
                if (i.ee === 1) {
                    i.ee = 0;
                    r.ee = 1;
                    if (r === this.W) this.W = r.te();
                    else r.te();
                } else {
                    if (i.K && i.K.ee === 1) {
                        i.ee = r.ee;
                        r.ee = 0;
                        i.K.ee = 0;
                        if (r === this.W) this.W = r.te();
                        else r.te();
                        return;
                    } else if (i.N && i.N.ee === 1) {
                        i.ee = 1;
                        i.N.ee = 0;
                        i.ne();
                    } else {
                        i.ee = 1;
                        e = r;
                    }
                }
            }
        }
    };
    TreeContainer.prototype.he = function(e) {
        var r, i;
        if (this.M === 1) {
            this.clear();
            return this.h;
        }
        var t = e;
        while(t.K || t.N){
            if (t.N) {
                t = t.N;
                while(t.K)t = t.K;
            } else t = t.K;
            r = $603055251fe416ee$var$__read([
                t.u,
                e.u
            ], 2), e.u = r[0], t.u = r[1];
            i = $603055251fe416ee$var$__read([
                t.p,
                e.p
            ], 2), e.p = i[0], t.p = i[1];
            e = t;
        }
        if (this.h.K === t) this.h.K = t.rr;
        else if (this.h.N === t) this.h.N = t.rr;
        this.ue(t);
        var n = t.rr;
        if (t === n.K) n.K = undefined;
        else n.N = undefined;
        this.M -= 1;
        this.W.ee = 0;
        return n;
    };
    TreeContainer.prototype.ae = function(e, r) {
        if (e === undefined) return false;
        var i = this.ae(e.K, r);
        if (i) return true;
        if (r(e)) return true;
        return this.ae(e.N, r);
    };
    TreeContainer.prototype.fe = function(e) {
        while(true){
            var r = e.rr;
            if (r.ee === 0) return;
            var i = r.rr;
            if (r === i.K) {
                var t = i.N;
                if (t && t.ee === 1) {
                    t.ee = r.ee = 0;
                    if (i === this.W) return;
                    i.ee = 1;
                    e = i;
                    continue;
                } else if (e === r.N) {
                    e.ee = 0;
                    if (e.K) e.K.rr = r;
                    if (e.N) e.N.rr = i;
                    r.N = e.K;
                    i.K = e.N;
                    e.K = r;
                    e.N = i;
                    if (i === this.W) {
                        this.W = e;
                        this.h.rr = e;
                    } else {
                        var n = i.rr;
                        if (n.K === i) n.K = e;
                        else n.N = e;
                    }
                    e.rr = i.rr;
                    r.rr = e;
                    i.rr = e;
                    i.ee = 1;
                    return {
                        parentNode: r,
                        grandParent: i,
                        curNode: e
                    };
                } else {
                    r.ee = 0;
                    if (i === this.W) this.W = i.te();
                    else i.te();
                    i.ee = 1;
                }
            } else {
                var t = i.K;
                if (t && t.ee === 1) {
                    t.ee = r.ee = 0;
                    if (i === this.W) return;
                    i.ee = 1;
                    e = i;
                    continue;
                } else if (e === r.K) {
                    e.ee = 0;
                    if (e.K) e.K.rr = i;
                    if (e.N) e.N.rr = r;
                    i.N = e.K;
                    r.K = e.N;
                    e.K = i;
                    e.N = r;
                    if (i === this.W) {
                        this.W = e;
                        this.h.rr = e;
                    } else {
                        var n = i.rr;
                        if (n.K === i) n.K = e;
                        else n.N = e;
                    }
                    e.rr = i.rr;
                    r.rr = e;
                    i.rr = e;
                    i.ee = 1;
                    return {
                        parentNode: r,
                        grandParent: i,
                        curNode: e
                    };
                } else {
                    r.ee = 0;
                    if (i === this.W) this.W = i.ne();
                    else i.ne();
                    i.ee = 1;
                }
            }
            return;
        }
    };
    TreeContainer.prototype.se = function(e, r, i) {
        if (this.W === undefined) {
            this.M += 1;
            this.W = new this.re(e, r);
            this.W.ee = 0;
            this.W.rr = this.h;
            this.h.rr = this.W;
            this.h.K = this.W;
            this.h.N = this.W;
            return;
        }
        var t;
        var n = this.h.K;
        var s = this.$(n.u, e);
        if (s === 0) {
            n.p = r;
            return;
        } else if (s > 0) {
            n.K = new this.re(e, r);
            n.K.rr = n;
            t = n.K;
            this.h.K = t;
        } else {
            var f = this.h.N;
            var h = this.$(f.u, e);
            if (h === 0) {
                f.p = r;
                return;
            } else if (h < 0) {
                f.N = new this.re(e, r);
                f.N.rr = f;
                t = f.N;
                this.h.N = t;
            } else {
                if (i !== undefined) {
                    var u = i.o;
                    if (u !== this.h) {
                        var a = this.$(u.u, e);
                        if (a === 0) {
                            u.p = r;
                            return;
                        } else if (a > 0) {
                            var o = u.L();
                            var l = this.$(o.u, e);
                            if (l === 0) {
                                o.p = r;
                                return;
                            } else if (l < 0) {
                                t = new this.re(e, r);
                                if (o.N === undefined) {
                                    o.N = t;
                                    t.rr = o;
                                } else {
                                    u.K = t;
                                    t.rr = u;
                                }
                            }
                        }
                    }
                }
                if (t === undefined) {
                    t = this.W;
                    while(true){
                        var v = this.$(t.u, e);
                        if (v > 0) {
                            if (t.K === undefined) {
                                t.K = new this.re(e, r);
                                t.K.rr = t;
                                t = t.K;
                                break;
                            }
                            t = t.K;
                        } else if (v < 0) {
                            if (t.N === undefined) {
                                t.N = new this.re(e, r);
                                t.N.rr = t;
                                t = t.N;
                                break;
                            }
                            t = t.N;
                        } else {
                            t.p = r;
                            return;
                        }
                    }
                }
            }
        }
        this.M += 1;
        return t;
    };
    TreeContainer.prototype.g = function(e, r) {
        while(e){
            var i = this.$(e.u, r);
            if (i < 0) e = e.N;
            else if (i > 0) e = e.K;
            else return e;
        }
        return e || this.h;
    };
    TreeContainer.prototype.clear = function() {
        this.M = 0;
        this.W = undefined;
        this.h.rr = undefined;
        this.h.K = this.h.N = undefined;
    };
    TreeContainer.prototype.updateKeyByIterator = function(e, r) {
        var i = e.o;
        if (i === this.h) (0, $64d42b96befe9c0d$export$2518338d0d5f16c0)();
        if (this.M === 1) {
            i.u = r;
            return true;
        }
        if (i === this.h.K) {
            if (this.$(i.m().u, r) > 0) {
                i.u = r;
                return true;
            }
            return false;
        }
        if (i === this.h.N) {
            if (this.$(i.L().u, r) < 0) {
                i.u = r;
                return true;
            }
            return false;
        }
        var t = i.L().u;
        if (this.$(t, r) >= 0) return false;
        var n = i.m().u;
        if (this.$(n, r) <= 0) return false;
        i.u = r;
        return true;
    };
    TreeContainer.prototype.eraseElementByPos = function(e) {
        if (e < 0 || e > this.M - 1) throw new RangeError;
        var r = 0;
        var i = this;
        this.ae(this.W, function(t) {
            if (e === r) {
                i.G(t);
                return true;
            }
            r += 1;
            return false;
        });
        return this.M;
    };
    TreeContainer.prototype.eraseElementByKey = function(e) {
        if (this.M === 0) return false;
        var r = this.g(this.W, e);
        if (r === this.h) return false;
        this.G(r);
        return true;
    };
    TreeContainer.prototype.eraseElementByIterator = function(e) {
        var r = e.o;
        if (r === this.h) (0, $64d42b96befe9c0d$export$2518338d0d5f16c0)();
        var i = r.N === undefined;
        var t = e.iteratorType === 0;
        if (t) {
            if (i) e.next();
        } else if (!i || r.K === undefined) e.next();
        this.G(r);
        return e;
    };
    TreeContainer.prototype.forEach = function(e) {
        var r, i;
        var t = 0;
        try {
            for(var n = $603055251fe416ee$var$__values(this), s = n.next(); !s.done; s = n.next()){
                var f = s.value;
                e(f, t++, this);
            }
        } catch (e) {
            r = {
                error: e
            };
        } finally{
            try {
                if (s && !s.done && (i = n["return"])) i.call(n);
            } finally{
                if (r) throw r.error;
            }
        }
    };
    TreeContainer.prototype.getElementByPos = function(e) {
        var r, i;
        if (e < 0 || e > this.M - 1) throw new RangeError;
        var t;
        var n = 0;
        try {
            for(var s = $603055251fe416ee$var$__values(this), f = s.next(); !f.done; f = s.next()){
                var h = f.value;
                if (n === e) {
                    t = h;
                    break;
                }
                n += 1;
            }
        } catch (e) {
            r = {
                error: e
            };
        } finally{
            try {
                if (f && !f.done && (i = s["return"])) i.call(s);
            } finally{
                if (r) throw r.error;
            }
        }
        return t;
    };
    TreeContainer.prototype.getHeight = function() {
        if (this.M === 0) return 0;
        var traversal = function traversal1(e) {
            if (!e) return 0;
            return Math.max(traversal(e.K), traversal(e.N)) + 1;
        };
        return traversal(this.W);
    };
    return TreeContainer;
}((0, $3206921eb3179ded$exports.Container));
var $603055251fe416ee$export$2e2bcd8739ae039 = $603055251fe416ee$var$TreeContainer;


var $bff61e1929ed5d11$exports = {};

$parcel$export($bff61e1929ed5d11$exports, "default", function () { return $bff61e1929ed5d11$export$2e2bcd8739ae039; }, function (v) { return $bff61e1929ed5d11$export$2e2bcd8739ae039 = v; });


var $bff61e1929ed5d11$var$__extends = undefined && undefined.t || function() {
    var extendStatics = function extendStatics1(r, t) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(r, t) {
            r.__proto__ = t;
        } || function(r, t) {
            for(var e in t)if (Object.prototype.hasOwnProperty.call(t, e)) r[e] = t[e];
        };
        return extendStatics(r, t);
    };
    return function(r, t) {
        var __ = function __() {
            this.constructor = r;
        };
        if (typeof t !== "function" && t !== null) throw new TypeError("Class extends value " + String(t) + " is not a constructor or null");
        extendStatics(r, t);
        r.prototype = t === null ? Object.create(t) : (__.prototype = t.prototype, new __);
    };
}();
var $bff61e1929ed5d11$var$TreeIterator = function(r) {
    var TreeIterator = function TreeIterator(t, e, i) {
        var n = r.call(this, i) || this;
        n.o = t;
        n.h = e;
        if (n.iteratorType === 0) {
            n.pre = function() {
                if (this.o === this.h.K) (0, $64d42b96befe9c0d$export$2518338d0d5f16c0)();
                this.o = this.o.L();
                return this;
            };
            n.next = function() {
                if (this.o === this.h) (0, $64d42b96befe9c0d$export$2518338d0d5f16c0)();
                this.o = this.o.m();
                return this;
            };
        } else {
            n.pre = function() {
                if (this.o === this.h.N) (0, $64d42b96befe9c0d$export$2518338d0d5f16c0)();
                this.o = this.o.m();
                return this;
            };
            n.next = function() {
                if (this.o === this.h) (0, $64d42b96befe9c0d$export$2518338d0d5f16c0)();
                this.o = this.o.L();
                return this;
            };
        }
        return n;
    };
    $bff61e1929ed5d11$var$__extends(TreeIterator, r);
    Object.defineProperty(TreeIterator.prototype, "index", {
        get: function get() {
            var _$r = this.o;
            var t = this.h.rr;
            if (_$r === this.h) {
                if (t) return t.tr - 1;
                return 0;
            }
            var e = 0;
            if (_$r.K) e += _$r.K.tr;
            while(_$r !== t){
                var i = _$r.rr;
                if (_$r === i.N) {
                    e += 1;
                    if (i.K) e += i.K.tr;
                }
                _$r = i;
            }
            return e;
        },
        enumerable: false,
        configurable: true
    });
    return TreeIterator;
}((0, $3206921eb3179ded$exports.ContainerIterator));
var $bff61e1929ed5d11$export$2e2bcd8739ae039 = $bff61e1929ed5d11$var$TreeIterator;



var $3cd4b87e2d33ae69$var$__extends = undefined && undefined.t || function() {
    var extendStatics = function extendStatics1(e, t) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(e, t) {
            e.__proto__ = t;
        } || function(e, t) {
            for(var r in t)if (Object.prototype.hasOwnProperty.call(t, r)) e[r] = t[r];
        };
        return extendStatics(e, t);
    };
    return function(e, t) {
        var __ = function __() {
            this.constructor = e;
        };
        if (typeof t !== "function" && t !== null) throw new TypeError("Class extends value " + String(t) + " is not a constructor or null");
        extendStatics(e, t);
        e.prototype = t === null ? Object.create(t) : (__.prototype = t.prototype, new __);
    };
}();
var $3cd4b87e2d33ae69$var$__generator = undefined && undefined.i || function(e, t) {
    var verb = function verb(e) {
        return function(t) {
            return step([
                e,
                t
            ]);
        };
    };
    var step = function step(u) {
        if (n) throw new TypeError("Generator is already executing.");
        while(r)try {
            if (n = 1, i && (o = u[0] & 2 ? i["return"] : u[0] ? i["throw"] || ((o = i["return"]) && o.call(i), 0) : i.next) && !(o = o.call(i, u[1])).done) return o;
            if (i = 0, o) u = [
                u[0] & 2,
                o.value
            ];
            switch(u[0]){
                case 0:
                case 1:
                    o = u;
                    break;
                case 4:
                    r.label++;
                    return {
                        value: u[1],
                        done: false
                    };
                case 5:
                    r.label++;
                    i = u[1];
                    u = [
                        0
                    ];
                    continue;
                case 7:
                    u = r.ops.pop();
                    r.trys.pop();
                    continue;
                default:
                    if (!(o = r.trys, o = o.length > 0 && o[o.length - 1]) && (u[0] === 6 || u[0] === 2)) {
                        r = 0;
                        continue;
                    }
                    if (u[0] === 3 && (!o || u[1] > o[0] && u[1] < o[3])) {
                        r.label = u[1];
                        break;
                    }
                    if (u[0] === 6 && r.label < o[1]) {
                        r.label = o[1];
                        o = u;
                        break;
                    }
                    if (o && r.label < o[2]) {
                        r.label = o[2];
                        r.ops.push(u);
                        break;
                    }
                    if (o[2]) r.ops.pop();
                    r.trys.pop();
                    continue;
            }
            u = t.call(e, r);
        } catch (e) {
            u = [
                6,
                e
            ];
            i = 0;
        } finally{
            n = o = 0;
        }
        if (u[0] & 5) throw u[1];
        return {
            value: u[0] ? u[1] : void 0,
            done: true
        };
    };
    var r = {
        label: 0,
        sent: function sent() {
            if (o[0] & 1) throw o[1];
            return o[1];
        },
        trys: [],
        ops: []
    }, n, i, o, u;
    return u = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (u[Symbol.iterator] = function() {
        return this;
    }), u;
};
var $3cd4b87e2d33ae69$var$__values = undefined && undefined.V || function(e) {
    var t = typeof Symbol === "function" && Symbol.iterator, r = t && e[t], n = 0;
    if (r) return r.call(e);
    if (e && typeof e.length === "number") return {
        next: function next() {
            if (e && n >= e.length) e = void 0;
            return {
                value: e && e[n++],
                done: !e
            };
        }
    };
    throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var $3cd4b87e2d33ae69$var$OrderedSetIterator = function(e) {
    var OrderedSetIterator = function OrderedSetIterator(t, r, n, i) {
        var o = e.call(this, t, r, i) || this;
        o.container = n;
        return o;
    };
    $3cd4b87e2d33ae69$var$__extends(OrderedSetIterator, e);
    Object.defineProperty(OrderedSetIterator.prototype, "pointer", {
        get: function get() {
            if (this.o === this.h) (0, $64d42b96befe9c0d$export$2518338d0d5f16c0)();
            return this.o.u;
        },
        enumerable: false,
        configurable: true
    });
    OrderedSetIterator.prototype.copy = function() {
        return new OrderedSetIterator(this.o, this.h, this.container, this.iteratorType);
    };
    return OrderedSetIterator;
}((0, $bff61e1929ed5d11$exports.default));
var $3cd4b87e2d33ae69$var$OrderedSet = function(e) {
    var OrderedSet = function OrderedSet(t, r, n) {
        if (t === void 0) t = [];
        var i = e.call(this, r, n) || this;
        var o = i;
        t.forEach(function(e) {
            o.insert(e);
        });
        return i;
    };
    $3cd4b87e2d33ae69$var$__extends(OrderedSet, e);
    OrderedSet.prototype.P = function(e) {
        return $3cd4b87e2d33ae69$var$__generator(this, function(t) {
            switch(t.label){
                case 0:
                    if (e === undefined) return [
                        2
                    ];
                    return [
                        5,
                        $3cd4b87e2d33ae69$var$__values(this.P(e.K))
                    ];
                case 1:
                    t.sent();
                    return [
                        4,
                        e.u
                    ];
                case 2:
                    t.sent();
                    return [
                        5,
                        $3cd4b87e2d33ae69$var$__values(this.P(e.N))
                    ];
                case 3:
                    t.sent();
                    return [
                        2
                    ];
            }
        });
    };
    OrderedSet.prototype.begin = function() {
        return new $3cd4b87e2d33ae69$var$OrderedSetIterator(this.h.K || this.h, this.h, this);
    };
    OrderedSet.prototype.end = function() {
        return new $3cd4b87e2d33ae69$var$OrderedSetIterator(this.h, this.h, this);
    };
    OrderedSet.prototype.rBegin = function() {
        return new $3cd4b87e2d33ae69$var$OrderedSetIterator(this.h.N || this.h, this.h, this, 1);
    };
    OrderedSet.prototype.rEnd = function() {
        return new $3cd4b87e2d33ae69$var$OrderedSetIterator(this.h, this.h, this, 1);
    };
    OrderedSet.prototype.front = function() {
        return this.h.K ? this.h.K.u : undefined;
    };
    OrderedSet.prototype.back = function() {
        return this.h.N ? this.h.N.u : undefined;
    };
    OrderedSet.prototype.insert = function(e, t) {
        return this.v(e, undefined, t);
    };
    OrderedSet.prototype.find = function(e) {
        var t = this.g(this.W, e);
        return new $3cd4b87e2d33ae69$var$OrderedSetIterator(t, this.h, this);
    };
    OrderedSet.prototype.lowerBound = function(e) {
        var t = this.U(this.W, e);
        return new $3cd4b87e2d33ae69$var$OrderedSetIterator(t, this.h, this);
    };
    OrderedSet.prototype.upperBound = function(e) {
        var t = this.X(this.W, e);
        return new $3cd4b87e2d33ae69$var$OrderedSetIterator(t, this.h, this);
    };
    OrderedSet.prototype.reverseLowerBound = function(e) {
        var t = this.Y(this.W, e);
        return new $3cd4b87e2d33ae69$var$OrderedSetIterator(t, this.h, this);
    };
    OrderedSet.prototype.reverseUpperBound = function(e) {
        var t = this.Z(this.W, e);
        return new $3cd4b87e2d33ae69$var$OrderedSetIterator(t, this.h, this);
    };
    OrderedSet.prototype.union = function(e) {
        var t = this;
        e.forEach(function(e) {
            t.insert(e);
        });
        return this.M;
    };
    OrderedSet.prototype[Symbol.iterator] = function() {
        return this.P(this.W);
    };
    return OrderedSet;
}((0, $603055251fe416ee$exports.default));
var $3cd4b87e2d33ae69$export$2e2bcd8739ae039 = $3cd4b87e2d33ae69$var$OrderedSet;


var $130d5448ea4ef76e$require$SortedSet = $3cd4b87e2d33ae69$exports.default;

var $130d5448ea4ef76e$var$debugTrace = (parcelRequire("8woo2"))("number-allocator:trace");

var $130d5448ea4ef76e$var$debugError = (parcelRequire("8woo2"))("number-allocator:error");
/**
 * Interval constructor
 * @constructor
 * @param {Number} low  - The lowest value of the interval
 * @param {Number} high - The highest value of the interval
 */ function $130d5448ea4ef76e$var$Interval(low, high) {
    this.low = low;
    this.high = high;
}
$130d5448ea4ef76e$var$Interval.prototype.equals = function(other) {
    return this.low === other.low && this.high === other.high;
};
$130d5448ea4ef76e$var$Interval.prototype.compare = function(other) {
    if (this.low < other.low && this.high < other.low) return -1;
    if (other.low < this.low && other.high < this.low) return 1;
    return 0;
};
/**
 * NumberAllocator constructor.
 * The all numbers are set to vacant status.
 * Time Complexity O(1)
 * @constructor
 * @param {Number} min  - The maximum number of allocatable. The number must be integer.
 * @param {Number} maxh - The minimum number of allocatable. The number must be integer.
 */ function $130d5448ea4ef76e$var$NumberAllocator(min, max) {
    if (!(this instanceof $130d5448ea4ef76e$var$NumberAllocator)) return new $130d5448ea4ef76e$var$NumberAllocator(min, max);
    this.min = min;
    this.max = max;
    this.ss = new $130d5448ea4ef76e$require$SortedSet([], function(lhs, rhs) {
        return lhs.compare(rhs);
    });
    $130d5448ea4ef76e$var$debugTrace("Create");
    this.clear();
}
/**
 * Get the first vacant number. The status of the number is not updated.
 * Time Complexity O(1)
 * @return {Number} - The first vacant number. If all numbers are occupied, return null.
 *                    When alloc() is called then the same value will be allocated.
 */ $130d5448ea4ef76e$var$NumberAllocator.prototype.firstVacant = function() {
    if (this.ss.size() === 0) return null;
    return this.ss.front().low;
};
/**
 * Allocate the first vacant number. The number become occupied status.
 * Time Complexity O(1)
 * @return {Number} - The first vacant number. If all numbers are occupied, return null.
 */ $130d5448ea4ef76e$var$NumberAllocator.prototype.alloc = function() {
    if (this.ss.size() === 0) {
        $130d5448ea4ef76e$var$debugTrace("alloc():empty");
        return null;
    }
    var it = this.ss.begin();
    var low = it.pointer.low;
    var high = it.pointer.high;
    var num = low;
    if (num + 1 <= high) // x|----|
    this.ss.updateKeyByIterator(it, new $130d5448ea4ef76e$var$Interval(low + 1, high));
    else this.ss.eraseElementByPos(0);
    $130d5448ea4ef76e$var$debugTrace("alloc():" + num);
    return num;
};
/**
 * Use the number. The number become occupied status.
 * If the number has already been occupied, then return false.
 * Time Complexity O(logN) : N is the number of intervals (not numbers)
 * @param {Number} num - The number to request use.
 * @return {Boolean} - If `num` was not occupied, then return true, otherwise return false.
 */ $130d5448ea4ef76e$var$NumberAllocator.prototype.use = function(num) {
    var key = new $130d5448ea4ef76e$var$Interval(num, num);
    var it = this.ss.lowerBound(key);
    if (!it.equals(this.ss.end())) {
        var low = it.pointer.low;
        var high = it.pointer.high;
        if (it.pointer.equals(key)) {
            // |x|
            this.ss.eraseElementByIterator(it);
            $130d5448ea4ef76e$var$debugTrace("use():" + num);
            return true;
        }
        // x |-----|
        if (low > num) return false;
        // |x----|
        if (low === num) {
            // x|----|
            this.ss.updateKeyByIterator(it, new $130d5448ea4ef76e$var$Interval(low + 1, high));
            $130d5448ea4ef76e$var$debugTrace("use():" + num);
            return true;
        }
        // |----x|
        if (high === num) {
            // |----|x
            this.ss.updateKeyByIterator(it, new $130d5448ea4ef76e$var$Interval(low, high - 1));
            $130d5448ea4ef76e$var$debugTrace("use():" + num);
            return true;
        }
        // |--x--|
        // x|--|
        this.ss.updateKeyByIterator(it, new $130d5448ea4ef76e$var$Interval(num + 1, high));
        // |--|x|--|
        this.ss.insert(new $130d5448ea4ef76e$var$Interval(low, num - 1));
        $130d5448ea4ef76e$var$debugTrace("use():" + num);
        return true;
    }
    $130d5448ea4ef76e$var$debugTrace("use():failed");
    return false;
};
/**
 * Deallocate the number. The number become vacant status.
 * Time Complexity O(logN) : N is the number of intervals (not numbers)
 * @param {Number} num - The number to deallocate. The number must be occupied status.
 *                       In other words, the number must be allocated by alloc() or occupied be use().
 */ $130d5448ea4ef76e$var$NumberAllocator.prototype.free = function(num) {
    if (num < this.min || num > this.max) {
        $130d5448ea4ef76e$var$debugError("free():" + num + " is out of range");
        return;
    }
    var key = new $130d5448ea4ef76e$var$Interval(num, num);
    var it = this.ss.upperBound(key);
    if (it.equals(this.ss.end())) {
        // ....v
        if (it.equals(this.ss.begin())) {
            // Insert new interval
            this.ss.insert(key);
            return;
        }
        it.pre();
        var low = it.pointer.high;
        var high = it.pointer.high;
        if (high + 1 === num) // Concat to left
        this.ss.updateKeyByIterator(it, new $130d5448ea4ef76e$var$Interval(low, num));
        else // Insert new interval
        this.ss.insert(key);
    } else if (it.equals(this.ss.begin())) {
        // v....
        if (num + 1 === it.pointer.low) {
            // Concat to right
            var high1 = it.pointer.high;
            this.ss.updateKeyByIterator(it, new $130d5448ea4ef76e$var$Interval(num, high1));
        } else // Insert new interval
        this.ss.insert(key);
    } else {
        // ..v..
        var rLow = it.pointer.low;
        var rHigh = it.pointer.high;
        it.pre();
        var lLow = it.pointer.low;
        var lHigh = it.pointer.high;
        if (lHigh + 1 === num) {
            if (num + 1 === rLow) {
                // Concat to left and right
                this.ss.eraseElementByIterator(it);
                this.ss.updateKeyByIterator(it, new $130d5448ea4ef76e$var$Interval(lLow, rHigh));
            } else // Concat to left
            this.ss.updateKeyByIterator(it, new $130d5448ea4ef76e$var$Interval(lLow, num));
        } else if (num + 1 === rLow) {
            // Concat to right
            this.ss.eraseElementByIterator(it.next());
            this.ss.insert(new $130d5448ea4ef76e$var$Interval(num, rHigh));
        } else // Insert new interval
        this.ss.insert(key);
    }
    $130d5448ea4ef76e$var$debugTrace("free():" + num);
};
/**
 * Clear all occupied numbers.
 * The all numbers are set to vacant status.
 * Time Complexity O(1)
 */ $130d5448ea4ef76e$var$NumberAllocator.prototype.clear = function() {
    $130d5448ea4ef76e$var$debugTrace("clear()");
    this.ss.clear();
    this.ss.insert(new $130d5448ea4ef76e$var$Interval(this.min, this.max));
};
/**
 * Get the number of intervals. Interval is internal structure of this library.
 * This function is for debugging.
 * Time Complexity O(1)
 * @return {Number} - The number of intervals.
 */ $130d5448ea4ef76e$var$NumberAllocator.prototype.intervalCount = function() {
    return this.ss.size();
};
/**
 * Dump the internal structor of the library.
 * This function is for debugging.
 * Time Complexity O(N) : N is the number of intervals (not numbers)
 */ $130d5448ea4ef76e$var$NumberAllocator.prototype.dump = function() {
    console.log("length:" + this.ss.size());
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = this.ss[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var element = _step.value;
            console.log(element);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
};
$130d5448ea4ef76e$exports = $130d5448ea4ef76e$var$NumberAllocator;


$dca4ea078af31392$export$97be38356e4a3d64 = $130d5448ea4ef76e$exports;


var $7a67e81d8b149a1f$require$NumberAllocator = $dca4ea078af31392$export$97be38356e4a3d64;
/**
 * Topic Alias sending manager
 * This holds both topic to alias and alias to topic map
 * @param {Number} [max] - topic alias maximum entries
 */ function $7a67e81d8b149a1f$var$TopicAliasSend(max) {
    if (!(this instanceof $7a67e81d8b149a1f$var$TopicAliasSend)) return new $7a67e81d8b149a1f$var$TopicAliasSend(max);
    if (max > 0) {
        this.aliasToTopic = new $880606d23f0ba2f2$exports({
            max: max
        });
        this.topicToAlias = {};
        this.numberAllocator = new $7a67e81d8b149a1f$require$NumberAllocator(1, max);
        this.max = max;
        this.length = 0;
    }
}
/**
 * Insert or update topic - alias entry.
 * @param {String} [topic] - topic
 * @param {Number} [alias] - topic alias
 * @returns {Boolean} - if success return true otherwise false
 */ $7a67e81d8b149a1f$var$TopicAliasSend.prototype.put = function(topic, alias) {
    if (alias === 0 || alias > this.max) return false;
    var entry = this.aliasToTopic.get(alias);
    if (entry) delete this.topicToAlias[entry];
    this.aliasToTopic.set(alias, topic);
    this.topicToAlias[topic] = alias;
    this.numberAllocator.use(alias);
    this.length = this.aliasToTopic.length;
    return true;
};
/**
 * Get topic by alias
 * @param {Number} [alias] - topic alias
 * @returns {String} - if mapped topic exists return topic, otherwise return undefined
 */ $7a67e81d8b149a1f$var$TopicAliasSend.prototype.getTopicByAlias = function(alias) {
    return this.aliasToTopic.get(alias);
};
/**
 * Get topic by alias
 * @param {String} [topic] - topic
 * @returns {Number} - if mapped topic exists return topic alias, otherwise return undefined
 */ $7a67e81d8b149a1f$var$TopicAliasSend.prototype.getAliasByTopic = function(topic) {
    var alias = this.topicToAlias[topic];
    if (typeof alias !== "undefined") this.aliasToTopic.get(alias) // LRU update
    ;
    return alias;
};
/**
 * Clear all entries
 */ $7a67e81d8b149a1f$var$TopicAliasSend.prototype.clear = function() {
    this.aliasToTopic.reset();
    this.topicToAlias = {};
    this.numberAllocator.clear();
    this.length = 0;
};
/**
 * Get Least Recently Used (LRU) topic alias
 * @returns {Number} - if vacant alias exists then return it, otherwise then return LRU alias
 */ $7a67e81d8b149a1f$var$TopicAliasSend.prototype.getLruAlias = function() {
    var alias = this.numberAllocator.firstVacant();
    if (alias) return alias;
    return this.aliasToTopic.keys()[this.aliasToTopic.length - 1];
};
$7a67e81d8b149a1f$exports = $7a67e81d8b149a1f$var$TopicAliasSend;


var $5993cd84c0f42d09$export$8f49e4af10703ce3;
var $5993cd84c0f42d09$export$80d376111cc09ad7;
var $5993cd84c0f42d09$export$df92035d47a0b6a3;

$5993cd84c0f42d09$export$8f49e4af10703ce3 = (parcelRequire("g3DWB")).parser;

$5993cd84c0f42d09$export$80d376111cc09ad7 = (parcelRequire("bDv4t"));

$5993cd84c0f42d09$export$df92035d47a0b6a3 = (parcelRequire("fHNWs"));


var $2f81f727f7297774$exports = {};
"use strict";
/**
 * DefaultMessageAllocator constructor
 * @constructor
 */ function $2f81f727f7297774$var$DefaultMessageIdProvider() {
    if (!(this instanceof $2f81f727f7297774$var$DefaultMessageIdProvider)) return new $2f81f727f7297774$var$DefaultMessageIdProvider();
    /**
   * MessageIDs starting with 1
   * ensure that nextId is min. 1, see https://github.com/mqttjs/MQTT.js/issues/810
   */ this.nextId = Math.max(1, Math.floor(Math.random() * 65535));
}
/**
 * allocate
 *
 * Get the next messageId.
 * @return unsigned int
 */ $2f81f727f7297774$var$DefaultMessageIdProvider.prototype.allocate = function() {
    // id becomes current state of this.nextId and increments afterwards
    var id = this.nextId++;
    // Ensure 16 bit unsigned int (max 65535, nextId got one higher)
    if (this.nextId === 65536) this.nextId = 1;
    return id;
};
/**
 * getLastAllocated
 * Get the last allocated messageId.
 * @return unsigned int
 */ $2f81f727f7297774$var$DefaultMessageIdProvider.prototype.getLastAllocated = function() {
    return this.nextId === 1 ? 65535 : this.nextId - 1;
};
/**
 * register
 * Register messageId. If success return true, otherwise return false.
 * @param { unsigned int } - messageId to register,
 * @return boolean
 */ $2f81f727f7297774$var$DefaultMessageIdProvider.prototype.register = function(messageId) {
    return true;
};
/**
 * deallocate
 * Deallocate messageId.
 * @param { unsigned int } - messageId to deallocate,
 */ $2f81f727f7297774$var$DefaultMessageIdProvider.prototype.deallocate = function(messageId) {};
/**
 * clear
 * Deallocate all messageIds.
 */ $2f81f727f7297774$var$DefaultMessageIdProvider.prototype.clear = function() {};
$2f81f727f7297774$exports = $2f81f727f7297774$var$DefaultMessageIdProvider;



var $2M7q0 = parcelRequire("2M7q0");
var $c67560551cdef195$require$Writable = $2M7q0.Writable;

var $ScPjF = parcelRequire("ScPjF");
var $90c655de9001dfb0$exports = {};
"use strict";
function $90c655de9001dfb0$var$ReInterval(callback, interval, args) {
    var self = this;
    this._callback = callback;
    this._args = args;
    this._interval = setInterval(callback, interval, this._args);
    this.reschedule = function(interval) {
        // if no interval entered, use the interval passed in on creation
        if (!interval) interval = self._interval;
        if (self._interval) clearInterval(self._interval);
        self._interval = setInterval(self._callback, interval, self._args);
    };
    this.clear = function() {
        if (self._interval) {
            clearInterval(self._interval);
            self._interval = undefined;
        }
    };
    this.destroy = function() {
        if (self._interval) clearInterval(self._interval);
        self._callback = undefined;
        self._interval = undefined;
        self._args = undefined;
    };
}
function $90c655de9001dfb0$var$reInterval() {
    if (typeof arguments[0] !== "function") throw new Error("callback needed");
    if (typeof arguments[1] !== "number") throw new Error("interval needed");
    var args;
    if (arguments.length > 0) {
        args = new Array(arguments.length - 2);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i + 2];
    }
    return new $90c655de9001dfb0$var$ReInterval(arguments[0], arguments[1], args);
}
$90c655de9001dfb0$exports = $90c655de9001dfb0$var$reInterval;


var $6f2bafa2e12c2dd7$exports = {};
"use strict";

$6f2bafa2e12c2dd7$exports = (parcelRequire("hnDbx"))();


var $41c3174a5c17191c$exports = {};
"use strict";
/**
 * Validate a topic to see if it's valid or not.
 * A topic is valid if it follow below rules:
 * - Rule #1: If any part of the topic is not `+` or `#`, then it must not contain `+` and '#'
 * - Rule #2: Part `#` must be located at the end of the mailbox
 *
 * @param {String} topic - A topic
 * @returns {Boolean} If the topic is valid, returns true. Otherwise, returns false.
 */ function $41c3174a5c17191c$var$validateTopic(topic) {
    var parts = topic.split("/");
    for(var i = 0; i < parts.length; i++){
        if (parts[i] === "+") continue;
        if (parts[i] === "#") // for Rule #2
        return i === parts.length - 1;
        if (parts[i].indexOf("+") !== -1 || parts[i].indexOf("#") !== -1) return false;
    }
    return true;
}
/**
 * Validate an array of topics to see if any of them is valid or not
  * @param {Array} topics - Array of topics
 * @returns {String} If the topics is valid, returns null. Otherwise, returns the invalid one
 */ function $41c3174a5c17191c$var$validateTopics(topics) {
    if (topics.length === 0) return "empty_topic_list";
    for(var i = 0; i < topics.length; i++){
        if (!$41c3174a5c17191c$var$validateTopic(topics[i])) return topics[i];
    }
    return null;
}
$41c3174a5c17191c$exports = {
    validateTopics: $41c3174a5c17191c$var$validateTopics
};




var $c67560551cdef195$var$debug = (parcelRequire("8woo2"))("mqttjs:client");
var $c67560551cdef195$var$nextTick = $lFBFq ? $lFBFq.nextTick : function nextTick(callback) {
    setTimeout(callback, 0);
};
var $c67560551cdef195$var$setImmediate = $parcel$global.setImmediate || function(callback) {
    // works in node v0.8
    $c67560551cdef195$var$nextTick(callback);
};
var $c67560551cdef195$var$defaultConnectOptions = {
    keepalive: 60,
    reschedulePings: true,
    protocolId: "MQTT",
    protocolVersion: 4,
    reconnectPeriod: 1000,
    connectTimeout: 30000,
    clean: true,
    resubscribe: true
};
var $c67560551cdef195$var$socketErrors = [
    "ECONNREFUSED",
    "EADDRINUSE",
    "ECONNRESET",
    "ENOTFOUND"
];
// Other Socket Errors: EADDRINUSE, ECONNRESET, ENOTFOUND.
var $c67560551cdef195$var$errors = {
    0: "",
    1: "Unacceptable protocol version",
    2: "Identifier rejected",
    3: "Server unavailable",
    4: "Bad username or password",
    5: "Not authorized",
    16: "No matching subscribers",
    17: "No subscription existed",
    128: "Unspecified error",
    129: "Malformed Packet",
    130: "Protocol Error",
    131: "Implementation specific error",
    132: "Unsupported Protocol Version",
    133: "Client Identifier not valid",
    134: "Bad User Name or Password",
    135: "Not authorized",
    136: "Server unavailable",
    137: "Server busy",
    138: "Banned",
    139: "Server shutting down",
    140: "Bad authentication method",
    141: "Keep Alive timeout",
    142: "Session taken over",
    143: "Topic Filter invalid",
    144: "Topic Name invalid",
    145: "Packet identifier in use",
    146: "Packet Identifier not found",
    147: "Receive Maximum exceeded",
    148: "Topic Alias invalid",
    149: "Packet too large",
    150: "Message rate too high",
    151: "Quota exceeded",
    152: "Administrative action",
    153: "Payload format invalid",
    154: "Retain not supported",
    155: "QoS not supported",
    156: "Use another server",
    157: "Server moved",
    158: "Shared Subscriptions not supported",
    159: "Connection rate exceeded",
    160: "Maximum connect time",
    161: "Subscription Identifiers not supported",
    162: "Wildcard Subscriptions not supported"
};
function $c67560551cdef195$var$defaultId() {
    return "mqttjs_" + Math.random().toString(16).substr(2, 8);
}
function $c67560551cdef195$var$applyTopicAlias(client, packet) {
    if (client.options.protocolVersion === 5) {
        if (packet.cmd === "publish") {
            var alias;
            if (packet.properties) alias = packet.properties.topicAlias;
            var topic = packet.topic.toString();
            if (client.topicAliasSend) {
                if (alias) {
                    if (topic.length !== 0) {
                        // register topic alias
                        $c67560551cdef195$var$debug("applyTopicAlias :: register topic: %s - alias: %d", topic, alias);
                        if (!client.topicAliasSend.put(topic, alias)) {
                            $c67560551cdef195$var$debug("applyTopicAlias :: error out of range. topic: %s - alias: %d", topic, alias);
                            return new Error("Sending Topic Alias out of range");
                        }
                    }
                } else if (topic.length !== 0) {
                    if (client.options.autoAssignTopicAlias) {
                        alias = client.topicAliasSend.getAliasByTopic(topic);
                        if (alias) {
                            packet.topic = "";
                            packet.properties = (0, $e3da13796957a2f1$export$2e2bcd8739ae039)((0, $b1abbefc8efc47e3$export$2e2bcd8739ae039)({}, packet.properties), {
                                topicAlias: alias
                            });
                            $c67560551cdef195$var$debug("applyTopicAlias :: auto assign(use) topic: %s - alias: %d", topic, alias);
                        } else {
                            alias = client.topicAliasSend.getLruAlias();
                            client.topicAliasSend.put(topic, alias);
                            packet.properties = (0, $e3da13796957a2f1$export$2e2bcd8739ae039)((0, $b1abbefc8efc47e3$export$2e2bcd8739ae039)({}, packet.properties), {
                                topicAlias: alias
                            });
                            $c67560551cdef195$var$debug("applyTopicAlias :: auto assign topic: %s - alias: %d", topic, alias);
                        }
                    } else if (client.options.autoUseTopicAlias) {
                        alias = client.topicAliasSend.getAliasByTopic(topic);
                        if (alias) {
                            packet.topic = "";
                            packet.properties = (0, $e3da13796957a2f1$export$2e2bcd8739ae039)((0, $b1abbefc8efc47e3$export$2e2bcd8739ae039)({}, packet.properties), {
                                topicAlias: alias
                            });
                            $c67560551cdef195$var$debug("applyTopicAlias :: auto use topic: %s - alias: %d", topic, alias);
                        }
                    }
                }
            } else if (alias) {
                $c67560551cdef195$var$debug("applyTopicAlias :: error out of range. topic: %s - alias: %d", topic, alias);
                return new Error("Sending Topic Alias out of range");
            }
        }
    }
}
function $c67560551cdef195$var$removeTopicAliasAndRecoverTopicName(client, packet) {
    var alias;
    if (packet.properties) alias = packet.properties.topicAlias;
    var topic = packet.topic.toString();
    if (topic.length === 0) {
        // restore topic from alias
        if (typeof alias === "undefined") return new Error("Unregistered Topic Alias");
        else {
            topic = client.topicAliasSend.getTopicByAlias(alias);
            if (typeof topic === "undefined") return new Error("Unregistered Topic Alias");
            else packet.topic = topic;
        }
    }
    if (alias) delete packet.properties.topicAlias;
}
function $c67560551cdef195$var$sendPacket(client, packet, cb) {
    $c67560551cdef195$var$debug("sendPacket :: packet: %O", packet);
    $c67560551cdef195$var$debug("sendPacket :: emitting `packetsend`");
    client.emit("packetsend", packet);
    $c67560551cdef195$var$debug("sendPacket :: writing to stream");
    var result = $5993cd84c0f42d09$export$df92035d47a0b6a3(packet, client.stream, client.options);
    $c67560551cdef195$var$debug("sendPacket :: writeToStream result %s", result);
    if (!result && cb && cb !== $c67560551cdef195$var$nop) {
        $c67560551cdef195$var$debug("sendPacket :: handle events on `drain` once through callback.");
        client.stream.once("drain", cb);
    } else if (cb) {
        $c67560551cdef195$var$debug("sendPacket :: invoking cb");
        cb();
    }
}
function $c67560551cdef195$var$flush(queue) {
    if (queue) {
        $c67560551cdef195$var$debug("flush: queue exists? %b", !!queue);
        Object.keys(queue).forEach(function(messageId) {
            if (typeof queue[messageId].cb === "function") {
                queue[messageId].cb(new Error("Connection closed"));
                // This is suspicious.  Why do we only delete this if we have a callbck?
                // If this is by-design, then adding no as callback would cause this to get deleted unintentionally.
                delete queue[messageId];
            }
        });
    }
}
function $c67560551cdef195$var$flushVolatile(queue) {
    if (queue) {
        $c67560551cdef195$var$debug("flushVolatile :: deleting volatile messages from the queue and setting their callbacks as error function");
        Object.keys(queue).forEach(function(messageId) {
            if (queue[messageId]["volatile"] && typeof queue[messageId].cb === "function") {
                queue[messageId].cb(new Error("Connection closed"));
                delete queue[messageId];
            }
        });
    }
}
function $c67560551cdef195$var$storeAndSend(client, packet, cb, cbStorePut) {
    $c67560551cdef195$var$debug("storeAndSend :: store packet with cmd %s to outgoingStore", packet.cmd);
    var storePacket = packet;
    var err;
    if (storePacket.cmd === "publish") {
        // The original packet is for sending.
        // The cloned storePacket is for storing to resend on reconnect.
        // Topic Alias must not be used after disconnected.
        storePacket = $6f2bafa2e12c2dd7$exports(packet);
        err = $c67560551cdef195$var$removeTopicAliasAndRecoverTopicName(client, storePacket);
        if (err) return cb && cb(err);
    }
    client.outgoingStore.put(storePacket, function storedPacket(err) {
        if (err) return cb && cb(err);
        cbStorePut();
        $c67560551cdef195$var$sendPacket(client, packet, cb);
    });
}
function $c67560551cdef195$var$nop(error) {
    $c67560551cdef195$var$debug("nop ::", error);
}
/**
 * MqttClient constructor
 *
 * @param {Stream} stream - stream
 * @param {Object} [options] - connection options
 * (see Connection#connect)
 */ function $c67560551cdef195$var$MqttClient(streamBuilder, options) {
    var k;
    var that = this;
    if (!(this instanceof $c67560551cdef195$var$MqttClient)) return new $c67560551cdef195$var$MqttClient(streamBuilder, options);
    this.options = options || {};
    // Defaults
    for(k in $c67560551cdef195$var$defaultConnectOptions)if (typeof this.options[k] === "undefined") this.options[k] = $c67560551cdef195$var$defaultConnectOptions[k];
    else this.options[k] = options[k];
    $c67560551cdef195$var$debug("MqttClient :: options.protocol", options.protocol);
    $c67560551cdef195$var$debug("MqttClient :: options.protocolVersion", options.protocolVersion);
    $c67560551cdef195$var$debug("MqttClient :: options.username", options.username);
    $c67560551cdef195$var$debug("MqttClient :: options.keepalive", options.keepalive);
    $c67560551cdef195$var$debug("MqttClient :: options.reconnectPeriod", options.reconnectPeriod);
    $c67560551cdef195$var$debug("MqttClient :: options.rejectUnauthorized", options.rejectUnauthorized);
    $c67560551cdef195$var$debug("MqttClient :: options.topicAliasMaximum", options.topicAliasMaximum);
    this.options.clientId = typeof options.clientId === "string" ? options.clientId : $c67560551cdef195$var$defaultId();
    $c67560551cdef195$var$debug("MqttClient :: clientId", this.options.clientId);
    this.options.customHandleAcks = options.protocolVersion === 5 && options.customHandleAcks ? options.customHandleAcks : function() {
        arguments[3](0);
    };
    this.streamBuilder = streamBuilder;
    this.messageIdProvider = typeof this.options.messageIdProvider === "undefined" ? new $2f81f727f7297774$exports() : this.options.messageIdProvider;
    // Inflight message storages
    this.outgoingStore = options.outgoingStore || new $655a5fdbc2e87cf5$exports();
    this.incomingStore = options.incomingStore || new $655a5fdbc2e87cf5$exports();
    // Should QoS zero messages be queued when the connection is broken?
    this.queueQoSZero = options.queueQoSZero === undefined ? true : options.queueQoSZero;
    // map of subscribed topics to support reconnection
    this._resubscribeTopics = {};
    // map of a subscribe messageId and a topic
    this.messageIdToTopic = {};
    // Ping timer, setup in _setupPingTimer
    this.pingTimer = null;
    // Is the client connected?
    this.connected = false;
    // Are we disconnecting?
    this.disconnecting = false;
    // Packet queue
    this.queue = [];
    // connack timer
    this.connackTimer = null;
    // Reconnect timer
    this.reconnectTimer = null;
    // Is processing store?
    this._storeProcessing = false;
    // Packet Ids are put into the store during store processing
    this._packetIdsDuringStoreProcessing = {};
    // Store processing queue
    this._storeProcessingQueue = [];
    // Inflight callbacks
    this.outgoing = {};
    // True if connection is first time.
    this._firstConnection = true;
    if (options.topicAliasMaximum > 0) {
        if (options.topicAliasMaximum > 0xffff) $c67560551cdef195$var$debug("MqttClient :: options.topicAliasMaximum is out of range");
        else this.topicAliasRecv = new $7c9ef0068c38161e$exports(options.topicAliasMaximum);
    }
    // Send queued packets
    this.on("connect", function() {
        var queue = this.queue;
        function deliver() {
            var entry = queue.shift();
            $c67560551cdef195$var$debug("deliver :: entry %o", entry);
            var packet = null;
            if (!entry) {
                that._resubscribe();
                return;
            }
            packet = entry.packet;
            $c67560551cdef195$var$debug("deliver :: call _sendPacket for %o", packet);
            var send = true;
            if (packet.messageId && packet.messageId !== 0) {
                if (!that.messageIdProvider.register(packet.messageId)) send = false;
            }
            if (send) that._sendPacket(packet, function(err) {
                if (entry.cb) entry.cb(err);
                deliver();
            });
            else {
                $c67560551cdef195$var$debug("messageId: %d has already used. The message is skipped and removed.", packet.messageId);
                deliver();
            }
        }
        $c67560551cdef195$var$debug("connect :: sending queued packets");
        deliver();
    });
    this.on("close", function() {
        $c67560551cdef195$var$debug("close :: connected set to `false`");
        this.connected = false;
        $c67560551cdef195$var$debug("close :: clearing connackTimer");
        clearTimeout(this.connackTimer);
        $c67560551cdef195$var$debug("close :: clearing ping timer");
        if (that.pingTimer !== null) {
            that.pingTimer.clear();
            that.pingTimer = null;
        }
        if (this.topicAliasRecv) this.topicAliasRecv.clear();
        $c67560551cdef195$var$debug("close :: calling _setupReconnect");
        this._setupReconnect();
    });
    $c67560551cdef195$require$EventEmitter.call(this);
    $c67560551cdef195$var$debug("MqttClient :: setting up stream");
    this._setupStream();
}
$ScPjF($c67560551cdef195$var$MqttClient, $c67560551cdef195$require$EventEmitter);
/**
 * setup the event handlers in the inner stream.
 *
 * @api private
 */ $c67560551cdef195$var$MqttClient.prototype._setupStream = function() {
    var _this = this;
    var nextTickWork = function nextTickWork() {
        if (packets.length) $c67560551cdef195$var$nextTick(work);
        else {
            var done = completeParse;
            completeParse = null;
            done();
        }
    };
    var work = function work() {
        $c67560551cdef195$var$debug("work :: getting next packet in queue");
        var packet = packets.shift();
        if (packet) {
            $c67560551cdef195$var$debug("work :: packet pulled from queue");
            that._handlePacket(packet, nextTickWork);
        } else {
            $c67560551cdef195$var$debug("work :: no packets in queue");
            var done = completeParse;
            completeParse = null;
            $c67560551cdef195$var$debug("work :: done flag is %s", !!done);
            if (done) done();
        }
    };
    var streamErrorHandler = function streamErrorHandler(error) {
        $c67560551cdef195$var$debug("streamErrorHandler :: error", error.message);
        if ($c67560551cdef195$var$socketErrors.includes(error.code)) {
            // handle error
            $c67560551cdef195$var$debug("streamErrorHandler :: emitting error");
            that.emit("error", error);
        } else $c67560551cdef195$var$nop(error);
    };
    var that = this;
    var writable = new $c67560551cdef195$require$Writable();
    var parser = $5993cd84c0f42d09$export$8f49e4af10703ce3(this.options);
    var completeParse = null;
    var packets = [];
    $c67560551cdef195$var$debug("_setupStream :: calling method to clear reconnect");
    this._clearReconnect();
    $c67560551cdef195$var$debug("_setupStream :: using streamBuilder provided to client to create stream");
    this.stream = this.streamBuilder(this);
    parser.on("packet", function(packet) {
        $c67560551cdef195$var$debug("parser :: on packet push to packets array.");
        packets.push(packet);
    });
    writable._write = function(buf, enc, done) {
        completeParse = done;
        $c67560551cdef195$var$debug("writable stream :: parsing buffer");
        parser.parse(buf);
        work();
    };
    $c67560551cdef195$var$debug("_setupStream :: pipe stream to writable stream");
    this.stream.pipe(writable);
    // Suppress connection errors
    this.stream.on("error", streamErrorHandler);
    // Echo stream close
    this.stream.on("close", function() {
        $c67560551cdef195$var$debug("(%s)stream :: on close", that.options.clientId);
        $c67560551cdef195$var$flushVolatile(that.outgoing);
        $c67560551cdef195$var$debug("stream: emit close to MqttClient");
        that.emit("close");
    });
    // Send a connect packet
    $c67560551cdef195$var$debug("_setupStream: sending packet `connect`");
    var connectPacket = Object.create(this.options);
    connectPacket.cmd = "connect";
    if (this.topicAliasRecv) {
        if (!connectPacket.properties) connectPacket.properties = {};
        if (this.topicAliasRecv) connectPacket.properties.topicAliasMaximum = this.topicAliasRecv.max;
    }
    // avoid message queue
    $c67560551cdef195$var$sendPacket(this, connectPacket);
    // Echo connection errors
    parser.on("error", this.emit.bind(this, "error"));
    // auth
    if (this.options.properties) {
        if (!this.options.properties.authenticationMethod && this.options.properties.authenticationData) {
            that.end(function() {
                return _this.emit("error", new Error("Packet has no Authentication Method"));
            });
            return this;
        }
        if (this.options.properties.authenticationMethod && this.options.authPacket && typeof this.options.authPacket === "object") {
            var authPacket = $95223428da314994$exports({
                cmd: "auth",
                reasonCode: 0
            }, this.options.authPacket);
            $c67560551cdef195$var$sendPacket(this, authPacket);
        }
    }
    // many drain listeners are needed for qos 1 callbacks if the connection is intermittent
    this.stream.setMaxListeners(1000);
    clearTimeout(this.connackTimer);
    this.connackTimer = setTimeout(function() {
        $c67560551cdef195$var$debug("!!connectTimeout hit!! Calling _cleanUp with force `true`");
        that._cleanUp(true);
    }, this.options.connectTimeout);
};
$c67560551cdef195$var$MqttClient.prototype._handlePacket = function(packet, done) {
    var options = this.options;
    if (options.protocolVersion === 5 && options.properties && options.properties.maximumPacketSize && options.properties.maximumPacketSize < packet.length) {
        this.emit("error", new Error("exceeding packets size " + packet.cmd));
        this.end({
            reasonCode: 149,
            properties: {
                reasonString: "Maximum packet size was exceeded"
            }
        });
        return this;
    }
    $c67560551cdef195$var$debug("_handlePacket :: emitting packetreceive");
    this.emit("packetreceive", packet);
    switch(packet.cmd){
        case "publish":
            this._handlePublish(packet, done);
            break;
        case "puback":
        case "pubrec":
        case "pubcomp":
        case "suback":
        case "unsuback":
            this._handleAck(packet);
            done();
            break;
        case "pubrel":
            this._handlePubrel(packet, done);
            break;
        case "connack":
            this._handleConnack(packet);
            done();
            break;
        case "auth":
            this._handleAuth(packet);
            done();
            break;
        case "pingresp":
            this._handlePingresp(packet);
            done();
            break;
        case "disconnect":
            this._handleDisconnect(packet);
            done();
            break;
        default:
            break;
    }
};
$c67560551cdef195$var$MqttClient.prototype._checkDisconnecting = function(callback) {
    if (this.disconnecting) {
        if (callback && callback !== $c67560551cdef195$var$nop) callback(new Error("client disconnecting"));
        else this.emit("error", new Error("client disconnecting"));
    }
    return this.disconnecting;
};
/**
 * publish - publish <message> to <topic>
 *
 * @param {String} topic - topic to publish to
 * @param {String, Buffer} message - message to publish
 * @param {Object} [opts] - publish options, includes:
 *    {Number} qos - qos level to publish on
 *    {Boolean} retain - whether or not to retain the message
 *    {Boolean} dup - whether or not mark a message as duplicate
 *    {Function} cbStorePut - function(){} called when message is put into `outgoingStore`
 * @param {Function} [callback] - function(err){}
 *    called when publish succeeds or fails
 * @returns {MqttClient} this - for chaining
 * @api public
 *
 * @example client.publish('topic', 'message');
 * @example
 *     client.publish('topic', 'message', {qos: 1, retain: true, dup: true});
 * @example client.publish('topic', 'message', console.log);
 */ $c67560551cdef195$var$MqttClient.prototype.publish = function(topic, message, opts, callback) {
    $c67560551cdef195$var$debug("publish :: message `%s` to topic `%s`", message, topic);
    var options = this.options;
    // .publish(topic, payload, cb);
    if (typeof opts === "function") {
        callback = opts;
        opts = null;
    }
    // default opts
    var defaultOpts = {
        qos: 0,
        retain: false,
        dup: false
    };
    opts = $95223428da314994$exports(defaultOpts, opts);
    if (this._checkDisconnecting(callback)) return this;
    var that = this;
    var publishProc = function publishProc() {
        var messageId = 0;
        if (opts.qos === 1 || opts.qos === 2) {
            messageId = that._nextId();
            if (messageId === null) {
                $c67560551cdef195$var$debug("No messageId left");
                return false;
            }
        }
        var packet = {
            cmd: "publish",
            topic: topic,
            payload: message,
            qos: opts.qos,
            retain: opts.retain,
            messageId: messageId,
            dup: opts.dup
        };
        if (options.protocolVersion === 5) packet.properties = opts.properties;
        $c67560551cdef195$var$debug("publish :: qos", opts.qos);
        switch(opts.qos){
            case 1:
            case 2:
                // Add to callbacks
                that.outgoing[packet.messageId] = {
                    volatile: false,
                    cb: callback || $c67560551cdef195$var$nop
                };
                $c67560551cdef195$var$debug("MqttClient:publish: packet cmd: %s", packet.cmd);
                that._sendPacket(packet, undefined, opts.cbStorePut);
                break;
            default:
                $c67560551cdef195$var$debug("MqttClient:publish: packet cmd: %s", packet.cmd);
                that._sendPacket(packet, callback, opts.cbStorePut);
                break;
        }
        return true;
    };
    if (this._storeProcessing || this._storeProcessingQueue.length > 0 || !publishProc()) this._storeProcessingQueue.push({
        invoke: publishProc,
        cbStorePut: opts.cbStorePut,
        callback: callback
    });
    return this;
};
/**
 * subscribe - subscribe to <topic>
 *
 * @param {String, Array, Object} topic - topic(s) to subscribe to, supports objects in the form {'topic': qos}
 * @param {Object} [opts] - optional subscription options, includes:
 *    {Number} qos - subscribe qos level
 * @param {Function} [callback] - function(err, granted){} where:
 *    {Error} err - subscription error (none at the moment!)
 *    {Array} granted - array of {topic: 't', qos: 0}
 * @returns {MqttClient} this - for chaining
 * @api public
 * @example client.subscribe('topic');
 * @example client.subscribe('topic', {qos: 1});
 * @example client.subscribe({'topic': {qos: 0}, 'topic2': {qos: 1}}, console.log);
 * @example client.subscribe('topic', console.log);
 */ $c67560551cdef195$var$MqttClient.prototype.subscribe = function() {
    var that = this;
    var args = new Array(arguments.length);
    for(var i = 0; i < arguments.length; i++)args[i] = arguments[i];
    var subs = [];
    var obj = args.shift();
    var resubscribe = obj.resubscribe;
    var callback = args.pop() || $c67560551cdef195$var$nop;
    var opts = args.pop();
    var version = this.options.protocolVersion;
    delete obj.resubscribe;
    if (typeof obj === "string") obj = [
        obj
    ];
    if (typeof callback !== "function") {
        opts = callback;
        callback = $c67560551cdef195$var$nop;
    }
    var invalidTopic = $41c3174a5c17191c$exports.validateTopics(obj);
    if (invalidTopic !== null) {
        $c67560551cdef195$var$setImmediate(callback, new Error("Invalid topic " + invalidTopic));
        return this;
    }
    if (this._checkDisconnecting(callback)) {
        $c67560551cdef195$var$debug("subscribe: discconecting true");
        return this;
    }
    var defaultOpts = {
        qos: 0
    };
    if (version === 5) {
        defaultOpts.nl = false;
        defaultOpts.rap = false;
        defaultOpts.rh = 0;
    }
    opts = $95223428da314994$exports(defaultOpts, opts);
    if (Array.isArray(obj)) obj.forEach(function(topic) {
        $c67560551cdef195$var$debug("subscribe: array topic %s", topic);
        if (!Object.prototype.hasOwnProperty.call(that._resubscribeTopics, topic) || that._resubscribeTopics[topic].qos < opts.qos || resubscribe) {
            var currentOpts = {
                topic: topic,
                qos: opts.qos
            };
            if (version === 5) {
                currentOpts.nl = opts.nl;
                currentOpts.rap = opts.rap;
                currentOpts.rh = opts.rh;
                currentOpts.properties = opts.properties;
            }
            $c67560551cdef195$var$debug("subscribe: pushing topic `%s` and qos `%s` to subs list", currentOpts.topic, currentOpts.qos);
            subs.push(currentOpts);
        }
    });
    else Object.keys(obj).forEach(function(k) {
        $c67560551cdef195$var$debug("subscribe: object topic %s", k);
        if (!Object.prototype.hasOwnProperty.call(that._resubscribeTopics, k) || that._resubscribeTopics[k].qos < obj[k].qos || resubscribe) {
            var currentOpts = {
                topic: k,
                qos: obj[k].qos
            };
            if (version === 5) {
                currentOpts.nl = obj[k].nl;
                currentOpts.rap = obj[k].rap;
                currentOpts.rh = obj[k].rh;
                currentOpts.properties = opts.properties;
            }
            $c67560551cdef195$var$debug("subscribe: pushing `%s` to subs list", currentOpts);
            subs.push(currentOpts);
        }
    });
    if (!subs.length) {
        callback(null, []);
        return this;
    }
    var subscribeProc = function subscribeProc() {
        var messageId = that._nextId();
        if (messageId === null) {
            $c67560551cdef195$var$debug("No messageId left");
            return false;
        }
        var packet = {
            cmd: "subscribe",
            subscriptions: subs,
            qos: 1,
            retain: false,
            dup: false,
            messageId: messageId
        };
        if (opts.properties) packet.properties = opts.properties;
        // subscriptions to resubscribe to in case of disconnect
        if (that.options.resubscribe) {
            $c67560551cdef195$var$debug("subscribe :: resubscribe true");
            var topics = [];
            subs.forEach(function(sub) {
                if (that.options.reconnectPeriod > 0) {
                    var topic = {
                        qos: sub.qos
                    };
                    if (version === 5) {
                        topic.nl = sub.nl || false;
                        topic.rap = sub.rap || false;
                        topic.rh = sub.rh || 0;
                        topic.properties = sub.properties;
                    }
                    that._resubscribeTopics[sub.topic] = topic;
                    topics.push(sub.topic);
                }
            });
            that.messageIdToTopic[packet.messageId] = topics;
        }
        that.outgoing[packet.messageId] = {
            volatile: true,
            cb: function cb(err, packet) {
                if (!err) {
                    var granted = packet.granted;
                    for(var i = 0; i < granted.length; i += 1)subs[i].qos = granted[i];
                }
                callback(err, subs);
            }
        };
        $c67560551cdef195$var$debug("subscribe :: call _sendPacket");
        that._sendPacket(packet);
        return true;
    };
    if (this._storeProcessing || this._storeProcessingQueue.length > 0 || !subscribeProc()) this._storeProcessingQueue.push({
        invoke: subscribeProc,
        callback: callback
    });
    return this;
};
/**
 * unsubscribe - unsubscribe from topic(s)
 *
 * @param {String, Array} topic - topics to unsubscribe from
 * @param {Object} [opts] - optional subscription options, includes:
 *    {Object} properties - properties of unsubscribe packet
 * @param {Function} [callback] - callback fired on unsuback
 * @returns {MqttClient} this - for chaining
 * @api public
 * @example client.unsubscribe('topic');
 * @example client.unsubscribe('topic', console.log);
 */ $c67560551cdef195$var$MqttClient.prototype.unsubscribe = function() {
    var that = this;
    var args = new Array(arguments.length);
    for(var i = 0; i < arguments.length; i++)args[i] = arguments[i];
    var topic = args.shift();
    var callback = args.pop() || $c67560551cdef195$var$nop;
    var opts = args.pop();
    if (typeof topic === "string") topic = [
        topic
    ];
    if (typeof callback !== "function") {
        opts = callback;
        callback = $c67560551cdef195$var$nop;
    }
    var invalidTopic = $41c3174a5c17191c$exports.validateTopics(topic);
    if (invalidTopic !== null) {
        $c67560551cdef195$var$setImmediate(callback, new Error("Invalid topic " + invalidTopic));
        return this;
    }
    if (that._checkDisconnecting(callback)) return this;
    var unsubscribeProc = function unsubscribeProc() {
        var messageId = that._nextId();
        if (messageId === null) {
            $c67560551cdef195$var$debug("No messageId left");
            return false;
        }
        var packet = {
            cmd: "unsubscribe",
            qos: 1,
            messageId: messageId
        };
        if (typeof topic === "string") packet.unsubscriptions = [
            topic
        ];
        else if (Array.isArray(topic)) packet.unsubscriptions = topic;
        if (that.options.resubscribe) packet.unsubscriptions.forEach(function(topic) {
            delete that._resubscribeTopics[topic];
        });
        if (typeof opts === "object" && opts.properties) packet.properties = opts.properties;
        that.outgoing[packet.messageId] = {
            volatile: true,
            cb: callback
        };
        $c67560551cdef195$var$debug("unsubscribe: call _sendPacket");
        that._sendPacket(packet);
        return true;
    };
    if (this._storeProcessing || this._storeProcessingQueue.length > 0 || !unsubscribeProc()) this._storeProcessingQueue.push({
        invoke: unsubscribeProc,
        callback: callback
    });
    return this;
};
/**
 * end - close connection
 *
 * @returns {MqttClient} this - for chaining
 * @param {Boolean} force - do not wait for all in-flight messages to be acked
 * @param {Object} opts - added to the disconnect packet
 * @param {Function} cb - called when the client has been closed
 *
 * @api public
 */ $c67560551cdef195$var$MqttClient.prototype.end = function(force, opts, cb) {
    var closeStores = function closeStores() {
        $c67560551cdef195$var$debug("end :: closeStores: closing incoming and outgoing stores");
        that.disconnected = true;
        that.incomingStore.close(function(e1) {
            that.outgoingStore.close(function(e2) {
                $c67560551cdef195$var$debug("end :: closeStores: emitting end");
                that.emit("end");
                if (cb) {
                    var err = e1 || e2;
                    $c67560551cdef195$var$debug("end :: closeStores: invoking callback with args");
                    cb(err);
                }
            });
        });
        if (that._deferredReconnect) that._deferredReconnect();
    };
    var finish = function finish() {
        // defer closesStores of an I/O cycle,
        // just to make sure things are
        // ok for websockets
        $c67560551cdef195$var$debug("end :: (%s) :: finish :: calling _cleanUp with force %s", that.options.clientId, force);
        that._cleanUp(force, function() {
            $c67560551cdef195$var$debug("end :: finish :: calling process.nextTick on closeStores");
            // const boundProcess = nextTick.bind(null, closeStores)
            $c67560551cdef195$var$nextTick(closeStores.bind(that));
        }, opts);
    };
    var that = this;
    $c67560551cdef195$var$debug("end :: (%s)", this.options.clientId);
    if (force == null || typeof force !== "boolean") {
        cb = opts || $c67560551cdef195$var$nop;
        opts = force;
        force = false;
        if (typeof opts !== "object") {
            cb = opts;
            opts = null;
            if (typeof cb !== "function") cb = $c67560551cdef195$var$nop;
        }
    }
    if (typeof opts !== "object") {
        cb = opts;
        opts = null;
    }
    $c67560551cdef195$var$debug("end :: cb? %s", !!cb);
    cb = cb || $c67560551cdef195$var$nop;
    if (this.disconnecting) {
        cb();
        return this;
    }
    this._clearReconnect();
    this.disconnecting = true;
    if (!force && Object.keys(this.outgoing).length > 0) {
        // wait 10ms, just to be sure we received all of it
        $c67560551cdef195$var$debug("end :: (%s) :: calling finish in 10ms once outgoing is empty", that.options.clientId);
        this.once("outgoingEmpty", setTimeout.bind(null, finish, 10));
    } else {
        $c67560551cdef195$var$debug("end :: (%s) :: immediately calling finish", that.options.clientId);
        finish();
    }
    return this;
};
/**
 * removeOutgoingMessage - remove a message in outgoing store
 * the outgoing callback will be called withe Error('Message removed') if the message is removed
 *
 * @param {Number} messageId - messageId to remove message
 * @returns {MqttClient} this - for chaining
 * @api public
 *
 * @example client.removeOutgoingMessage(client.getLastAllocated());
 */ $c67560551cdef195$var$MqttClient.prototype.removeOutgoingMessage = function(messageId) {
    var cb = this.outgoing[messageId] ? this.outgoing[messageId].cb : null;
    delete this.outgoing[messageId];
    this.outgoingStore.del({
        messageId: messageId
    }, function() {
        cb(new Error("Message removed"));
    });
    return this;
};
/**
 * reconnect - connect again using the same options as connect()
 *
 * @param {Object} [opts] - optional reconnect options, includes:
 *    {Store} incomingStore - a store for the incoming packets
 *    {Store} outgoingStore - a store for the outgoing packets
 *    if opts is not given, current stores are used
 * @returns {MqttClient} this - for chaining
 *
 * @api public
 */ $c67560551cdef195$var$MqttClient.prototype.reconnect = function(opts) {
    $c67560551cdef195$var$debug("client reconnect");
    var that = this;
    var f = function f() {
        if (opts) {
            that.options.incomingStore = opts.incomingStore;
            that.options.outgoingStore = opts.outgoingStore;
        } else {
            that.options.incomingStore = null;
            that.options.outgoingStore = null;
        }
        that.incomingStore = that.options.incomingStore || new $655a5fdbc2e87cf5$exports();
        that.outgoingStore = that.options.outgoingStore || new $655a5fdbc2e87cf5$exports();
        that.disconnecting = false;
        that.disconnected = false;
        that._deferredReconnect = null;
        that._reconnect();
    };
    if (this.disconnecting && !this.disconnected) this._deferredReconnect = f;
    else f();
    return this;
};
/**
 * _reconnect - implement reconnection
 * @api privateish
 */ $c67560551cdef195$var$MqttClient.prototype._reconnect = function() {
    var _this = this;
    $c67560551cdef195$var$debug("_reconnect: emitting reconnect to client");
    this.emit("reconnect");
    if (this.connected) {
        this.end(function() {
            _this._setupStream();
        });
        $c67560551cdef195$var$debug("client already connected. disconnecting first.");
    } else {
        $c67560551cdef195$var$debug("_reconnect: calling _setupStream");
        this._setupStream();
    }
};
/**
 * _setupReconnect - setup reconnect timer
 */ $c67560551cdef195$var$MqttClient.prototype._setupReconnect = function() {
    var that = this;
    if (!that.disconnecting && !that.reconnectTimer && that.options.reconnectPeriod > 0) {
        if (!this.reconnecting) {
            $c67560551cdef195$var$debug("_setupReconnect :: emit `offline` state");
            this.emit("offline");
            $c67560551cdef195$var$debug("_setupReconnect :: set `reconnecting` to `true`");
            this.reconnecting = true;
        }
        $c67560551cdef195$var$debug("_setupReconnect :: setting reconnectTimer for %d ms", that.options.reconnectPeriod);
        that.reconnectTimer = setInterval(function() {
            $c67560551cdef195$var$debug("reconnectTimer :: reconnect triggered!");
            that._reconnect();
        }, that.options.reconnectPeriod);
    } else $c67560551cdef195$var$debug("_setupReconnect :: doing nothing...");
};
/**
 * _clearReconnect - clear the reconnect timer
 */ $c67560551cdef195$var$MqttClient.prototype._clearReconnect = function() {
    $c67560551cdef195$var$debug("_clearReconnect : clearing reconnect timer");
    if (this.reconnectTimer) {
        clearInterval(this.reconnectTimer);
        this.reconnectTimer = null;
    }
};
/**
 * _cleanUp - clean up on connection end
 * @api private
 */ $c67560551cdef195$var$MqttClient.prototype._cleanUp = function(forced, done) {
    var opts = arguments[2];
    if (done) {
        $c67560551cdef195$var$debug("_cleanUp :: done callback provided for on stream close");
        this.stream.on("close", done);
    }
    $c67560551cdef195$var$debug("_cleanUp :: forced? %s", forced);
    if (forced) {
        if (this.options.reconnectPeriod === 0 && this.options.clean) $c67560551cdef195$var$flush(this.outgoing);
        $c67560551cdef195$var$debug("_cleanUp :: (%s) :: destroying stream", this.options.clientId);
        this.stream.destroy();
    } else {
        var packet = $95223428da314994$exports({
            cmd: "disconnect"
        }, opts);
        $c67560551cdef195$var$debug("_cleanUp :: (%s) :: call _sendPacket with disconnect packet", this.options.clientId);
        this._sendPacket(packet, $c67560551cdef195$var$setImmediate.bind(null, this.stream.end.bind(this.stream)));
    }
    if (!this.disconnecting) {
        $c67560551cdef195$var$debug("_cleanUp :: client not disconnecting. Clearing and resetting reconnect.");
        this._clearReconnect();
        this._setupReconnect();
    }
    if (this.pingTimer !== null) {
        $c67560551cdef195$var$debug("_cleanUp :: clearing pingTimer");
        this.pingTimer.clear();
        this.pingTimer = null;
    }
    if (done && !this.connected) {
        $c67560551cdef195$var$debug("_cleanUp :: (%s) :: removing stream `done` callback `close` listener", this.options.clientId);
        this.stream.removeListener("close", done);
        done();
    }
};
/**
 * _sendPacket - send or queue a packet
 * @param {Object} packet - packet options
 * @param {Function} cb - callback when the packet is sent
 * @param {Function} cbStorePut - called when message is put into outgoingStore
 * @api private
 */ $c67560551cdef195$var$MqttClient.prototype._sendPacket = function(packet, cb, cbStorePut) {
    $c67560551cdef195$var$debug("_sendPacket :: (%s) ::  start", this.options.clientId);
    cbStorePut = cbStorePut || $c67560551cdef195$var$nop;
    cb = cb || $c67560551cdef195$var$nop;
    var err = $c67560551cdef195$var$applyTopicAlias(this, packet);
    if (err) {
        cb(err);
        return;
    }
    if (!this.connected) {
        // allow auth packets to be sent while authenticating with the broker (mqtt5 enhanced auth)
        if (packet.cmd === "auth") {
            this._shiftPingInterval();
            $c67560551cdef195$var$sendPacket(this, packet, cb);
            return;
        }
        $c67560551cdef195$var$debug("_sendPacket :: client not connected. Storing packet offline.");
        this._storePacket(packet, cb, cbStorePut);
        return;
    }
    // When sending a packet, reschedule the ping timer
    this._shiftPingInterval();
    switch(packet.cmd){
        case "publish":
            break;
        case "pubrel":
            $c67560551cdef195$var$storeAndSend(this, packet, cb, cbStorePut);
            return;
        default:
            $c67560551cdef195$var$sendPacket(this, packet, cb);
            return;
    }
    switch(packet.qos){
        case 2:
        case 1:
            $c67560551cdef195$var$storeAndSend(this, packet, cb, cbStorePut);
            break;
        /**
     * no need of case here since it will be caught by default
     * and jshint comply that before default it must be a break
     * anyway it will result in -1 evaluation
     */ case 0:
        /* falls through */ default:
            $c67560551cdef195$var$sendPacket(this, packet, cb);
            break;
    }
    $c67560551cdef195$var$debug("_sendPacket :: (%s) ::  end", this.options.clientId);
};
/**
 * _storePacket - queue a packet
 * @param {Object} packet - packet options
 * @param {Function} cb - callback when the packet is sent
 * @param {Function} cbStorePut - called when message is put into outgoingStore
 * @api private
 */ $c67560551cdef195$var$MqttClient.prototype._storePacket = function(packet, cb, cbStorePut) {
    $c67560551cdef195$var$debug("_storePacket :: packet: %o", packet);
    $c67560551cdef195$var$debug("_storePacket :: cb? %s", !!cb);
    cbStorePut = cbStorePut || $c67560551cdef195$var$nop;
    var storePacket = packet;
    if (storePacket.cmd === "publish") {
        // The original packet is for sending.
        // The cloned storePacket is for storing to resend on reconnect.
        // Topic Alias must not be used after disconnected.
        storePacket = $6f2bafa2e12c2dd7$exports(packet);
        var err = $c67560551cdef195$var$removeTopicAliasAndRecoverTopicName(this, storePacket);
        if (err) return cb && cb(err);
    }
    // check that the packet is not a qos of 0, or that the command is not a publish
    if ((storePacket.qos || 0) === 0 && this.queueQoSZero || storePacket.cmd !== "publish") this.queue.push({
        packet: storePacket,
        cb: cb
    });
    else if (storePacket.qos > 0) {
        cb = this.outgoing[storePacket.messageId] ? this.outgoing[storePacket.messageId].cb : null;
        this.outgoingStore.put(storePacket, function(err) {
            if (err) return cb && cb(err);
            cbStorePut();
        });
    } else if (cb) cb(new Error("No connection to broker"));
};
/**
 * _setupPingTimer - setup the ping timer
 *
 * @api private
 */ $c67560551cdef195$var$MqttClient.prototype._setupPingTimer = function() {
    $c67560551cdef195$var$debug("_setupPingTimer :: keepalive %d (seconds)", this.options.keepalive);
    var that = this;
    if (!this.pingTimer && this.options.keepalive) {
        this.pingResp = true;
        this.pingTimer = $90c655de9001dfb0$exports(function() {
            that._checkPing();
        }, this.options.keepalive * 1000);
    }
};
/**
 * _shiftPingInterval - reschedule the ping interval
 *
 * @api private
 */ $c67560551cdef195$var$MqttClient.prototype._shiftPingInterval = function() {
    if (this.pingTimer && this.options.keepalive && this.options.reschedulePings) this.pingTimer.reschedule(this.options.keepalive * 1000);
};
/**
 * _checkPing - check if a pingresp has come back, and ping the server again
 *
 * @api private
 */ $c67560551cdef195$var$MqttClient.prototype._checkPing = function() {
    $c67560551cdef195$var$debug("_checkPing :: checking ping...");
    if (this.pingResp) {
        $c67560551cdef195$var$debug("_checkPing :: ping response received. Clearing flag and sending `pingreq`");
        this.pingResp = false;
        this._sendPacket({
            cmd: "pingreq"
        });
    } else {
        // do a forced cleanup since socket will be in bad shape
        $c67560551cdef195$var$debug("_checkPing :: calling _cleanUp with force true");
        this._cleanUp(true);
    }
};
/**
 * _handlePingresp - handle a pingresp
 *
 * @api private
 */ $c67560551cdef195$var$MqttClient.prototype._handlePingresp = function() {
    this.pingResp = true;
};
/**
 * _handleConnack
 *
 * @param {Object} packet
 * @api private
 */ $c67560551cdef195$var$MqttClient.prototype._handleConnack = function(packet) {
    $c67560551cdef195$var$debug("_handleConnack");
    var options = this.options;
    var version = options.protocolVersion;
    var rc = version === 5 ? packet.reasonCode : packet.returnCode;
    clearTimeout(this.connackTimer);
    delete this.topicAliasSend;
    if (packet.properties) {
        if (packet.properties.topicAliasMaximum) {
            if (packet.properties.topicAliasMaximum > 0xffff) {
                this.emit("error", new Error("topicAliasMaximum from broker is out of range"));
                return;
            }
            if (packet.properties.topicAliasMaximum > 0) this.topicAliasSend = new $7a67e81d8b149a1f$exports(packet.properties.topicAliasMaximum);
        }
        if (packet.properties.serverKeepAlive && options.keepalive) {
            options.keepalive = packet.properties.serverKeepAlive;
            this._shiftPingInterval();
        }
        if (packet.properties.maximumPacketSize) {
            if (!options.properties) options.properties = {};
            options.properties.maximumPacketSize = packet.properties.maximumPacketSize;
        }
    }
    if (rc === 0) {
        this.reconnecting = false;
        this._onConnect(packet);
    } else if (rc > 0) {
        var err = new Error("Connection refused: " + $c67560551cdef195$var$errors[rc]);
        err.code = rc;
        this.emit("error", err);
    }
};
$c67560551cdef195$var$MqttClient.prototype._handleAuth = function(packet) {
    var options = this.options;
    var version = options.protocolVersion;
    var rc = version === 5 ? packet.reasonCode : packet.returnCode;
    if (version !== 5) {
        var err = new Error("Protocol error: Auth packets are only supported in MQTT 5. Your version:" + version);
        err.code = rc;
        this.emit("error", err);
        return;
    }
    var that = this;
    this.handleAuth(packet, function(err, packet) {
        if (err) {
            that.emit("error", err);
            return;
        }
        if (rc === 24) {
            that.reconnecting = false;
            that._sendPacket(packet);
        } else {
            var error = new Error("Connection refused: " + $c67560551cdef195$var$errors[rc]);
            err.code = rc;
            that.emit("error", error);
        }
    });
};
/**
 * @param packet the packet received by the broker
 * @return the auth packet to be returned to the broker
 * @api public
 */ $c67560551cdef195$var$MqttClient.prototype.handleAuth = function(packet, callback) {
    callback();
};
/**
 * _handlePublish
 *
 * @param {Object} packet
 * @api private
 */ /*
those late 2 case should be rewrite to comply with coding style:

case 1:
case 0:
  // do not wait sending a puback
  // no callback passed
  if (1 === qos) {
    this._sendPacket({
      cmd: 'puback',
      messageId: messageId
    });
  }
  // emit the message event for both qos 1 and 0
  this.emit('message', topic, message, packet);
  this.handleMessage(packet, done);
  break;
default:
  // do nothing but every switch mus have a default
  // log or throw an error about unknown qos
  break;

for now i just suppressed the warnings
*/ $c67560551cdef195$var$MqttClient.prototype._handlePublish = function(packet, done) {
    $c67560551cdef195$var$debug("_handlePublish: packet %o", packet);
    done = typeof done !== "undefined" ? done : $c67560551cdef195$var$nop;
    var topic = packet.topic.toString();
    var message = packet.payload;
    var qos = packet.qos;
    var messageId = packet.messageId;
    var that = this;
    var options = this.options;
    var validReasonCodes = [
        0,
        16,
        128,
        131,
        135,
        144,
        145,
        151,
        153
    ];
    if (this.options.protocolVersion === 5) {
        var alias;
        if (packet.properties) alias = packet.properties.topicAlias;
        if (typeof alias !== "undefined") {
            if (topic.length === 0) {
                if (alias > 0 && alias <= 0xffff) {
                    var gotTopic = this.topicAliasRecv.getTopicByAlias(alias);
                    if (gotTopic) {
                        topic = gotTopic;
                        $c67560551cdef195$var$debug("_handlePublish :: topic complemented by alias. topic: %s - alias: %d", topic, alias);
                    } else {
                        $c67560551cdef195$var$debug("_handlePublish :: unregistered topic alias. alias: %d", alias);
                        this.emit("error", new Error("Received unregistered Topic Alias"));
                        return;
                    }
                } else {
                    $c67560551cdef195$var$debug("_handlePublish :: topic alias out of range. alias: %d", alias);
                    this.emit("error", new Error("Received Topic Alias is out of range"));
                    return;
                }
            } else if (this.topicAliasRecv.put(topic, alias)) $c67560551cdef195$var$debug("_handlePublish :: registered topic: %s - alias: %d", topic, alias);
            else {
                $c67560551cdef195$var$debug("_handlePublish :: topic alias out of range. alias: %d", alias);
                this.emit("error", new Error("Received Topic Alias is out of range"));
                return;
            }
        }
    }
    $c67560551cdef195$var$debug("_handlePublish: qos %d", qos);
    switch(qos){
        case 2:
            options.customHandleAcks(topic, message, packet, function(error, code) {
                if (!(error instanceof Error)) {
                    code = error;
                    error = null;
                }
                if (error) return that.emit("error", error);
                if (validReasonCodes.indexOf(code) === -1) return that.emit("error", new Error("Wrong reason code for pubrec"));
                if (code) that._sendPacket({
                    cmd: "pubrec",
                    messageId: messageId,
                    reasonCode: code
                }, done);
                else that.incomingStore.put(packet, function() {
                    that._sendPacket({
                        cmd: "pubrec",
                        messageId: messageId
                    }, done);
                });
            });
            break;
        case 1:
            // emit the message event
            options.customHandleAcks(topic, message, packet, function(error, code) {
                if (!(error instanceof Error)) {
                    code = error;
                    error = null;
                }
                if (error) return that.emit("error", error);
                if (validReasonCodes.indexOf(code) === -1) return that.emit("error", new Error("Wrong reason code for puback"));
                if (!code) that.emit("message", topic, message, packet);
                that.handleMessage(packet, function(err) {
                    if (err) return done && done(err);
                    that._sendPacket({
                        cmd: "puback",
                        messageId: messageId,
                        reasonCode: code
                    }, done);
                });
            });
            break;
        case 0:
            // emit the message event
            this.emit("message", topic, message, packet);
            this.handleMessage(packet, done);
            break;
        default:
            // do nothing
            $c67560551cdef195$var$debug("_handlePublish: unknown QoS. Doing nothing.");
            break;
    }
};
/**
 * Handle messages with backpressure support, one at a time.
 * Override at will.
 *
 * @param Packet packet the packet
 * @param Function callback call when finished
 * @api public
 */ $c67560551cdef195$var$MqttClient.prototype.handleMessage = function(packet, callback) {
    callback();
};
/**
 * _handleAck
 *
 * @param {Object} packet
 * @api private
 */ $c67560551cdef195$var$MqttClient.prototype._handleAck = function(packet) {
    /* eslint no-fallthrough: "off" */ var messageId = packet.messageId;
    var type = packet.cmd;
    var response = null;
    var cb = this.outgoing[messageId] ? this.outgoing[messageId].cb : null;
    var that = this;
    var err;
    // Checking `!cb` happens to work, but it's not technically "correct".
    //
    // Why? This code assumes that "no callback" is the same as that "we're not
    // waiting for responses" (puback, pubrec, pubcomp, suback, or unsuback).
    //
    // It would be better to check `if (!this.outgoing[messageId])` here, but
    // there's no reason to change it and risk (another) regression.
    //
    // The only reason this code works is becaues code in MqttClient.publish,
    // MqttClinet.subscribe, and MqttClient.unsubscribe ensures that we will
    // have a callback even if the user doesn't pass one in.)
    if (!cb) {
        $c67560551cdef195$var$debug("_handleAck :: Server sent an ack in error. Ignoring.");
        // Server sent an ack in error, ignore it.
        return;
    }
    // Process
    $c67560551cdef195$var$debug("_handleAck :: packet type", type);
    switch(type){
        case "pubcomp":
        // same thing as puback for QoS 2
        case "puback":
            {
                var pubackRC = packet.reasonCode;
                // Callback - we're done
                if (pubackRC && pubackRC > 0 && pubackRC !== 16) {
                    err = new Error("Publish error: " + $c67560551cdef195$var$errors[pubackRC]);
                    err.code = pubackRC;
                    cb(err, packet);
                }
                delete this.outgoing[messageId];
                this.outgoingStore.del(packet, cb);
                this.messageIdProvider.deallocate(messageId);
                this._invokeStoreProcessingQueue();
                break;
            }
        case "pubrec":
            {
                response = {
                    cmd: "pubrel",
                    qos: 2,
                    messageId: messageId
                };
                var pubrecRC = packet.reasonCode;
                if (pubrecRC && pubrecRC > 0 && pubrecRC !== 16) {
                    err = new Error("Publish error: " + $c67560551cdef195$var$errors[pubrecRC]);
                    err.code = pubrecRC;
                    cb(err, packet);
                } else this._sendPacket(response);
                break;
            }
        case "suback":
            delete this.outgoing[messageId];
            this.messageIdProvider.deallocate(messageId);
            for(var grantedI = 0; grantedI < packet.granted.length; grantedI++)if ((packet.granted[grantedI] & 0x80) !== 0) {
                // suback with Failure status
                var topics = this.messageIdToTopic[messageId];
                if (topics) topics.forEach(function(topic) {
                    delete that._resubscribeTopics[topic];
                });
            }
            this._invokeStoreProcessingQueue();
            cb(null, packet);
            break;
        case "unsuback":
            delete this.outgoing[messageId];
            this.messageIdProvider.deallocate(messageId);
            this._invokeStoreProcessingQueue();
            cb(null);
            break;
        default:
            that.emit("error", new Error("unrecognized packet type"));
    }
    if (this.disconnecting && Object.keys(this.outgoing).length === 0) this.emit("outgoingEmpty");
};
/**
 * _handlePubrel
 *
 * @param {Object} packet
 * @api private
 */ $c67560551cdef195$var$MqttClient.prototype._handlePubrel = function(packet, callback) {
    $c67560551cdef195$var$debug("handling pubrel packet");
    callback = typeof callback !== "undefined" ? callback : $c67560551cdef195$var$nop;
    var messageId = packet.messageId;
    var that = this;
    var comp = {
        cmd: "pubcomp",
        messageId: messageId
    };
    that.incomingStore.get(packet, function(err, pub) {
        if (!err) {
            that.emit("message", pub.topic, pub.payload, pub);
            that.handleMessage(pub, function(err) {
                if (err) return callback(err);
                that.incomingStore.del(pub, $c67560551cdef195$var$nop);
                that._sendPacket(comp, callback);
            });
        } else that._sendPacket(comp, callback);
    });
};
/**
 * _handleDisconnect
 *
 * @param {Object} packet
 * @api private
 */ $c67560551cdef195$var$MqttClient.prototype._handleDisconnect = function(packet) {
    this.emit("disconnect", packet);
};
/**
 * _nextId
 * @return unsigned int
 */ $c67560551cdef195$var$MqttClient.prototype._nextId = function() {
    return this.messageIdProvider.allocate();
};
/**
 * getLastMessageId
 * @return unsigned int
 */ $c67560551cdef195$var$MqttClient.prototype.getLastMessageId = function() {
    return this.messageIdProvider.getLastAllocated();
};
/**
 * _resubscribe
 * @api private
 */ $c67560551cdef195$var$MqttClient.prototype._resubscribe = function() {
    $c67560551cdef195$var$debug("_resubscribe");
    var _resubscribeTopicsKeys = Object.keys(this._resubscribeTopics);
    if (!this._firstConnection && (this.options.clean || this.options.protocolVersion === 5 && !this.connackPacket.sessionPresent) && _resubscribeTopicsKeys.length > 0) {
        if (this.options.resubscribe) {
            if (this.options.protocolVersion === 5) {
                $c67560551cdef195$var$debug("_resubscribe: protocolVersion 5");
                for(var topicI = 0; topicI < _resubscribeTopicsKeys.length; topicI++){
                    var resubscribeTopic = {};
                    resubscribeTopic[_resubscribeTopicsKeys[topicI]] = this._resubscribeTopics[_resubscribeTopicsKeys[topicI]];
                    resubscribeTopic.resubscribe = true;
                    this.subscribe(resubscribeTopic, {
                        properties: resubscribeTopic[_resubscribeTopicsKeys[topicI]].properties
                    });
                }
            } else {
                this._resubscribeTopics.resubscribe = true;
                this.subscribe(this._resubscribeTopics);
            }
        } else this._resubscribeTopics = {};
    }
    this._firstConnection = false;
};
/**
 * _onConnect
 *
 * @api private
 */ $c67560551cdef195$var$MqttClient.prototype._onConnect = function(packet) {
    if (this.disconnected) {
        this.emit("connect", packet);
        return;
    }
    var that = this;
    this.connackPacket = packet;
    this.messageIdProvider.clear();
    this._setupPingTimer();
    this.connected = true;
    function startStreamProcess() {
        var outStore = that.outgoingStore.createStream();
        function clearStoreProcessing() {
            that._storeProcessing = false;
            that._packetIdsDuringStoreProcessing = {};
        }
        that.once("close", remove);
        outStore.on("error", function(err) {
            clearStoreProcessing();
            that._flushStoreProcessingQueue();
            that.removeListener("close", remove);
            that.emit("error", err);
        });
        function remove() {
            outStore.destroy();
            outStore = null;
            that._flushStoreProcessingQueue();
            clearStoreProcessing();
        }
        function storeDeliver() {
            // edge case, we wrapped this twice
            if (!outStore) return;
            that._storeProcessing = true;
            var _$packet = outStore.read(1);
            var cb;
            if (!_$packet) {
                // read when data is available in the future
                outStore.once("readable", storeDeliver);
                return;
            }
            // Skip already processed store packets
            if (that._packetIdsDuringStoreProcessing[_$packet.messageId]) {
                storeDeliver();
                return;
            }
            // Avoid unnecessary stream read operations when disconnected
            if (!that.disconnecting && !that.reconnectTimer) {
                cb = that.outgoing[_$packet.messageId] ? that.outgoing[_$packet.messageId].cb : null;
                that.outgoing[_$packet.messageId] = {
                    volatile: false,
                    cb: function cb1(err, status) {
                        // Ensure that the original callback passed in to publish gets invoked
                        if (cb) cb(err, status);
                        storeDeliver();
                    }
                };
                that._packetIdsDuringStoreProcessing[_$packet.messageId] = true;
                if (that.messageIdProvider.register(_$packet.messageId)) that._sendPacket(_$packet);
                else $c67560551cdef195$var$debug("messageId: %d has already used.", _$packet.messageId);
            } else if (outStore.destroy) outStore.destroy();
        }
        outStore.on("end", function() {
            var allProcessed = true;
            for(var id in that._packetIdsDuringStoreProcessing)if (!that._packetIdsDuringStoreProcessing[id]) {
                allProcessed = false;
                break;
            }
            if (allProcessed) {
                clearStoreProcessing();
                that.removeListener("close", remove);
                that._invokeAllStoreProcessingQueue();
                that.emit("connect", packet);
            } else startStreamProcess();
        });
        storeDeliver();
    }
    // start flowing
    startStreamProcess();
};
$c67560551cdef195$var$MqttClient.prototype._invokeStoreProcessingQueue = function() {
    if (this._storeProcessingQueue.length > 0) {
        var f = this._storeProcessingQueue[0];
        if (f && f.invoke()) {
            this._storeProcessingQueue.shift();
            return true;
        }
    }
    return false;
};
$c67560551cdef195$var$MqttClient.prototype._invokeAllStoreProcessingQueue = function() {
    while(this._invokeStoreProcessingQueue());
};
$c67560551cdef195$var$MqttClient.prototype._flushStoreProcessingQueue = function() {
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = this._storeProcessingQueue[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var f = _step.value;
            if (f.cbStorePut) f.cbStorePut(new Error("Connection closed"));
            if (f.callback) f.callback(new Error("Connection closed"));
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
    this._storeProcessingQueue.splice(0);
};
$c67560551cdef195$exports = $c67560551cdef195$var$MqttClient;



// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var $lT21Y = parcelRequire("lT21Y");
var $5900581c761d2302$export$98e6a39c04603d36;
var $5900581c761d2302$export$f7ad0328861e2f03;
var $5900581c761d2302$export$7daf1a5d2f4dd018;
var $5900581c761d2302$export$d9468344d3651243;
var $5900581c761d2302$export$59d795186a5d3f58;
"use strict";

var $k1FD7 = parcelRequire("k1FD7");
var $fbef7056fde7d23d$exports = {};
"use strict";
$fbef7056fde7d23d$exports = {
    isString: function isString(arg) {
        return typeof arg === "string";
    },
    isObject: function isObject(arg) {
        return typeof arg === "object" && arg !== null;
    },
    isNull: function isNull(arg) {
        return arg === null;
    },
    isNullOrUndefined: function isNullOrUndefined(arg) {
        return arg == null;
    }
};


$5900581c761d2302$export$98e6a39c04603d36 = $5900581c761d2302$var$urlParse;
$5900581c761d2302$export$f7ad0328861e2f03 = $5900581c761d2302$var$urlResolve;
$5900581c761d2302$export$7daf1a5d2f4dd018 = $5900581c761d2302$var$urlResolveObject;
$5900581c761d2302$export$d9468344d3651243 = $5900581c761d2302$var$urlFormat;
$5900581c761d2302$export$59d795186a5d3f58 = $5900581c761d2302$var$Url;
function $5900581c761d2302$var$Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
}
// Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.
var $5900581c761d2302$var$protocolPattern = /^([a-z0-9.+-]+:)/i, $5900581c761d2302$var$portPattern = /:[0-9]*$/, // Special case for a simple path URL
$5900581c761d2302$var$simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, // RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
$5900581c761d2302$var$delims = [
    "<",
    ">",
    '"',
    "`",
    " ",
    "\r",
    "\n",
    "	"
], // RFC 2396: characters not allowed for various reasons.
$5900581c761d2302$var$unwise = [
    "{",
    "}",
    "|",
    "\\",
    "^",
    "`"
].concat($5900581c761d2302$var$delims), // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
$5900581c761d2302$var$autoEscape = [
    "'"
].concat($5900581c761d2302$var$unwise), // Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
$5900581c761d2302$var$nonHostChars = [
    "%",
    "/",
    "?",
    ";",
    "#"
].concat($5900581c761d2302$var$autoEscape), $5900581c761d2302$var$hostEndingChars = [
    "/",
    "?",
    "#"
], $5900581c761d2302$var$hostnameMaxLen = 255, $5900581c761d2302$var$hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/, $5900581c761d2302$var$hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, // protocols that can allow "unsafe" and "unwise" chars.
$5900581c761d2302$var$unsafeProtocol = {
    javascript: true,
    "javascript:": true
}, // protocols that never have a hostname.
$5900581c761d2302$var$hostlessProtocol = {
    javascript: true,
    "javascript:": true
}, // protocols that always contain a // bit.
$5900581c761d2302$var$slashedProtocol = {
    http: true,
    https: true,
    ftp: true,
    gopher: true,
    file: true,
    "http:": true,
    "https:": true,
    "ftp:": true,
    "gopher:": true,
    "file:": true
};
var $77e4f21fad253e7e$export$2f872c0f2117be69;
var $77e4f21fad253e7e$export$98e6a39c04603d36;
var $77e4f21fad253e7e$export$c564cdbbe6da493;
var $77e4f21fad253e7e$export$fac44ee5b035f737;
"use strict";

$77e4f21fad253e7e$export$2f872c0f2117be69 = $77e4f21fad253e7e$export$98e6a39c04603d36 = (parcelRequire("fVwRj"));

$77e4f21fad253e7e$export$c564cdbbe6da493 = $77e4f21fad253e7e$export$fac44ee5b035f737 = (parcelRequire("hxsuF"));


function $5900581c761d2302$var$urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && $fbef7056fde7d23d$exports.isObject(url) && url instanceof $5900581c761d2302$var$Url) return url;
    var u = new $5900581c761d2302$var$Url;
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
}
$5900581c761d2302$var$Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
    if (!$fbef7056fde7d23d$exports.isString(url)) throw new TypeError("Parameter 'url' must be a string, not " + (typeof url === "undefined" ? "undefined" : (0, $lT21Y.default)(url)));
    // Copy chrome, IE, opera backslash-handling behavior.
    // Back slashes before the query string get converted to forward slashes
    // See: https://code.google.com/p/chromium/issues/detail?id=25916
    var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, "/");
    url = uSplit.join(splitter);
    var rest = url;
    // trim before proceeding.
    // This is to support parse stuff like "  http://foo.com  \n"
    rest = rest.trim();
    if (!slashesDenoteHost && url.split("#").length === 1) {
        // Try fast path regexp
        var simplePath = $5900581c761d2302$var$simplePathPattern.exec(rest);
        if (simplePath) {
            this.path = rest;
            this.href = rest;
            this.pathname = simplePath[1];
            if (simplePath[2]) {
                this.search = simplePath[2];
                if (parseQueryString) this.query = $77e4f21fad253e7e$export$98e6a39c04603d36(this.search.substr(1));
                else this.query = this.search.substr(1);
            } else if (parseQueryString) {
                this.search = "";
                this.query = {};
            }
            return this;
        }
    }
    var proto = $5900581c761d2302$var$protocolPattern.exec(rest);
    if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
    }
    // figure out if it's got a host
    // user@server is *always* interpreted as a hostname, and url
    // resolution will treat //foo/bar as host=foo,path=bar because that's
    // how the browser resolves relative URLs.
    if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && $5900581c761d2302$var$hostlessProtocol[proto])) {
            rest = rest.substr(2);
            this.slashes = true;
        }
    }
    if (!$5900581c761d2302$var$hostlessProtocol[proto] && (slashes || proto && !$5900581c761d2302$var$slashedProtocol[proto])) {
        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c
        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.
        // find the first instance of any hostEndingChars
        var hostEnd = -1;
        for(var i = 0; i < $5900581c761d2302$var$hostEndingChars.length; i++){
            var hec = rest.indexOf($5900581c761d2302$var$hostEndingChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.
        var auth, atSign;
        if (hostEnd === -1) // atSign can be anywhere.
        atSign = rest.lastIndexOf("@");
        else // atSign must be in auth portion.
        // http://a@b/c@d => host:b auth:a path:/c@d
        atSign = rest.lastIndexOf("@", hostEnd);
        // Now we have a portion which is definitely the auth.
        // Pull that off.
        if (atSign !== -1) {
            auth = rest.slice(0, atSign);
            rest = rest.slice(atSign + 1);
            this.auth = decodeURIComponent(auth);
        }
        // the host is the remaining to the left of the first non-host char
        hostEnd = -1;
        for(var i = 0; i < $5900581c761d2302$var$nonHostChars.length; i++){
            var hec = rest.indexOf($5900581c761d2302$var$nonHostChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        // if we still have not hit it, then the entire thing is a host.
        if (hostEnd === -1) hostEnd = rest.length;
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        // pull out port.
        this.parseHost();
        // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.
        this.hostname = this.hostname || "";
        // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.
        var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        // validate a little.
        if (!ipv6Hostname) {
            var hostparts = this.hostname.split(/\./);
            for(var i = 0, l = hostparts.length; i < l; i++){
                var part = hostparts[i];
                if (!part) continue;
                if (!part.match($5900581c761d2302$var$hostnamePartPattern)) {
                    var newpart = "";
                    for(var j = 0, k = part.length; j < k; j++)if (part.charCodeAt(j) > 127) // we replace non-ASCII char with a temporary placeholder
                    // we need this to make sure size of hostname is not
                    // broken by replacing non-ASCII by nothing
                    newpart += "x";
                    else newpart += part[j];
                    // we test again with ASCII char only
                    if (!newpart.match($5900581c761d2302$var$hostnamePartPattern)) {
                        var validParts = hostparts.slice(0, i);
                        var notHost = hostparts.slice(i + 1);
                        var bit = part.match($5900581c761d2302$var$hostnamePartStart);
                        if (bit) {
                            validParts.push(bit[1]);
                            notHost.unshift(bit[2]);
                        }
                        if (notHost.length) rest = "/" + notHost.join(".") + rest;
                        this.hostname = validParts.join(".");
                        break;
                    }
                }
            }
        }
        if (this.hostname.length > $5900581c761d2302$var$hostnameMaxLen) this.hostname = "";
        else // hostnames are always lower case.
        this.hostname = this.hostname.toLowerCase();
        if (!ipv6Hostname) // IDNA Support: Returns a punycoded representation of "domain".
        // It only converts parts of the domain name that
        // have non-ASCII characters, i.e. it doesn't matter if
        // you call it with a domain that already is ASCII-only.
        this.hostname = $k1FD7.toASCII(this.hostname);
        var p = this.port ? ":" + this.port : "";
        var h = this.hostname || "";
        this.host = h + p;
        this.href += this.host;
        // strip [ and ] from the hostname
        // the host field still retains them, though
        if (ipv6Hostname) {
            this.hostname = this.hostname.substr(1, this.hostname.length - 2);
            if (rest[0] !== "/") rest = "/" + rest;
        }
    }
    // now rest is set to the post-host stuff.
    // chop off any delim chars.
    if (!$5900581c761d2302$var$unsafeProtocol[lowerProto]) // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for(var i = 0, l = $5900581c761d2302$var$autoEscape.length; i < l; i++){
        var ae = $5900581c761d2302$var$autoEscape[i];
        if (rest.indexOf(ae) === -1) continue;
        var esc = encodeURIComponent(ae);
        if (esc === ae) esc = escape(ae);
        rest = rest.split(ae).join(esc);
    }
    // chop off from the tail first.
    var hash = rest.indexOf("#");
    if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf("?");
    if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString) this.query = $77e4f21fad253e7e$export$98e6a39c04603d36(this.query);
        rest = rest.slice(0, qm);
    } else if (parseQueryString) {
        // no query string, but parseQueryString still requested
        this.search = "";
        this.query = {};
    }
    if (rest) this.pathname = rest;
    if ($5900581c761d2302$var$slashedProtocol[lowerProto] && this.hostname && !this.pathname) this.pathname = "/";
    //to support http.request
    if (this.pathname || this.search) {
        var p = this.pathname || "";
        var s = this.search || "";
        this.path = p + s;
    }
    // finally, reconstruct the href based on what has been validated.
    this.href = this.format();
    return this;
};
// format a parsed object into a url string
function $5900581c761d2302$var$urlFormat(obj) {
    // ensure it's an object, and not a string url.
    // If it's an obj, this is a no-op.
    // this way, you can call url_format() on strings
    // to clean up potentially wonky urls.
    if ($fbef7056fde7d23d$exports.isString(obj)) obj = $5900581c761d2302$var$urlParse(obj);
    if (!(obj instanceof $5900581c761d2302$var$Url)) return $5900581c761d2302$var$Url.prototype.format.call(obj);
    return obj.format();
}
$5900581c761d2302$var$Url.prototype.format = function() {
    var auth = this.auth || "";
    if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ":");
        auth += "@";
    }
    var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host = false, query = "";
    if (this.host) host = auth + this.host;
    else if (this.hostname) {
        host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
        if (this.port) host += ":" + this.port;
    }
    if (this.query && $fbef7056fde7d23d$exports.isObject(this.query) && Object.keys(this.query).length) query = $77e4f21fad253e7e$export$fac44ee5b035f737(this.query);
    var search = this.search || query && "?" + query || "";
    if (protocol && protocol.substr(-1) !== ":") protocol += ":";
    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
    // unless they had them to begin with.
    if (this.slashes || (!protocol || $5900581c761d2302$var$slashedProtocol[protocol]) && host !== false) {
        host = "//" + (host || "");
        if (pathname && pathname.charAt(0) !== "/") pathname = "/" + pathname;
    } else if (!host) host = "";
    if (hash && hash.charAt(0) !== "#") hash = "#" + hash;
    if (search && search.charAt(0) !== "?") search = "?" + search;
    pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
    });
    search = search.replace("#", "%23");
    return protocol + host + pathname + search + hash;
};
function $5900581c761d2302$var$urlResolve(source, relative) {
    return $5900581c761d2302$var$urlParse(source, false, true).resolve(relative);
}
$5900581c761d2302$var$Url.prototype.resolve = function(relative) {
    return this.resolveObject($5900581c761d2302$var$urlParse(relative, false, true)).format();
};
function $5900581c761d2302$var$urlResolveObject(source, relative) {
    if (!source) return relative;
    return $5900581c761d2302$var$urlParse(source, false, true).resolveObject(relative);
}
$5900581c761d2302$var$Url.prototype.resolveObject = function(relative) {
    if ($fbef7056fde7d23d$exports.isString(relative)) {
        var rel = new $5900581c761d2302$var$Url();
        rel.parse(relative, false, true);
        relative = rel;
    }
    var result = new $5900581c761d2302$var$Url();
    var tkeys = Object.keys(this);
    for(var tk = 0; tk < tkeys.length; tk++){
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
    }
    // hash is always overridden, no matter what.
    // even href="" will remove it.
    result.hash = relative.hash;
    // if the relative url is empty, then there's nothing left to do here.
    if (relative.href === "") {
        result.href = result.format();
        return result;
    }
    // hrefs like //foo/bar always cut to the protocol.
    if (relative.slashes && !relative.protocol) {
        // take everything except the protocol from relative
        var rkeys = Object.keys(relative);
        for(var rk = 0; rk < rkeys.length; rk++){
            var rkey = rkeys[rk];
            if (rkey !== "protocol") result[rkey] = relative[rkey];
        }
        //urlParse appends trailing / to urls like http://www.example.com
        if ($5900581c761d2302$var$slashedProtocol[result.protocol] && result.hostname && !result.pathname) result.path = result.pathname = "/";
        result.href = result.format();
        return result;
    }
    if (relative.protocol && relative.protocol !== result.protocol) {
        // if it's a known url protocol, then changing
        // the protocol does weird things
        // first, if it's not file:, then we MUST have a host,
        // and if there was a path
        // to begin with, then we MUST have a path.
        // if it is file:, then the host is dropped,
        // because that's known to be hostless.
        // anything else is assumed to be absolute.
        if (!$5900581c761d2302$var$slashedProtocol[relative.protocol]) {
            var keys = Object.keys(relative);
            for(var v = 0; v < keys.length; v++){
                var k = keys[v];
                result[k] = relative[k];
            }
            result.href = result.format();
            return result;
        }
        result.protocol = relative.protocol;
        if (!relative.host && !$5900581c761d2302$var$hostlessProtocol[relative.protocol]) {
            var relPath = (relative.pathname || "").split("/");
            while(relPath.length && !(relative.host = relPath.shift()));
            if (!relative.host) relative.host = "";
            if (!relative.hostname) relative.hostname = "";
            if (relPath[0] !== "") relPath.unshift("");
            if (relPath.length < 2) relPath.unshift("");
            result.pathname = relPath.join("/");
        } else result.pathname = relative.pathname;
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || "";
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        // to support http.request
        if (result.pathname || result.search) {
            var p = result.pathname || "";
            var s = result.search || "";
            result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
    }
    var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !$5900581c761d2302$var$slashedProtocol[result.protocol];
    // if the url is a non-slashed url, then relative
    // links like ../.. should be able
    // to crawl up to the hostname, as well.  This is strange.
    // result.protocol has already been set by now.
    // Later on, put the first path part into the host field.
    if (psychotic) {
        result.hostname = "";
        result.port = null;
        if (result.host) {
            if (srcPath[0] === "") srcPath[0] = result.host;
            else srcPath.unshift(result.host);
        }
        result.host = "";
        if (relative.protocol) {
            relative.hostname = null;
            relative.port = null;
            if (relative.host) {
                if (relPath[0] === "") relPath[0] = relative.host;
                else relPath.unshift(relative.host);
            }
            relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
    }
    if (isRelAbs) {
        // it's absolute.
        result.host = relative.host || relative.host === "" ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
    // fall through to the dot-handling below.
    } else if (relPath.length) {
        // it's relative
        // throw away the existing file, and take the new path instead.
        if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
    } else if (!$fbef7056fde7d23d$exports.isNullOrUndefined(relative.search)) {
        // just pull out the search.
        // like href='?foo'.
        // Put this after the other two cases because it simplifies the booleans
        if (psychotic) {
            result.hostname = result.host = srcPath.shift();
            //occationaly the auth can get stuck only in host
            //this especially happens in cases like
            //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
            var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
            if (authInHost) {
                result.auth = authInHost.shift();
                result.host = result.hostname = authInHost.shift();
            }
        }
        result.search = relative.search;
        result.query = relative.query;
        //to support http.request
        if (!$fbef7056fde7d23d$exports.isNull(result.pathname) || !$fbef7056fde7d23d$exports.isNull(result.search)) result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        result.href = result.format();
        return result;
    }
    if (!srcPath.length) {
        // no path at all.  easy.
        // we've already handled the other stuff above.
        result.pathname = null;
        //to support http.request
        if (result.search) result.path = "/" + result.search;
        else result.path = null;
        result.href = result.format();
        return result;
    }
    // if a url ENDs in . or .., then it must get a trailing slash.
    // however, if it ends in anything else non-slashy,
    // then it must NOT get a trailing slash.
    var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
    // strip single dots, resolve double dots to parent dir
    // if the path tries to go above the root, `up` ends up > 0
    var up = 0;
    for(var i = srcPath.length; i >= 0; i--){
        last = srcPath[i];
        if (last === ".") srcPath.splice(i, 1);
        else if (last === "..") {
            srcPath.splice(i, 1);
            up++;
        } else if (up) {
            srcPath.splice(i, 1);
            up--;
        }
    }
    // if the path is allowed to go above the root, restore leading ..s
    if (!mustEndAbs && !removeAllDots) for(; up--; up)srcPath.unshift("..");
    if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) srcPath.unshift("");
    if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") srcPath.push("");
    var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
    // put the host back
    if (psychotic) {
        result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
        //occationaly the auth can get stuck only in host
        //this especially happens in cases like
        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
        var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
        if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
        }
    }
    mustEndAbs = mustEndAbs || result.host && srcPath.length;
    if (mustEndAbs && !isAbsolute) srcPath.unshift("");
    if (!srcPath.length) {
        result.pathname = null;
        result.path = null;
    } else result.pathname = srcPath.join("/");
    //to support request.http
    if (!$fbef7056fde7d23d$exports.isNull(result.pathname) || !$fbef7056fde7d23d$exports.isNull(result.search)) result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
};
$5900581c761d2302$var$Url.prototype.parseHost = function() {
    var host = this.host;
    var port = $5900581c761d2302$var$portPattern.exec(host);
    if (port) {
        port = port[0];
        if (port !== ":") this.port = port.substr(1);
        host = host.substr(0, host.length - port.length);
    }
    if (host) this.hostname = host;
};




var $ca442ffd50164601$var$debug = (parcelRequire("8woo2"))("mqttjs");
var $ca442ffd50164601$var$protocols = {};









// eslint-disable-next-line camelcase
if (typeof $lFBFq !== "undefined" && $lFBFq.title !== "browser" || typeof __webpack_require__ !== "function") {
    $ca442ffd50164601$var$protocols.mqtt = (parcelRequire("9Qvrn"));
    $ca442ffd50164601$var$protocols.tcp = (parcelRequire("9Qvrn"));
    $ca442ffd50164601$var$protocols.ssl = (parcelRequire("dkhD1"));
    $ca442ffd50164601$var$protocols.tls = (parcelRequire("dkhD1"));
    $ca442ffd50164601$var$protocols.mqtts = (parcelRequire("dkhD1"));
} else {
    $ca442ffd50164601$var$protocols.wx = (parcelRequire("3YR1k"));
    $ca442ffd50164601$var$protocols.wxs = (parcelRequire("3YR1k"));
    $ca442ffd50164601$var$protocols.ali = (parcelRequire("74izN"));
    $ca442ffd50164601$var$protocols.alis = (parcelRequire("74izN"));
}

$ca442ffd50164601$var$protocols.ws = (parcelRequire("j6FXg"));

$ca442ffd50164601$var$protocols.wss = (parcelRequire("j6FXg"));
/**
 * Parse the auth attribute and merge username and password in the options object.
 *
 * @param {Object} [opts] option object
 */ function $ca442ffd50164601$var$parseAuthOptions(opts) {
    var matches;
    if (opts.auth) {
        matches = opts.auth.match(/^(.+):(.+)$/);
        if (matches) {
            opts.username = matches[1];
            opts.password = matches[2];
        } else opts.username = opts.auth;
    }
}
/**
 * connect - connect to an MQTT broker.
 *
 * @param {String} [brokerUrl] - url of the broker, optional
 * @param {Object} opts - see MqttClient#constructor
 */ function $ca442ffd50164601$var$connect(brokerUrl, opts) {
    var wrapper = function wrapper(client) {
        if (opts.servers) {
            if (!client._reconnectCount || client._reconnectCount === opts.servers.length) client._reconnectCount = 0;
            opts.host = opts.servers[client._reconnectCount].host;
            opts.port = opts.servers[client._reconnectCount].port;
            opts.protocol = !opts.servers[client._reconnectCount].protocol ? opts.defaultProtocol : opts.servers[client._reconnectCount].protocol;
            opts.hostname = opts.host;
            client._reconnectCount++;
        }
        $ca442ffd50164601$var$debug("calling streambuilder for", opts.protocol);
        return $ca442ffd50164601$var$protocols[opts.protocol](client, opts);
    };
    $ca442ffd50164601$var$debug("connecting to an MQTT broker...");
    if (typeof brokerUrl === "object" && !opts) {
        opts = brokerUrl;
        brokerUrl = null;
    }
    opts = opts || {};
    if (brokerUrl) {
        // eslint-disable-next-line
        var parsed = $5900581c761d2302$export$98e6a39c04603d36(brokerUrl, true);
        if (parsed.port != null) parsed.port = Number(parsed.port);
        opts = $95223428da314994$exports(parsed, opts);
        if (opts.protocol === null) throw new Error("Missing protocol");
        opts.protocol = opts.protocol.replace(/:$/, "");
    }
    // merge in the auth options if supplied
    $ca442ffd50164601$var$parseAuthOptions(opts);
    // support clientId passed in the query string of the url
    if (opts.query && typeof opts.query.clientId === "string") opts.clientId = opts.query.clientId;
    if (opts.cert && opts.key) {
        if (opts.protocol) {
            if ([
                "mqtts",
                "wss",
                "wxs",
                "alis"
            ].indexOf(opts.protocol) === -1) switch(opts.protocol){
                case "mqtt":
                    opts.protocol = "mqtts";
                    break;
                case "ws":
                    opts.protocol = "wss";
                    break;
                case "wx":
                    opts.protocol = "wxs";
                    break;
                case "ali":
                    opts.protocol = "alis";
                    break;
                default:
                    throw new Error('Unknown protocol for secure connection: "' + opts.protocol + '"!');
            }
        } else // A cert and key was provided, however no protocol was specified, so we will throw an error.
        throw new Error("Missing secure protocol key");
    }
    if (!$ca442ffd50164601$var$protocols[opts.protocol]) {
        var isSecure = [
            "mqtts",
            "wss"
        ].indexOf(opts.protocol) !== -1;
        opts.protocol = [
            "mqtt",
            "mqtts",
            "ws",
            "wss",
            "wx",
            "wxs",
            "ali",
            "alis"
        ].filter(function(key, index) {
            if (isSecure && index % 2 === 0) // Skip insecure protocols when requesting a secure one.
            return false;
            return typeof $ca442ffd50164601$var$protocols[key] === "function";
        })[0];
    }
    if (opts.clean === false && !opts.clientId) throw new Error("Missing clientId for unclean clients");
    if (opts.protocol) opts.defaultProtocol = opts.protocol;
    var client = new $c67560551cdef195$exports(wrapper, opts);
    client.on("error", function() {});
    return client;
}
$ca442ffd50164601$exports = $ca442ffd50164601$var$connect;
$ca442ffd50164601$exports.connect = $ca442ffd50164601$var$connect;
$ca442ffd50164601$exports.MqttClient = $c67560551cdef195$exports;
$ca442ffd50164601$exports.Store = $655a5fdbc2e87cf5$exports;


var $f49b5d023fcb4a5c$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function extendStatics1(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        var __ = function __() {
            this.constructor = d;
        };
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $f49b5d023fcb4a5c$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var $f49b5d023fcb4a5c$var$__spreadArray = undefined && undefined.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var $f49b5d023fcb4a5c$var$__values = undefined && undefined.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
// const mqtt = require('mqtt');
/**
 * An abstraction on top of WebSockets to provide fastest
 * possible connection for peers.
 */ var $f49b5d023fcb4a5c$export$6514a2a959a3f251 = /** @class */ function(_super) {
    var MQTTSignaling = function MQTTSignaling(secure, host, port, path, pingInterval) {
        if (pingInterval === void 0) pingInterval = 30;
        var _this = _super.call(this) || this;
        _this.pingInterval = pingInterval;
        _this._disconnected = true;
        _this._messagesQueue = [];
        var wsProtocol = secure ? "wss://" : "ws://";
        _this._baseUrl = wsProtocol + host + ":" + port + path;
        _this.pingInterval = pingInterval;
        return _this;
    };
    $f49b5d023fcb4a5c$var$__extends(MQTTSignaling, _super);
    Object.defineProperty(MQTTSignaling.prototype, "localtopic", {
        get: function get() {
            return this._localtopic;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MQTTSignaling.prototype, "mqtt", {
        get: function get() {
            return this._mqtt;
        },
        enumerable: false,
        configurable: true
    });
    MQTTSignaling.prototype.start = function(id) {
        var _this = this;
        this._id = id;
        this._localtopic = "webrtc/signaling/" + id;
        (0, $96fb85a532fc3748$exports.default).log("MQTT baseURL:", this._baseUrl);
        if (!!this._mqtt || !this._disconnected) return;
        var options = {
            keepalive: this.pingInterval,
            clientId: "peermq-" + this._id,
            protocolId: "MQTT",
            protocolVersion: 4,
            clean: true,
            connectTimeout: 4000,
            reconnectPeriod: 1000
        };
        var mqtt = (0, $ca442ffd50164601$exports.connect)(this._baseUrl, options);
        this._mqtt = mqtt;
        mqtt.on("connect", function() {
            (0, $96fb85a532fc3748$exports.default).log("mqtt connected");
            mqtt.subscribe(_this.localtopic, function(err) {
                (0, $96fb85a532fc3748$exports.default).log("subscribe localtopic:", _this.localtopic);
                if (!err) {
                    _this._disconnected = false;
                    _this.emit((0, $8b9dc3e5f2ea4cc9$export$3b5c4a4b6354f023).Message, {
                        type: (0, $8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d).Open
                    });
                }
            });
            _this._sendQueuedMessages();
        });
        mqtt.on("message", function(topic, message) {
            // message is Buffer
            (0, $96fb85a532fc3748$exports.default).log("topic:", topic.toString(), "message:", message.toString());
            if (topic == _this.localtopic) _this.emit((0, $8b9dc3e5f2ea4cc9$export$3b5c4a4b6354f023).Message, JSON.parse(message.toString()));
            else {
                (0, $96fb85a532fc3748$exports.default).log("Invalid server message", message);
                return;
            }
        });
        mqtt.on("disconnect", function() {
            if (_this._disconnected) return;
            (0, $96fb85a532fc3748$exports.default).log("MQTT disconnected.");
            _this._cleanup();
            _this._disconnected = true;
            _this.emit((0, $8b9dc3e5f2ea4cc9$export$3b5c4a4b6354f023).Disconnected);
        });
    };
    /** Send queued messages. */ MQTTSignaling.prototype._sendQueuedMessages = function() {
        var e_1, _a;
        //Create copy of queue and clear it,
        //because send method push the message back to queue if smth will go wrong
        var copiedQueue = $f49b5d023fcb4a5c$var$__spreadArray([], $f49b5d023fcb4a5c$var$__read(this._messagesQueue), false);
        this._messagesQueue = [];
        try {
            for(var copiedQueue_1 = $f49b5d023fcb4a5c$var$__values(copiedQueue), copiedQueue_1_1 = copiedQueue_1.next(); !copiedQueue_1_1.done; copiedQueue_1_1 = copiedQueue_1.next()){
                var message = copiedQueue_1_1.value;
                this.send(message);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (copiedQueue_1_1 && !copiedQueue_1_1.done && (_a = copiedQueue_1["return"])) _a.call(copiedQueue_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
    };
    /** Exposed send for DC & Peer. */ MQTTSignaling.prototype.send = function(data) {
        (0, $96fb85a532fc3748$exports.default).log("send data:", data);
        // If we didn't get an ID yet, we can't yet send anything so we should queue
        // up these messages.
        if (!this._id) {
            this._messagesQueue.push(data);
            return;
        }
        if (this._disconnected) return;
        if (!data.type) {
            this.emit((0, $8b9dc3e5f2ea4cc9$export$3b5c4a4b6354f023).Error, " send Invalid message");
            return;
        }
        if (!data.dst) {
            (0, $96fb85a532fc3748$exports.default).error("No dst");
            this.emit((0, $8b9dc3e5f2ea4cc9$export$3b5c4a4b6354f023).Error, "Not dst");
            return;
        }
        if (!this._mqtt.connected) return;
        var message = JSON.stringify(data);
        this._mqtt.publish("webrtc/signaling/" + data.dst, message);
    };
    MQTTSignaling.prototype.close = function() {
        if (this._disconnected) return;
        this._cleanup();
        this._disconnected = true;
    };
    MQTTSignaling.prototype._cleanup = function() {
        if (this._mqtt) {
            this._mqtt.end();
            this._mqtt = undefined;
        }
    };
    return MQTTSignaling;
}((0, $b43bf3d87e5977ce$exports.EventEmitter));


var $2dee96d763ef5e84$exports = {};

$parcel$export($2dee96d763ef5e84$exports, "MediaConnection", function () { return $2dee96d763ef5e84$export$4a84e95a2324ac29; }, function (v) { return $2dee96d763ef5e84$export$4a84e95a2324ac29 = v; });


var $daff3b483806ca69$exports = {};

$parcel$export($daff3b483806ca69$exports, "Negotiator", function () { return $daff3b483806ca69$export$89e6bb5ad64bf4a; }, function (v) { return $daff3b483806ca69$export$89e6bb5ad64bf4a = v; });



var $daff3b483806ca69$var$__assign = undefined && undefined.__assign || function() {
    $daff3b483806ca69$var$__assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $daff3b483806ca69$var$__assign.apply(this, arguments);
};
var $daff3b483806ca69$var$__awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    var adopt = function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    };
    return new (P || (P = Promise))(function(resolve, reject) {
        var fulfilled = function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        };
        var rejected = function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        };
        var step = function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        };
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var $daff3b483806ca69$var$__generator = undefined && undefined.__generator || function(thisArg, body) {
    var verb = function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    };
    var step = function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    };
    var _ = {
        label: 0,
        sent: function sent() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
};
/**
 * Manages all negotiations between Peers.
 */ var $daff3b483806ca69$export$89e6bb5ad64bf4a = /** @class */ function() {
    var Negotiator = function Negotiator(connection) {
        this.connection = connection;
    };
    /** Returns a PeerConnection object set up correctly (for data, media). */ Negotiator.prototype.startConnection = function(options) {
        var peerConnection = this._startPeerConnection();
        // Set the connection's PC.
        this.connection.peerConnection = peerConnection;
        if (this.connection.type === (0, $8b9dc3e5f2ea4cc9$export$3157d57b4135e3bc).Media && options._stream) this._addTracksToConnection(options._stream, peerConnection);
        // What do we need to do now?
        if (options.originator) {
            if (this.connection.type === (0, $8b9dc3e5f2ea4cc9$export$3157d57b4135e3bc).Data) {
                var dataConnection = this.connection;
                var config = {
                    ordered: !!options.reliable
                };
                var dataChannel = peerConnection.createDataChannel(dataConnection.label, config);
                dataConnection.initialize(dataChannel);
            } else if (this.connection.type === (0, $8b9dc3e5f2ea4cc9$export$3157d57b4135e3bc).Media) {
                var mediaConnection = this.connection;
                var dataChannel = peerConnection.createDataChannel(mediaConnection.connectionId);
                mediaConnection.initialize(dataChannel);
            }
            this._makeOffer();
        } else this.handleSDP("OFFER", options.sdp);
    };
    /** Start a PC. */ Negotiator.prototype._startPeerConnection = function() {
        (0, $96fb85a532fc3748$exports.default).log("Creating RTCPeerConnection.");
        var peerConnection = new RTCPeerConnection(this.connection.provider.options.config);
        this._setupListeners(peerConnection);
        return peerConnection;
    };
    /** Set up various WebRTC listeners. */ Negotiator.prototype._setupListeners = function(peerConnection) {
        var _this = this;
        var peerId = this.connection.peer;
        var connectionId = this.connection.connectionId;
        var connectionType = this.connection.type;
        var provider = this.connection.provider;
        // ICE CANDIDATES.
        (0, $96fb85a532fc3748$exports.default).log("Listening for ICE candidates.");
        peerConnection.onicecandidate = function(evt) {
            if (!evt.candidate || !evt.candidate.candidate) return;
            (0, $96fb85a532fc3748$exports.default).log("Received ICE candidates for ".concat(peerId, ":"), evt.candidate);
            provider.mqtt.send({
                type: (0, $8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d).Candidate,
                payload: {
                    candidate: evt.candidate,
                    type: connectionType,
                    connectionId: connectionId
                },
                dst: peerId,
                src: provider.id
            });
        };
        peerConnection.oniceconnectionstatechange = function() {
            switch(peerConnection.iceConnectionState){
                case "failed":
                    (0, $96fb85a532fc3748$exports.default).log("iceConnectionState is failed, closing connections to " + peerId);
                    _this.connection.emit("error", new Error("Negotiation of connection to " + peerId + " failed."));
                    _this.connection.close();
                    break;
                case "closed":
                    (0, $96fb85a532fc3748$exports.default).log("iceConnectionState is closed, closing connections to " + peerId);
                    _this.connection.emit("error", new Error("Connection to " + peerId + " closed."));
                    _this.connection.close();
                    break;
                case "disconnected":
                    (0, $96fb85a532fc3748$exports.default).log("iceConnectionState changed to disconnected on the connection with " + peerId);
                    break;
                case "completed":
                    peerConnection.onicecandidate = (0, $7dc43ad2ffa25036$exports.util).noop;
                    break;
            }
            _this.connection.emit("iceStateChanged", peerConnection.iceConnectionState);
        };
        // DATACONNECTION.
        (0, $96fb85a532fc3748$exports.default).log("Listening for data channel");
        // Fired between offer and answer, so options should already be saved
        // in the options hash.
        peerConnection.ondatachannel = function(evt) {
            (0, $96fb85a532fc3748$exports.default).log("Received data channel");
            var dataChannel = evt.channel;
            var connection = provider.getConnection(peerId, connectionId);
            connection.initialize(dataChannel);
        };
        // MEDIACONNECTION.
        (0, $96fb85a532fc3748$exports.default).log("Listening for remote stream");
        peerConnection.ontrack = function(evt) {
            (0, $96fb85a532fc3748$exports.default).log("Received remote stream");
            var stream = evt.streams[0];
            var connection = provider.getConnection(peerId, connectionId);
            if (connection.type === (0, $8b9dc3e5f2ea4cc9$export$3157d57b4135e3bc).Media) {
                var mediaConnection = connection;
                _this._addStreamToMediaConnection(stream, mediaConnection);
            }
        };
    };
    Negotiator.prototype.cleanup = function() {
        (0, $96fb85a532fc3748$exports.default).log("Cleaning up PeerConnection to " + this.connection.peer);
        var peerConnection = this.connection.peerConnection;
        if (!peerConnection) return;
        this.connection.peerConnection = null;
        //unsubscribe from all PeerConnection's events
        peerConnection.onicecandidate = peerConnection.oniceconnectionstatechange = peerConnection.ondatachannel = peerConnection.ontrack = function() {};
        var peerConnectionNotClosed = peerConnection.signalingState !== "closed";
        var dataChannelNotClosed = false;
        if (this.connection.type === (0, $8b9dc3e5f2ea4cc9$export$3157d57b4135e3bc).Data) {
            var dataConnection = this.connection;
            var dataChannel = dataConnection.dataChannel;
            if (dataChannel) dataChannelNotClosed = !!dataChannel.readyState && dataChannel.readyState !== "closed";
        } else if (this.connection.type === (0, $8b9dc3e5f2ea4cc9$export$3157d57b4135e3bc).Media) {
            var mediaConnection = this.connection;
            var dataChannel = mediaConnection.dataChannel;
            if (dataChannel) dataChannelNotClosed = !!dataChannel.readyState && dataChannel.readyState !== "closed";
        }
        if (peerConnectionNotClosed || dataChannelNotClosed) peerConnection.close();
    };
    Negotiator.prototype._makeOffer = function() {
        return $daff3b483806ca69$var$__awaiter(this, void 0, Promise, function() {
            var peerConnection, provider, offer, payload, dataConnection, err_2, err_1_1;
            return $daff3b483806ca69$var$__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        peerConnection = this.connection.peerConnection;
                        provider = this.connection.provider;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            7,
                            ,
                            8
                        ]);
                        return [
                            4 /*yield*/ ,
                            peerConnection.createOffer(this.connection.options.constraints)
                        ];
                    case 2:
                        offer = _a.sent();
                        (0, $96fb85a532fc3748$exports.default).log("Created offer.");
                        if (this.connection.options.sdpTransform && typeof this.connection.options.sdpTransform === "function") offer.sdp = this.connection.options.sdpTransform(offer.sdp) || offer.sdp;
                        _a.label = 3;
                    case 3:
                        _a.trys.push([
                            3,
                            5,
                            ,
                            6
                        ]);
                        return [
                            4 /*yield*/ ,
                            peerConnection.setLocalDescription(offer)
                        ];
                    case 4:
                        _a.sent();
                        (0, $96fb85a532fc3748$exports.default).log("Set localDescription:", offer, "for:".concat(this.connection.peer));
                        payload = {
                            sdp: offer,
                            type: this.connection.type,
                            connectionId: this.connection.connectionId,
                            metadata: this.connection.metadata,
                            browser: (0, $7dc43ad2ffa25036$exports.util).browser
                        };
                        if (this.connection.type === (0, $8b9dc3e5f2ea4cc9$export$3157d57b4135e3bc).Data) {
                            dataConnection = this.connection;
                            payload = $daff3b483806ca69$var$__assign($daff3b483806ca69$var$__assign({}, payload), {
                                label: dataConnection.label,
                                reliable: dataConnection.reliable,
                                serialization: dataConnection.serialization
                            });
                        }
                        provider.mqtt.send({
                            type: (0, $8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d).Offer,
                            payload: payload,
                            dst: this.connection.peer,
                            src: provider.id
                        });
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 5:
                        err_2 = _a.sent();
                        // TODO: investigate why _makeOffer is being called from the answer
                        if (err_2 != "OperationError: Failed to set local offer sdp: Called in wrong state: kHaveRemoteOffer") {
                            provider.emitError((0, $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff).WebRTC, err_2);
                            (0, $96fb85a532fc3748$exports.default).log("Failed to setLocalDescription, ", err_2);
                        }
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 6:
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 7:
                        err_1_1 = _a.sent();
                        provider.emitError((0, $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff).WebRTC, err_1_1);
                        (0, $96fb85a532fc3748$exports.default).log("Failed to createOffer, ", err_1_1);
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 8:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    Negotiator.prototype._makeAnswer = function() {
        return $daff3b483806ca69$var$__awaiter(this, void 0, Promise, function() {
            var peerConnection, provider, answer, err_3, err_1_2;
            return $daff3b483806ca69$var$__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        peerConnection = this.connection.peerConnection;
                        provider = this.connection.provider;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            7,
                            ,
                            8
                        ]);
                        return [
                            4 /*yield*/ ,
                            peerConnection.createAnswer()
                        ];
                    case 2:
                        answer = _a.sent();
                        (0, $96fb85a532fc3748$exports.default).log("Created answer.");
                        if (this.connection.options.sdpTransform && typeof this.connection.options.sdpTransform === "function") answer.sdp = this.connection.options.sdpTransform(answer.sdp) || answer.sdp;
                        _a.label = 3;
                    case 3:
                        _a.trys.push([
                            3,
                            5,
                            ,
                            6
                        ]);
                        return [
                            4 /*yield*/ ,
                            peerConnection.setLocalDescription(answer)
                        ];
                    case 4:
                        _a.sent();
                        (0, $96fb85a532fc3748$exports.default).log("Set localDescription:", answer, "for:".concat(this.connection.peer));
                        provider.mqtt.send({
                            type: (0, $8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d).Answer,
                            payload: {
                                sdp: answer,
                                type: this.connection.type,
                                connectionId: this.connection.connectionId,
                                browser: (0, $7dc43ad2ffa25036$exports.util).browser
                            },
                            dst: this.connection.peer,
                            src: provider.id
                        });
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 5:
                        err_3 = _a.sent();
                        provider.emitError((0, $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff).WebRTC, err_3);
                        (0, $96fb85a532fc3748$exports.default).log("Failed to setLocalDescription, ", err_3);
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 6:
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 7:
                        err_1_2 = _a.sent();
                        provider.emitError((0, $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff).WebRTC, err_1_2);
                        (0, $96fb85a532fc3748$exports.default).log("Failed to create answer, ", err_1_2);
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 8:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /** Handle an SDP. */ Negotiator.prototype.handleSDP = function(type, sdp) {
        return $daff3b483806ca69$var$__awaiter(this, void 0, Promise, function() {
            var peerConnection, provider, self, err_4;
            return $daff3b483806ca69$var$__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        sdp = new RTCSessionDescription(sdp);
                        peerConnection = this.connection.peerConnection;
                        provider = this.connection.provider;
                        (0, $96fb85a532fc3748$exports.default).log("Setting remote description", sdp);
                        self = this;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            5,
                            ,
                            6
                        ]);
                        return [
                            4 /*yield*/ ,
                            peerConnection.setRemoteDescription(sdp)
                        ];
                    case 2:
                        _a.sent();
                        (0, $96fb85a532fc3748$exports.default).log("Set remoteDescription:".concat(type, " for:").concat(this.connection.peer));
                        if (!(type === "OFFER")) return [
                            3 /*break*/ ,
                            4
                        ];
                        return [
                            4 /*yield*/ ,
                            self._makeAnswer()
                        ];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 5:
                        err_4 = _a.sent();
                        provider.emitError((0, $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff).WebRTC, err_4);
                        (0, $96fb85a532fc3748$exports.default).log("Failed to setRemoteDescription, ", err_4);
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 6:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /** Handle a candidate. */ Negotiator.prototype.handleCandidate = function(ice) {
        return $daff3b483806ca69$var$__awaiter(this, void 0, Promise, function() {
            var candidate, sdpMLineIndex, sdpMid, peerConnection, provider, err_5;
            return $daff3b483806ca69$var$__generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        (0, $96fb85a532fc3748$exports.default).log("handleCandidate:", ice);
                        candidate = ice.candidate;
                        sdpMLineIndex = ice.sdpMLineIndex;
                        sdpMid = ice.sdpMid;
                        peerConnection = this.connection.peerConnection;
                        provider = this.connection.provider;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            peerConnection.addIceCandidate(new RTCIceCandidate({
                                sdpMid: sdpMid,
                                sdpMLineIndex: sdpMLineIndex,
                                candidate: candidate
                            }))
                        ];
                    case 2:
                        _a.sent();
                        (0, $96fb85a532fc3748$exports.default).log("Added ICE candidate for:".concat(this.connection.peer));
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        err_5 = _a.sent();
                        provider.emitError((0, $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff).WebRTC, err_5);
                        (0, $96fb85a532fc3748$exports.default).log("Failed to handleCandidate, ", err_5);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    Negotiator.prototype._addTracksToConnection = function(stream, peerConnection) {
        (0, $96fb85a532fc3748$exports.default).log("add tracks from stream ".concat(stream.id, " to peer connection"));
        if (!peerConnection.addTrack) return (0, $96fb85a532fc3748$exports.default).error("Your browser does't support RTCPeerConnection#addTrack. Ignored.");
        stream.getTracks().forEach(function(track) {
            peerConnection.addTrack(track, stream);
        });
    };
    Negotiator.prototype._addStreamToMediaConnection = function(stream, mediaConnection) {
        (0, $96fb85a532fc3748$exports.default).log("add stream ".concat(stream.id, " to media connection ").concat(mediaConnection.connectionId));
        mediaConnection.addStream(stream);
    };
    return Negotiator;
}();



var $5d892295c5b1457a$exports = {};

$parcel$export($5d892295c5b1457a$exports, "BaseConnection", function () { return $5d892295c5b1457a$export$23a2a68283c24d80; }, function (v) { return $5d892295c5b1457a$export$23a2a68283c24d80 = v; });

var $5d892295c5b1457a$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function extendStatics1(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        var __ = function __() {
            this.constructor = d;
        };
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $5d892295c5b1457a$export$23a2a68283c24d80 = /** @class */ function(_super) {
    var BaseConnection = function BaseConnection(peer, provider, options) {
        var _this = _super.call(this) || this;
        _this.peer = peer;
        _this.provider = provider;
        _this.options = options;
        _this._open = false;
        _this.metadata = options.metadata;
        return _this;
    };
    $5d892295c5b1457a$var$__extends(BaseConnection, _super);
    Object.defineProperty(BaseConnection.prototype, "open", {
        get: function get() {
            return this._open;
        },
        enumerable: false,
        configurable: true
    });
    return BaseConnection;
}((0, $b43bf3d87e5977ce$exports.EventEmitter));


var $2dee96d763ef5e84$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function extendStatics1(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        var __ = function __() {
            this.constructor = d;
        };
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $2dee96d763ef5e84$var$__assign = undefined && undefined.__assign || function() {
    $2dee96d763ef5e84$var$__assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $2dee96d763ef5e84$var$__assign.apply(this, arguments);
};
var $2dee96d763ef5e84$var$__values = undefined && undefined.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
/**
 * Wraps the streaming interface between two Peers.
 */ var $2dee96d763ef5e84$export$4a84e95a2324ac29 = /** @class */ function(_super) {
    $2dee96d763ef5e84$var$__extends(MediaConnection, _super);
    function MediaConnection(peerId, provider, options) {
        var _this = _super.call(this, peerId, provider, options) || this;
        _this._localStream = _this.options._stream;
        _this.connectionId = _this.options.connectionId || MediaConnection.ID_PREFIX + (0, $7dc43ad2ffa25036$exports.util).randomToken();
        _this._negotiator = new (0, $daff3b483806ca69$exports.Negotiator)(_this);
        if (_this._localStream) _this._negotiator.startConnection({
            _stream: _this._localStream,
            originator: true
        });
        return _this;
    }
    Object.defineProperty(MediaConnection.prototype, "type", {
        get: function get() {
            return (0, $8b9dc3e5f2ea4cc9$export$3157d57b4135e3bc).Media;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MediaConnection.prototype, "localStream", {
        get: function get() {
            return this._localStream;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MediaConnection.prototype, "remoteStream", {
        get: function get() {
            return this._remoteStream;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MediaConnection.prototype, "dataChannel", {
        get: function get() {
            return this._dc;
        },
        enumerable: false,
        configurable: true
    });
    /** Called by the Negotiator when the DataChannel is ready. */ MediaConnection.prototype.initialize = function(dc) {
        this._dc = dc;
        this._configureDataChannel();
    };
    MediaConnection.prototype._configureDataChannel = function() {
        var _this = this;
        if (!(0, $7dc43ad2ffa25036$exports.util).supports.binaryBlob || (0, $7dc43ad2ffa25036$exports.util).supports.reliable) this.dataChannel.binaryType = "arraybuffer";
        this.dataChannel.onopen = function() {
            (0, $96fb85a532fc3748$exports.default).log("DC#".concat(_this.connectionId, " dc connection success"));
        };
        this.dataChannel.onmessage = function(e) {
            (0, $96fb85a532fc3748$exports.default).log("DC#".concat(_this.connectionId, " dc onmessage:"), e.data);
        };
        this.dataChannel.onclose = function() {
            (0, $96fb85a532fc3748$exports.default).log("DC#".concat(_this.connectionId, " dc closed for:"), _this.peer);
            _this.close();
        };
    };
    MediaConnection.prototype.addStream = function(remoteStream) {
        (0, $96fb85a532fc3748$exports.default).log("Receiving stream", remoteStream);
        this._remoteStream = remoteStream;
        _super.prototype.emit.call(this, "stream", remoteStream); // Should we call this `open`?
    };
    MediaConnection.prototype.handleMessage = function(message) {
        var type = message.type;
        var payload = message.payload;
        switch(message.type){
            case (0, $8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d).Answer:
                // Forward to negotiator
                this._negotiator.handleSDP(type, payload.sdp);
                this._open = true;
                break;
            case (0, $8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d).Candidate:
                this._negotiator.handleCandidate(payload.candidate);
                break;
            default:
                (0, $96fb85a532fc3748$exports.default).warn("Unrecognized message type:".concat(type, " from peer:").concat(this.peer));
                break;
        }
    };
    MediaConnection.prototype.answer = function(stream, options) {
        var e_1, _a;
        if (options === void 0) options = {};
        if (this._localStream) {
            (0, $96fb85a532fc3748$exports.default).warn("Local stream already exists on this MediaConnection. Are you answering a call twice?");
            return;
        }
        this._localStream = stream;
        if (options && options.sdpTransform) this.options.sdpTransform = options.sdpTransform;
        this._negotiator.startConnection($2dee96d763ef5e84$var$__assign($2dee96d763ef5e84$var$__assign({}, this.options._payload), {
            _stream: stream
        }));
        // Retrieve lost messages stored because PeerConnection not set up.
        var messages = this.provider._getMessages(this.connectionId);
        try {
            for(var messages_1 = $2dee96d763ef5e84$var$__values(messages), messages_1_1 = messages_1.next(); !messages_1_1.done; messages_1_1 = messages_1.next()){
                var message = messages_1_1.value;
                this.handleMessage(message);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (messages_1_1 && !messages_1_1.done && (_a = messages_1["return"])) _a.call(messages_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        this._open = true;
    };
    /**
     * Exposed functionality for users.
     */ /** Allows user to close connection. */ MediaConnection.prototype.close = function() {
        if (this._negotiator) {
            this._negotiator.cleanup();
            this._negotiator = null;
        }
        this._localStream = null;
        this._remoteStream = null;
        if (this.provider) {
            this.provider._removeConnection(this);
            this.provider = null;
        }
        if (this.options && this.options._stream) this.options._stream = null;
        if (!this.open) return;
        this._open = false;
        _super.prototype.emit.call(this, "close");
    };
    MediaConnection.ID_PREFIX = "mc_";
    return MediaConnection;
}((0, $5d892295c5b1457a$exports.BaseConnection));


var $4b24811a876734be$exports = {};

$parcel$export($4b24811a876734be$exports, "DataConnection", function () { return $4b24811a876734be$export$d365f7ad9d7df9c9; }, function (v) { return $4b24811a876734be$export$d365f7ad9d7df9c9 = v; });





var $c9c05de86256a90f$exports = {};

$parcel$export($c9c05de86256a90f$exports, "EncodingQueue", function () { return $c9c05de86256a90f$export$c6913ae0ed687038; }, function (v) { return $c9c05de86256a90f$export$c6913ae0ed687038 = v; });


var $c9c05de86256a90f$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function extendStatics1(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        var __ = function __() {
            this.constructor = d;
        };
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $c9c05de86256a90f$export$c6913ae0ed687038 = /** @class */ function(_super) {
    var EncodingQueue = function EncodingQueue() {
        var _this = _super.call(this) || this;
        _this.fileReader = new FileReader();
        _this._queue = [];
        _this._processing = false;
        _this.fileReader.onload = function(evt) {
            _this._processing = false;
            if (evt.target) _this.emit("done", evt.target.result);
            _this.doNextTask();
        };
        _this.fileReader.onerror = function(evt) {
            (0, $96fb85a532fc3748$exports.default).error("EncodingQueue error:", evt);
            _this._processing = false;
            _this.destroy();
            _this.emit("error", evt);
        };
        return _this;
    };
    $c9c05de86256a90f$var$__extends(EncodingQueue, _super);
    Object.defineProperty(EncodingQueue.prototype, "queue", {
        get: function get() {
            return this._queue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EncodingQueue.prototype, "size", {
        get: function get() {
            return this.queue.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EncodingQueue.prototype, "processing", {
        get: function get() {
            return this._processing;
        },
        enumerable: false,
        configurable: true
    });
    EncodingQueue.prototype.enque = function(blob) {
        this.queue.push(blob);
        if (this.processing) return;
        this.doNextTask();
    };
    EncodingQueue.prototype.destroy = function() {
        this.fileReader.abort();
        this._queue = [];
    };
    EncodingQueue.prototype.doNextTask = function() {
        if (this.size === 0) return;
        if (this.processing) return;
        this._processing = true;
        this.fileReader.readAsArrayBuffer(this.queue.shift());
    };
    return EncodingQueue;
}((0, $b43bf3d87e5977ce$exports.EventEmitter));


var $4b24811a876734be$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function extendStatics1(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        var __ = function __() {
            this.constructor = d;
        };
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $4b24811a876734be$var$__values = undefined && undefined.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
/**
 * Wraps a DataChannel between two Peers.
 */ var $4b24811a876734be$export$d365f7ad9d7df9c9 = /** @class */ function(_super) {
    $4b24811a876734be$var$__extends(DataConnection, _super);
    function DataConnection(peerId, provider, options) {
        var _this = _super.call(this, peerId, provider, options) || this;
        _this.stringify = JSON.stringify;
        _this.parse = JSON.parse;
        _this._buffer = [];
        _this._bufferSize = 0;
        _this._buffering = false;
        _this._chunkedData = {};
        _this._encodingQueue = new (0, $c9c05de86256a90f$exports.EncodingQueue)();
        _this.connectionId = _this.options.connectionId || DataConnection.ID_PREFIX + (0, $7dc43ad2ffa25036$exports.util).randomToken();
        _this.label = _this.options.label || _this.connectionId;
        _this.serialization = _this.options.serialization || (0, $8b9dc3e5f2ea4cc9$export$89f507cf986a947).Binary;
        _this.reliable = !!_this.options.reliable;
        _this._encodingQueue.on("done", function(ab) {
            _this._bufferedSend(ab);
        });
        _this._encodingQueue.on("error", function() {
            (0, $96fb85a532fc3748$exports.default).error("DC#".concat(_this.connectionId, ": Error occured in encoding from blob to arraybuffer, close DC"));
            _this.close();
        });
        _this._negotiator = new (0, $daff3b483806ca69$exports.Negotiator)(_this);
        _this._negotiator.startConnection(_this.options._payload || {
            originator: true
        });
        return _this;
    }
    Object.defineProperty(DataConnection.prototype, "type", {
        get: function get() {
            return (0, $8b9dc3e5f2ea4cc9$export$3157d57b4135e3bc).Data;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataConnection.prototype, "dataChannel", {
        get: function get() {
            return this._dc;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataConnection.prototype, "bufferSize", {
        get: function get() {
            return this._bufferSize;
        },
        enumerable: false,
        configurable: true
    });
    /** Called by the Negotiator when the DataChannel is ready. */ DataConnection.prototype.initialize = function(dc) {
        this._dc = dc;
        this._configureDataChannel();
    };
    DataConnection.prototype._configureDataChannel = function() {
        var _this = this;
        if (!(0, $7dc43ad2ffa25036$exports.util).supports.binaryBlob || (0, $7dc43ad2ffa25036$exports.util).supports.reliable) this.dataChannel.binaryType = "arraybuffer";
        this.dataChannel.onopen = function() {
            (0, $96fb85a532fc3748$exports.default).log("DC#".concat(_this.connectionId, " dc connection success"));
            _this._open = true;
            _this.emit("open");
        };
        this.dataChannel.onmessage = function(e) {
            (0, $96fb85a532fc3748$exports.default).log("DC#".concat(_this.connectionId, " dc onmessage:"), e.data);
            _this._handleDataMessage(e);
        };
        this.dataChannel.onclose = function() {
            (0, $96fb85a532fc3748$exports.default).log("DC#".concat(_this.connectionId, " dc closed for:"), _this.peer);
            _this.close();
        };
    };
    // Handles a DataChannel message.
    DataConnection.prototype._handleDataMessage = function(_a) {
        var _this = this;
        var data = _a.data;
        var datatype = data.constructor;
        var isBinarySerialization = this.serialization === (0, $8b9dc3e5f2ea4cc9$export$89f507cf986a947).Binary || this.serialization === (0, $8b9dc3e5f2ea4cc9$export$89f507cf986a947).BinaryUTF8;
        var deserializedData = data;
        if (isBinarySerialization) {
            if (datatype === Blob) {
                // Datatype should never be blob
                (0, $7dc43ad2ffa25036$exports.util).blobToArrayBuffer(data, function(ab) {
                    var unpackedData = (0, $7dc43ad2ffa25036$exports.util).unpack(ab);
                    _this.emit("data", unpackedData);
                });
                return;
            } else if (datatype === ArrayBuffer) deserializedData = (0, $7dc43ad2ffa25036$exports.util).unpack(data);
            else if (datatype === String) {
                // String fallback for binary data for browsers that don't support binary yet
                var ab = (0, $7dc43ad2ffa25036$exports.util).binaryStringToArrayBuffer(data);
                deserializedData = (0, $7dc43ad2ffa25036$exports.util).unpack(ab);
            }
        } else if (this.serialization === (0, $8b9dc3e5f2ea4cc9$export$89f507cf986a947).JSON) deserializedData = this.parse(data);
        // Check if we've chunked--if so, piece things back together.
        // We're guaranteed that this isn't 0.
        if (deserializedData.__peerData) {
            this._handleChunk(deserializedData);
            return;
        }
        _super.prototype.emit.call(this, "data", deserializedData);
    };
    DataConnection.prototype._handleChunk = function(data) {
        var id = data.__peerData;
        var chunkInfo = this._chunkedData[id] || {
            data: [],
            count: 0,
            total: data.total
        };
        chunkInfo.data[data.n] = new Uint8Array(data.data);
        chunkInfo.count++;
        this._chunkedData[id] = chunkInfo;
        if (chunkInfo.total === chunkInfo.count) {
            // Clean up before making the recursive call to `_handleDataMessage`.
            delete this._chunkedData[id];
            // We've received all the chunks--time to construct the complete data.
            var data_1 = (0, $7dc43ad2ffa25036$exports.concatArrayBuffers)(chunkInfo.data);
            this.emit("data", (0, $7dc43ad2ffa25036$exports.util).unpack(data_1));
        }
    };
    /**
     * Exposed functionality for users.
     */ /** Allows user to close connection. */ DataConnection.prototype.close = function() {
        this._buffer = [];
        this._bufferSize = 0;
        this._chunkedData = {};
        if (this._negotiator) {
            this._negotiator.cleanup();
            this._negotiator = null;
        }
        if (this.provider) {
            this.provider._removeConnection(this);
            this.provider = null;
        }
        if (this.dataChannel) {
            this.dataChannel.onopen = null;
            this.dataChannel.onmessage = null;
            this.dataChannel.onclose = null;
            this._dc = null;
        }
        if (this._encodingQueue) {
            this._encodingQueue.destroy();
            this._encodingQueue.removeAllListeners();
            this._encodingQueue = null;
        }
        if (!this.open) return;
        this._open = false;
        _super.prototype.emit.call(this, "close");
    };
    /** Allows user to send data. */ DataConnection.prototype.send = function(data, chunked) {
        var _this = this;
        if (!this.open) {
            _super.prototype.emit.call(this, "error", new Error("Connection is not open. You should listen for the `open` event before sending messages."));
            return;
        }
        if (data instanceof Blob) {
            data.arrayBuffer().then(function(ab) {
                return _this.send(ab);
            });
            return;
        }
        if (this.serialization === (0, $8b9dc3e5f2ea4cc9$export$89f507cf986a947).JSON) this._bufferedSend(this.stringify(data));
        else if (this.serialization === (0, $8b9dc3e5f2ea4cc9$export$89f507cf986a947).Binary || this.serialization === (0, $8b9dc3e5f2ea4cc9$export$89f507cf986a947).BinaryUTF8) {
            var blob = (0, $7dc43ad2ffa25036$exports.util).pack(data);
            if (!chunked && blob.byteLength > (0, $7dc43ad2ffa25036$exports.util).chunkedMTU) {
                this._sendChunks(blob);
                return;
            }
            this._bufferedSend(blob);
        } else this._bufferedSend(data);
    };
    DataConnection.prototype._bufferedSend = function(msg) {
        if (this._buffering || !this._trySend(msg)) {
            this._buffer.push(msg);
            this._bufferSize = this._buffer.length;
        }
    };
    // Returns true if the send succeeds.
    DataConnection.prototype._trySend = function(msg) {
        var _this = this;
        if (!this.open) return false;
        if (this.dataChannel.bufferedAmount > DataConnection.MAX_BUFFERED_AMOUNT) {
            this._buffering = true;
            setTimeout(function() {
                _this._buffering = false;
                _this._tryBuffer();
            }, 50);
            return false;
        }
        try {
            this.dataChannel.send(msg);
        } catch (e) {
            (0, $96fb85a532fc3748$exports.default).error("DC#:".concat(this.connectionId, " Error when sending:"), e);
            this._buffering = true;
            this.close();
            return false;
        }
        return true;
    };
    // Try to send the first message in the buffer.
    DataConnection.prototype._tryBuffer = function() {
        if (!this.open) return;
        if (this._buffer.length === 0) return;
        var msg = this._buffer[0];
        if (this._trySend(msg)) {
            this._buffer.shift();
            this._bufferSize = this._buffer.length;
            this._tryBuffer();
        }
    };
    DataConnection.prototype._sendChunks = function(blob) {
        var e_1, _a;
        var blobs = (0, $7dc43ad2ffa25036$exports.util).chunk(blob);
        (0, $96fb85a532fc3748$exports.default).log("DC#".concat(this.connectionId, " Try to send ").concat(blobs.length, " chunks..."));
        try {
            for(var blobs_1 = $4b24811a876734be$var$__values(blobs), blobs_1_1 = blobs_1.next(); !blobs_1_1.done; blobs_1_1 = blobs_1.next()){
                var blob_1 = blobs_1_1.value;
                this.send(blob_1, true);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (blobs_1_1 && !blobs_1_1.done && (_a = blobs_1["return"])) _a.call(blobs_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
    };
    DataConnection.prototype.handleMessage = function(message) {
        var payload = message.payload;
        switch(message.type){
            case (0, $8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d).Answer:
                this._negotiator.handleSDP(message.type, payload.sdp);
                break;
            case (0, $8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d).Candidate:
                this._negotiator.handleCandidate(payload.candidate);
                break;
            default:
                (0, $96fb85a532fc3748$exports.default).warn("Unrecognized message type:", message.type, "from peer:", this.peer);
                break;
        }
    };
    DataConnection.ID_PREFIX = "dc_";
    DataConnection.MAX_BUFFERED_AMOUNT = 8388608;
    return DataConnection;
}((0, $5d892295c5b1457a$exports.BaseConnection));



var $17252116aa2ef1fb$var$__extends = undefined && undefined.__extends || function() {
    var extendStatics = function extendStatics1(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        var __ = function __() {
            this.constructor = d;
        };
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var $17252116aa2ef1fb$var$__assign = undefined && undefined.__assign || function() {
    $17252116aa2ef1fb$var$__assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $17252116aa2ef1fb$var$__assign.apply(this, arguments);
};
var $17252116aa2ef1fb$var$__values = undefined && undefined.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function next() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var $17252116aa2ef1fb$var$__read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var $17252116aa2ef1fb$var$PeerOptions = /** @class */ function() {
    var PeerOptions = function PeerOptions() {};
    return PeerOptions;
}();
/**
 * A peer who can initiate connections with other peers.
 */ var $17252116aa2ef1fb$export$ecd1fc136c422448 = /** @class */ function(_super) {
    $17252116aa2ef1fb$var$__extends(Peer, _super);
    function Peer(id, options) {
        var _this = _super.call(this) || this;
        _this._id = null;
        _this._lastServerId = null;
        // States.
        _this._destroyed = false; // Connections have been killed
        _this._disconnected = false; // Connection to PeerServer killed but P2P connections still active
        _this._open = false; // Sockets and such are not yet open.
        _this._connections = new Map(); // All connections for this peer.
        _this._lostMessages = new Map(); // src => [list of messages]
        var userId;
        // Deal with overloading
        if (id && id.constructor == Object) options = id;
        else if (id) userId = id.toString();
        (0, $96fb85a532fc3748$exports.default).log("Constructing Peer with ID: " + userId);
        // Configurize options
        options = $17252116aa2ef1fb$var$__assign({
            debug: 3,
            secure: true,
            host: (0, $7dc43ad2ffa25036$exports.util).CLOUD_HOST,
            port: (0, $7dc43ad2ffa25036$exports.util).CLOUD_PORT,
            path: "/",
            key: Peer.DEFAULT_KEY,
            token: (0, $7dc43ad2ffa25036$exports.util).randomToken(),
            config: (0, $7dc43ad2ffa25036$exports.util).defaultConfig,
            referrerPolicy: "strict-origin-when-cross-origin"
        }, options);
        _this._options = options;
        // Detect relative URL host.
        if (_this._options.host === "/") _this._options.host = window.location.hostname;
        // Set path correctly.
        if (_this._options.path) {
            if (_this._options.path[0] !== "/") _this._options.path = "/" + _this._options.path;
        }
        // Set whether we use SSL to same as current host
        if (_this._options.secure === undefined && _this._options.host !== (0, $7dc43ad2ffa25036$exports.util).CLOUD_HOST) _this._options.secure = (0, $7dc43ad2ffa25036$exports.util).isSecure();
        else if (_this._options.host == (0, $7dc43ad2ffa25036$exports.util).CLOUD_HOST) _this._options.secure = true;
        // Set a custom log function if present
        if (_this._options.logFunction) (0, $96fb85a532fc3748$exports.default).setLogFunction(_this._options.logFunction);
        (0, $96fb85a532fc3748$exports.default).logLevel = _this._options.debug || 0;
        _this._mqtt = _this._createMQTTConnection();
        // Sanity checks
        // Ensure WebRTC supported
        if (!(0, $7dc43ad2ffa25036$exports.util).supports.audioVideo && !(0, $7dc43ad2ffa25036$exports.util).supports.data) {
            _this._delayedAbort((0, $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff).BrowserIncompatible, "The current browser does not support WebRTC");
            return _this;
        }
        // Ensure alphanumeric id
        if (!!userId && !(0, $7dc43ad2ffa25036$exports.util).validateId(userId)) {
            _this._delayedAbort((0, $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff).InvalidID, 'ID "'.concat(userId, '" is invalid'));
            return _this;
        }
        if (userId) _this._initialize(userId);
        else {
            var genuuid = (0, $dc6c8d20b7aadd2f$export$2e2bcd8739ae039)();
            (0, $96fb85a532fc3748$exports.default).log("generated uuid: " + genuuid);
            _this._initialize(genuuid);
        // this._api
        // 	.retrieveId()
        // 	.then((id) => this._initialize(id))
        // 	.catch((error) => this._abort(PeerErrorType.ServerError, error));
        }
        return _this;
    }
    Object.defineProperty(Peer.prototype, "id", {
        /**
         * The brokering ID of this peer
         */ get: function get() {
            return this._id;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Peer.prototype, "options", {
        get: function get() {
            return this._options;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Peer.prototype, "open", {
        get: function get() {
            return this._open;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Peer.prototype, "mqtt", {
        get: function get() {
            return this._mqtt;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Peer.prototype, "connections", {
        /**
         * A hash of all connections associated with this peer, keyed by the remote peer's ID.
         * @deprecated
         * Return type will change from Object to Map<string,[]>
         */ get: function get() {
            var e_1, _a;
            var plainConnections = Object.create(null);
            try {
                for(var _b = $17252116aa2ef1fb$var$__values(this._connections), _c = _b.next(); !_c.done; _c = _b.next()){
                    var _d = $17252116aa2ef1fb$var$__read(_c.value, 2), k = _d[0], v = _d[1];
                    plainConnections[k] = v;
                }
            } catch (e_1_1) {
                e_1 = {
                    error: e_1_1
                };
            } finally{
                try {
                    if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
                } finally{
                    if (e_1) throw e_1.error;
                }
            }
            return plainConnections;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Peer.prototype, "destroyed", {
        /**
         * true if this peer and all of its connections can no longer be used.
         */ get: function get() {
            return this._destroyed;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Peer.prototype, "disconnected", {
        /**
         * false if there is an active connection to the PeerServer.
         */ get: function get() {
            return this._disconnected;
        },
        enumerable: false,
        configurable: true
    });
    Peer.prototype._createMQTTConnection = function() {
        var _this = this;
        var socket = new (0, $f49b5d023fcb4a5c$exports.MQTTSignaling)(this._options.secure, this._options.host, this._options.port, this._options.path, this._options.pingInterval);
        socket.on((0, $8b9dc3e5f2ea4cc9$export$3b5c4a4b6354f023).Message, function(data) {
            _this._handleMessage(data);
        });
        socket.on((0, $8b9dc3e5f2ea4cc9$export$3b5c4a4b6354f023).Error, function(error) {
            _this._abort((0, $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff).SocketError, error);
        });
        socket.on((0, $8b9dc3e5f2ea4cc9$export$3b5c4a4b6354f023).Disconnected, function() {
            if (_this.disconnected) return;
            _this.emitError((0, $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff).Network, "Lost connection to server.");
            _this.disconnect();
        });
        socket.on((0, $8b9dc3e5f2ea4cc9$export$3b5c4a4b6354f023).Close, function() {
            if (_this.disconnected) return;
            _this._abort((0, $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff).SocketClosed, "Underlying socket is already closed.");
        });
        return socket;
    };
    /** Initialize a connection with the server. */ Peer.prototype._initialize = function(id) {
        this._id = id;
        this._mqtt.start(id);
    };
    /** Handles messages from the server. */ Peer.prototype._handleMessage = function(message) {
        var e_2, _a;
        var type = message.type;
        var payload = message.payload;
        var peerId = message.src;
        switch(type){
            case (0, $8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d).Open:
                this._lastServerId = this.id;
                this._open = true;
                this.emit("open", this.id);
                break;
            case (0, $8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d).Error:
                this._abort((0, $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff).ServerError, payload.msg);
                break;
            case (0, $8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d).IdTaken:
                this._abort((0, $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff).UnavailableID, 'ID "'.concat(this.id, '" is taken'));
                break;
            case (0, $8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d).InvalidKey:
                this._abort((0, $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff).InvalidKey, 'API KEY "'.concat(this._options.key, '" is invalid'));
                break;
            case (0, $8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d).Leave:
                (0, $96fb85a532fc3748$exports.default).log("Received leave message from ".concat(peerId));
                this._cleanupPeer(peerId);
                this._connections["delete"](peerId);
                break;
            case (0, $8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d).Expire:
                this.emitError((0, $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff).PeerUnavailable, "Could not connect to peer ".concat(peerId));
                break;
            case (0, $8b9dc3e5f2ea4cc9$export$adb4a1754da6f10d).Offer:
                // we should consider switching this to CALL/CONNECT, but this is the least breaking option.
                var connectionId = payload.connectionId;
                var connection = this.getConnection(peerId, connectionId);
                if (connection) {
                    connection.close();
                    (0, $96fb85a532fc3748$exports.default).warn("Offer received for existing Connection ID:".concat(connectionId));
                }
                // Create a new connection.
                if (payload.type === (0, $8b9dc3e5f2ea4cc9$export$3157d57b4135e3bc).Media) {
                    var mediaConnection = new (0, $2dee96d763ef5e84$exports.MediaConnection)(peerId, this, {
                        connectionId: connectionId,
                        _payload: payload,
                        metadata: payload.metadata
                    });
                    connection = mediaConnection;
                    this._addConnection(peerId, connection);
                    this.emit("call", mediaConnection);
                } else if (payload.type === (0, $8b9dc3e5f2ea4cc9$export$3157d57b4135e3bc).Data) {
                    var dataConnection = new (0, $4b24811a876734be$exports.DataConnection)(peerId, this, {
                        connectionId: connectionId,
                        _payload: payload,
                        metadata: payload.metadata,
                        label: payload.label,
                        serialization: payload.serialization,
                        reliable: payload.reliable
                    });
                    connection = dataConnection;
                    this._addConnection(peerId, connection);
                    this.emit("connection", dataConnection);
                } else {
                    (0, $96fb85a532fc3748$exports.default).warn("Received malformed connection type:".concat(payload.type));
                    return;
                }
                // Find messages.
                var messages = this._getMessages(connectionId);
                try {
                    for(var messages_1 = $17252116aa2ef1fb$var$__values(messages), messages_1_1 = messages_1.next(); !messages_1_1.done; messages_1_1 = messages_1.next()){
                        var message_1 = messages_1_1.value;
                        connection.handleMessage(message_1);
                    }
                } catch (e_2_1) {
                    e_2 = {
                        error: e_2_1
                    };
                } finally{
                    try {
                        if (messages_1_1 && !messages_1_1.done && (_a = messages_1["return"])) _a.call(messages_1);
                    } finally{
                        if (e_2) throw e_2.error;
                    }
                }
                break;
            default:
                if (!payload) {
                    (0, $96fb85a532fc3748$exports.default).warn("You received a malformed message from ".concat(peerId, " of type ").concat(type));
                    return;
                }
                var connectionId = payload.connectionId;
                var connection = this.getConnection(peerId, connectionId);
                if (connection && connection.peerConnection) // Pass it on.
                connection.handleMessage(message);
                else if (connectionId) // Store for possible later use
                this._storeMessage(connectionId, message);
                else (0, $96fb85a532fc3748$exports.default).warn("You received an unrecognized message:", message);
                break;
        }
    };
    /** Stores messages without a set up connection, to be claimed later. */ Peer.prototype._storeMessage = function(connectionId, message) {
        if (!this._lostMessages.has(connectionId)) this._lostMessages.set(connectionId, []);
        this._lostMessages.get(connectionId).push(message);
    };
    /** Retrieve messages from lost message store */ //TODO Change it to private
    Peer.prototype._getMessages = function(connectionId) {
        var messages = this._lostMessages.get(connectionId);
        if (messages) {
            this._lostMessages["delete"](connectionId);
            return messages;
        }
        return [];
    };
    /**
     * Connects to the remote peer specified by id and returns a data connection.
     * @param peer The brokering ID of the remote peer (their peer.id).
     * @param options for specifying details about Peer Connection
     */ Peer.prototype.connect = function(peer, options) {
        if (options === void 0) options = {};
        if (this.disconnected) {
            (0, $96fb85a532fc3748$exports.default).warn("You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect, or call reconnect on this peer if you believe its ID to still be available.");
            this.emitError((0, $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff).Disconnected, "Cannot connect to new Peer after disconnecting from server.");
            return;
        }
        var dataConnection = new (0, $4b24811a876734be$exports.DataConnection)(peer, this, options);
        this._addConnection(peer, dataConnection);
        return dataConnection;
    };
    /**
     * Calls the remote peer specified by id and returns a media connection.
     * @param peer The brokering ID of the remote peer (their peer.id).
     * @param stream The caller's media stream
     * @param options Metadata associated with the connection, passed in by whoever initiated the connection.
     */ Peer.prototype.call = function(peer, stream, options) {
        if (options === void 0) options = {};
        if (this.disconnected) {
            (0, $96fb85a532fc3748$exports.default).warn("You cannot connect to a new Peer because you called .disconnect() on this Peer and ended your connection with the server. You can create a new Peer to reconnect.");
            this.emitError((0, $8b9dc3e5f2ea4cc9$export$9547aaa2e39030ff).Disconnected, "Cannot connect to new Peer after disconnecting from server.");
            return;
        }
        if (!stream) {
            (0, $96fb85a532fc3748$exports.default).error("To call a peer, you must provide a stream from your browser's `getUserMedia`.");
            return;
        }
        var mediaConnection = new (0, $2dee96d763ef5e84$exports.MediaConnection)(peer, this, $17252116aa2ef1fb$var$__assign($17252116aa2ef1fb$var$__assign({}, options), {
            _stream: stream
        }));
        this._addConnection(peer, mediaConnection);
        return mediaConnection;
    };
    /** Add a data/media connection to this peer. */ Peer.prototype._addConnection = function(peerId, connection) {
        (0, $96fb85a532fc3748$exports.default).log("add connection ".concat(connection.type, ":").concat(connection.connectionId, " to peerId:").concat(peerId));
        if (!this._connections.has(peerId)) this._connections.set(peerId, []);
        this._connections.get(peerId).push(connection);
    };
    //TODO should be private
    Peer.prototype._removeConnection = function(connection) {
        var connections = this._connections.get(connection.peer);
        if (connections) {
            var index = connections.indexOf(connection);
            if (index !== -1) connections.splice(index, 1);
        }
        //remove from lost messages
        this._lostMessages["delete"](connection.connectionId);
    };
    /** Retrieve a data/media connection for this peer. */ Peer.prototype.getConnection = function(peerId, connectionId) {
        var e_3, _a;
        var connections = this._connections.get(peerId);
        if (!connections) return null;
        try {
            for(var connections_1 = $17252116aa2ef1fb$var$__values(connections), connections_1_1 = connections_1.next(); !connections_1_1.done; connections_1_1 = connections_1.next()){
                var connection = connections_1_1.value;
                if (connection.connectionId === connectionId) return connection;
            }
        } catch (e_3_1) {
            e_3 = {
                error: e_3_1
            };
        } finally{
            try {
                if (connections_1_1 && !connections_1_1.done && (_a = connections_1["return"])) _a.call(connections_1);
            } finally{
                if (e_3) throw e_3.error;
            }
        }
        return null;
    };
    Peer.prototype._delayedAbort = function(type, message) {
        var _this = this;
        setTimeout(function() {
            _this._abort(type, message);
        }, 0);
    };
    /**
     * Emits an error message and destroys the Peer.
     * The Peer is not destroyed if it's in a disconnected state, in which case
     * it retains its disconnected state and its existing connections.
     */ Peer.prototype._abort = function(type, message) {
        (0, $96fb85a532fc3748$exports.default).error("Aborting!");
        this.emitError(type, message);
        if (!this._lastServerId) this.destroy();
        else this.disconnect();
    };
    /** Emits a typed error message. */ Peer.prototype.emitError = function(type, err) {
        (0, $96fb85a532fc3748$exports.default).error("Error:", err);
        var error;
        if (typeof err === "string") error = new Error(err);
        else error = err;
        error.type = type;
        this.emit("error", error);
    };
    /**
     * Destroys the Peer: closes all active connections as well as the connection
     *  to the server.
     * Warning: The peer can no longer create or accept connections after being
     *  destroyed.
     */ Peer.prototype.destroy = function() {
        if (this.destroyed) return;
        (0, $96fb85a532fc3748$exports.default).log("Destroy peer with ID:".concat(this.id));
        this.disconnect();
        this._cleanup();
        this._destroyed = true;
        this.emit("close");
    };
    /** Disconnects every connection on this peer. */ Peer.prototype._cleanup = function() {
        var e_4, _a;
        try {
            for(var _b = $17252116aa2ef1fb$var$__values(this._connections.keys()), _c = _b.next(); !_c.done; _c = _b.next()){
                var peerId = _c.value;
                this._cleanupPeer(peerId);
                this._connections["delete"](peerId);
            }
        } catch (e_4_1) {
            e_4 = {
                error: e_4_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
            } finally{
                if (e_4) throw e_4.error;
            }
        }
        this.mqtt.removeAllListeners();
    };
    /** Closes all connections to this peer. */ Peer.prototype._cleanupPeer = function(peerId) {
        var e_5, _a;
        var connections = this._connections.get(peerId);
        if (!connections) return;
        try {
            for(var connections_2 = $17252116aa2ef1fb$var$__values(connections), connections_2_1 = connections_2.next(); !connections_2_1.done; connections_2_1 = connections_2.next()){
                var connection = connections_2_1.value;
                connection.close();
            }
        } catch (e_5_1) {
            e_5 = {
                error: e_5_1
            };
        } finally{
            try {
                if (connections_2_1 && !connections_2_1.done && (_a = connections_2["return"])) _a.call(connections_2);
            } finally{
                if (e_5) throw e_5.error;
            }
        }
    };
    /**
     * Disconnects the Peer's connection to the PeerServer. Does not close any
     *  active connections.
     * Warning: The peer can no longer create or accept connections after being
     *  disconnected. It also cannot reconnect to the server.
     */ Peer.prototype.disconnect = function() {
        if (this.disconnected) return;
        var currentId = this.id;
        (0, $96fb85a532fc3748$exports.default).log("Disconnect peer with ID:".concat(currentId));
        this._disconnected = true;
        this._open = false;
        this.mqtt.close();
        this._lastServerId = currentId;
        this._id = null;
        this.emit("disconnected", currentId);
    };
    /** Attempts to reconnect with the same ID. */ Peer.prototype.reconnect = function() {
        if (this.disconnected && !this.destroyed) {
            (0, $96fb85a532fc3748$exports.default).log("Attempting reconnection to server with ID ".concat(this._lastServerId));
            this._disconnected = false;
            this._initialize(this._lastServerId);
        } else if (this.destroyed) throw new Error("This peer cannot reconnect to the server. It has already been destroyed.");
        else if (!this.disconnected && !this.open) // Do nothing. We're still connecting the first time.
        (0, $96fb85a532fc3748$exports.default).error("In a hurry? We're still trying to make the initial connection!");
        else throw new Error("Peer ".concat(this.id, " cannot reconnect because it is not disconnected from the server!"));
    };
    Peer.DEFAULT_KEY = "peerjs";
    return Peer;
}((0, $b43bf3d87e5977ce$exports.EventEmitter));


window.peerjs = {
    Peer: (0, $17252116aa2ef1fb$exports.Peer),
    util: (0, $7dc43ad2ffa25036$exports.util)
};
/** @deprecated Should use peerjs namespace */ window.Peer = (0, $17252116aa2ef1fb$exports.Peer);

})();
//# sourceMappingURL=peerjs.js.map
